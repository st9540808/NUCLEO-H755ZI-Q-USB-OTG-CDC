
NUCLEO-H755ZI-Q-USB-old_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad04  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800af9c  0800af9c  0001af9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b01c  0800b01c  000201c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b01c  0800b01c  0001b01c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b024  0800b024  000201c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b024  0800b024  0001b024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b028  0800b028  0001b028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  24000000  0800b02c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000100  0800b12c  00020100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000160  0800b18c  00020160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001dac  240001c0  0800b1ec  000201c0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24001f6c  0800b1ec  00021f6c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001ff8c  00000000  00000000  000201ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003bfd  00000000  00000000  0004017a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001440  00000000  00000000  00043d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000012d8  00000000  00000000  000451b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003d964  00000000  00000000  00046490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001b7d2  00000000  00000000  00083df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00185c9d  00000000  00000000  0009f5c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00225263  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005454  00000000  00000000  002252b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240001c0 	.word	0x240001c0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800af84 	.word	0x0800af84

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240001c4 	.word	0x240001c4
 80002d4:	0800af84 	.word	0x0800af84

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800070e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000712:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000714:	bf00      	nop
 8000716:	4b27      	ldr	r3, [pc, #156]	; (80007b4 <main+0xac>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <main+0x24>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	2b00      	cmp	r3, #0
 800072a:	dcf4      	bgt.n	8000716 <main+0xe>
  if ( timeout < 0 )
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b00      	cmp	r3, #0
 8000730:	da01      	bge.n	8000736 <main+0x2e>
  {
  Error_Handler();
 8000732:	f000 f9d7 	bl	8000ae4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fb87 	bl	8000e48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f83f 	bl	80007bc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800073e:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <main+0xac>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000744:	4a1b      	ldr	r2, [pc, #108]	; (80007b4 <main+0xac>)
 8000746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074e:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <main+0xac>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800075c:	2000      	movs	r0, #0
 800075e:	f001 fb61 	bl	8001e24 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000762:	2100      	movs	r1, #0
 8000764:	2000      	movs	r0, #0
 8000766:	f001 fb77 	bl	8001e58 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800076a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000770:	bf00      	nop
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <main+0xac>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d104      	bne.n	8000788 <main+0x80>
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	1e5a      	subs	r2, r3, #1
 8000782:	607a      	str	r2, [r7, #4]
 8000784:	2b00      	cmp	r3, #0
 8000786:	dcf4      	bgt.n	8000772 <main+0x6a>
if ( timeout < 0 )
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b00      	cmp	r3, #0
 800078c:	da01      	bge.n	8000792 <main+0x8a>
{
Error_Handler();
 800078e:	f000 f9a9 	bl	8000ae4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f000 f927 	bl	80009e4 <MX_GPIO_Init>
  MX_ETH_Init();
 8000796:	f000 f88d 	bl	80008b4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800079a:	f000 f8d7 	bl	800094c <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 800079e:	f009 fe6b 	bl	800a478 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(1000);
 80007a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007a6:	f000 fbe1 	bl	8000f6c <HAL_Delay>
    HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80007aa:	2101      	movs	r1, #1
 80007ac:	4802      	ldr	r0, [pc, #8]	; (80007b8 <main+0xb0>)
 80007ae:	f001 fb1e 	bl	8001dee <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 80007b2:	e7f6      	b.n	80007a2 <main+0x9a>
 80007b4:	58024400 	.word	0x58024400
 80007b8:	58020400 	.word	0x58020400

080007bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b09c      	sub	sp, #112	; 0x70
 80007c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c6:	224c      	movs	r2, #76	; 0x4c
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f00a fbd2 	bl	800af74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2220      	movs	r2, #32
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f00a fbcc 	bl	800af74 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007dc:	2004      	movs	r0, #4
 80007de:	f002 fe25 	bl	800342c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007e2:	2300      	movs	r3, #0
 80007e4:	603b      	str	r3, [r7, #0]
 80007e6:	4b31      	ldr	r3, [pc, #196]	; (80008ac <SystemClock_Config+0xf0>)
 80007e8:	699b      	ldr	r3, [r3, #24]
 80007ea:	4a30      	ldr	r2, [pc, #192]	; (80008ac <SystemClock_Config+0xf0>)
 80007ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007f0:	6193      	str	r3, [r2, #24]
 80007f2:	4b2e      	ldr	r3, [pc, #184]	; (80008ac <SystemClock_Config+0xf0>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	4b2c      	ldr	r3, [pc, #176]	; (80008b0 <SystemClock_Config+0xf4>)
 80007fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000800:	4a2b      	ldr	r2, [pc, #172]	; (80008b0 <SystemClock_Config+0xf4>)
 8000802:	f043 0301 	orr.w	r3, r3, #1
 8000806:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000808:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <SystemClock_Config+0xf4>)
 800080a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800080c:	f003 0301 	and.w	r3, r3, #1
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000814:	bf00      	nop
 8000816:	4b25      	ldr	r3, [pc, #148]	; (80008ac <SystemClock_Config+0xf0>)
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800081e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000822:	d1f8      	bne.n	8000816 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000824:	2321      	movs	r3, #33	; 0x21
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000828:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800082e:	2301      	movs	r3, #1
 8000830:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000832:	2302      	movs	r3, #2
 8000834:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000836:	2302      	movs	r3, #2
 8000838:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800083a:	2301      	movs	r3, #1
 800083c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800083e:	2378      	movs	r3, #120	; 0x78
 8000840:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000842:	2302      	movs	r3, #2
 8000844:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8000846:	230f      	movs	r3, #15
 8000848:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800084a:	2302      	movs	r3, #2
 800084c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800084e:	230c      	movs	r3, #12
 8000850:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000852:	2300      	movs	r3, #0
 8000854:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085e:	4618      	mov	r0, r3
 8000860:	f002 fe4e 	bl	8003500 <HAL_RCC_OscConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800086a:	f000 f93b 	bl	8000ae4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086e:	233f      	movs	r3, #63	; 0x3f
 8000870:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000872:	2303      	movs	r3, #3
 8000874:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800087a:	2308      	movs	r3, #8
 800087c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800087e:	2340      	movs	r3, #64	; 0x40
 8000880:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000882:	2340      	movs	r3, #64	; 0x40
 8000884:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000886:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800088a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800088c:	2340      	movs	r3, #64	; 0x40
 800088e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2104      	movs	r1, #4
 8000894:	4618      	mov	r0, r3
 8000896:	f003 fa61 	bl	8003d5c <HAL_RCC_ClockConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80008a0:	f000 f920 	bl	8000ae4 <Error_Handler>
  }
}
 80008a4:	bf00      	nop
 80008a6:	3770      	adds	r7, #112	; 0x70
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	58024800 	.word	0x58024800
 80008b0:	58000400 	.word	0x58000400

080008b4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008b8:	4b1e      	ldr	r3, [pc, #120]	; (8000934 <MX_ETH_Init+0x80>)
 80008ba:	4a1f      	ldr	r2, [pc, #124]	; (8000938 <MX_ETH_Init+0x84>)
 80008bc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008be:	4b1f      	ldr	r3, [pc, #124]	; (800093c <MX_ETH_Init+0x88>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008c4:	4b1d      	ldr	r3, [pc, #116]	; (800093c <MX_ETH_Init+0x88>)
 80008c6:	2280      	movs	r2, #128	; 0x80
 80008c8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008ca:	4b1c      	ldr	r3, [pc, #112]	; (800093c <MX_ETH_Init+0x88>)
 80008cc:	22e1      	movs	r2, #225	; 0xe1
 80008ce:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008d0:	4b1a      	ldr	r3, [pc, #104]	; (800093c <MX_ETH_Init+0x88>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008d6:	4b19      	ldr	r3, [pc, #100]	; (800093c <MX_ETH_Init+0x88>)
 80008d8:	2200      	movs	r2, #0
 80008da:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <MX_ETH_Init+0x88>)
 80008de:	2200      	movs	r2, #0
 80008e0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_ETH_Init+0x80>)
 80008e4:	4a15      	ldr	r2, [pc, #84]	; (800093c <MX_ETH_Init+0x88>)
 80008e6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <MX_ETH_Init+0x80>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_ETH_Init+0x80>)
 80008f0:	4a13      	ldr	r2, [pc, #76]	; (8000940 <MX_ETH_Init+0x8c>)
 80008f2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_ETH_Init+0x80>)
 80008f6:	4a13      	ldr	r2, [pc, #76]	; (8000944 <MX_ETH_Init+0x90>)
 80008f8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <MX_ETH_Init+0x80>)
 80008fc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000900:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000902:	480c      	ldr	r0, [pc, #48]	; (8000934 <MX_ETH_Init+0x80>)
 8000904:	f000 fc86 	bl	8001214 <HAL_ETH_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800090e:	f000 f8e9 	bl	8000ae4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000912:	2238      	movs	r2, #56	; 0x38
 8000914:	2100      	movs	r1, #0
 8000916:	480c      	ldr	r0, [pc, #48]	; (8000948 <MX_ETH_Init+0x94>)
 8000918:	f00a fb2c 	bl	800af74 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <MX_ETH_Init+0x94>)
 800091e:	2221      	movs	r2, #33	; 0x21
 8000920:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_ETH_Init+0x94>)
 8000924:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000928:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800092a:	4b07      	ldr	r3, [pc, #28]	; (8000948 <MX_ETH_Init+0x94>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	24000214 	.word	0x24000214
 8000938:	40028000 	.word	0x40028000
 800093c:	24000354 	.word	0x24000354
 8000940:	24000160 	.word	0x24000160
 8000944:	24000100 	.word	0x24000100
 8000948:	240001dc 	.word	0x240001dc

0800094c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000950:	4b22      	ldr	r3, [pc, #136]	; (80009dc <MX_USART3_UART_Init+0x90>)
 8000952:	4a23      	ldr	r2, [pc, #140]	; (80009e0 <MX_USART3_UART_Init+0x94>)
 8000954:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000956:	4b21      	ldr	r3, [pc, #132]	; (80009dc <MX_USART3_UART_Init+0x90>)
 8000958:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800095c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800095e:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <MX_USART3_UART_Init+0x90>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000964:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <MX_USART3_UART_Init+0x90>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800096a:	4b1c      	ldr	r3, [pc, #112]	; (80009dc <MX_USART3_UART_Init+0x90>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000970:	4b1a      	ldr	r3, [pc, #104]	; (80009dc <MX_USART3_UART_Init+0x90>)
 8000972:	220c      	movs	r2, #12
 8000974:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000976:	4b19      	ldr	r3, [pc, #100]	; (80009dc <MX_USART3_UART_Init+0x90>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800097c:	4b17      	ldr	r3, [pc, #92]	; (80009dc <MX_USART3_UART_Init+0x90>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000982:	4b16      	ldr	r3, [pc, #88]	; (80009dc <MX_USART3_UART_Init+0x90>)
 8000984:	2200      	movs	r2, #0
 8000986:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_USART3_UART_Init+0x90>)
 800098a:	2200      	movs	r2, #0
 800098c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <MX_USART3_UART_Init+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000994:	4811      	ldr	r0, [pc, #68]	; (80009dc <MX_USART3_UART_Init+0x90>)
 8000996:	f005 f8d5 	bl	8005b44 <HAL_UART_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009a0:	f000 f8a0 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a4:	2100      	movs	r1, #0
 80009a6:	480d      	ldr	r0, [pc, #52]	; (80009dc <MX_USART3_UART_Init+0x90>)
 80009a8:	f006 f872 	bl	8006a90 <HAL_UARTEx_SetTxFifoThreshold>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009b2:	f000 f897 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b6:	2100      	movs	r1, #0
 80009b8:	4808      	ldr	r0, [pc, #32]	; (80009dc <MX_USART3_UART_Init+0x90>)
 80009ba:	f006 f8a7 	bl	8006b0c <HAL_UARTEx_SetRxFifoThreshold>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009c4:	f000 f88e 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009c8:	4804      	ldr	r0, [pc, #16]	; (80009dc <MX_USART3_UART_Init+0x90>)
 80009ca:	f006 f828 	bl	8006a1e <HAL_UARTEx_DisableFifoMode>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009d4:	f000 f886 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	240002c4 	.word	0x240002c4
 80009e0:	40004800 	.word	0x40004800

080009e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08c      	sub	sp, #48	; 0x30
 80009e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fa:	4b38      	ldr	r3, [pc, #224]	; (8000adc <MX_GPIO_Init+0xf8>)
 80009fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a00:	4a36      	ldr	r2, [pc, #216]	; (8000adc <MX_GPIO_Init+0xf8>)
 8000a02:	f043 0304 	orr.w	r3, r3, #4
 8000a06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a0a:	4b34      	ldr	r3, [pc, #208]	; (8000adc <MX_GPIO_Init+0xf8>)
 8000a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a10:	f003 0304 	and.w	r3, r3, #4
 8000a14:	61bb      	str	r3, [r7, #24]
 8000a16:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a18:	4b30      	ldr	r3, [pc, #192]	; (8000adc <MX_GPIO_Init+0xf8>)
 8000a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1e:	4a2f      	ldr	r2, [pc, #188]	; (8000adc <MX_GPIO_Init+0xf8>)
 8000a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a28:	4b2c      	ldr	r3, [pc, #176]	; (8000adc <MX_GPIO_Init+0xf8>)
 8000a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	4b29      	ldr	r3, [pc, #164]	; (8000adc <MX_GPIO_Init+0xf8>)
 8000a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3c:	4a27      	ldr	r2, [pc, #156]	; (8000adc <MX_GPIO_Init+0xf8>)
 8000a3e:	f043 0301 	orr.w	r3, r3, #1
 8000a42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a46:	4b25      	ldr	r3, [pc, #148]	; (8000adc <MX_GPIO_Init+0xf8>)
 8000a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4c:	f003 0301 	and.w	r3, r3, #1
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a54:	4b21      	ldr	r3, [pc, #132]	; (8000adc <MX_GPIO_Init+0xf8>)
 8000a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5a:	4a20      	ldr	r2, [pc, #128]	; (8000adc <MX_GPIO_Init+0xf8>)
 8000a5c:	f043 0302 	orr.w	r3, r3, #2
 8000a60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a64:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <MX_GPIO_Init+0xf8>)
 8000a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a72:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <MX_GPIO_Init+0xf8>)
 8000a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a78:	4a18      	ldr	r2, [pc, #96]	; (8000adc <MX_GPIO_Init+0xf8>)
 8000a7a:	f043 0308 	orr.w	r3, r3, #8
 8000a7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a82:	4b16      	ldr	r3, [pc, #88]	; (8000adc <MX_GPIO_Init+0xf8>)
 8000a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a88:	f003 0308 	and.w	r3, r3, #8
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <MX_GPIO_Init+0xf8>)
 8000a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a96:	4a11      	ldr	r2, [pc, #68]	; (8000adc <MX_GPIO_Init+0xf8>)
 8000a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa0:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <MX_GPIO_Init+0xf8>)
 8000aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	480b      	ldr	r0, [pc, #44]	; (8000ae0 <MX_GPIO_Init+0xfc>)
 8000ab4:	f001 f982 	bl	8001dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4619      	mov	r1, r3
 8000ace:	4804      	ldr	r0, [pc, #16]	; (8000ae0 <MX_GPIO_Init+0xfc>)
 8000ad0:	f000 ffc4 	bl	8001a5c <HAL_GPIO_Init>

}
 8000ad4:	bf00      	nop
 8000ad6:	3730      	adds	r7, #48	; 0x30
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	58024400 	.word	0x58024400
 8000ae0:	58020400 	.word	0x58020400

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aec:	e7fe      	b.n	8000aec <Error_Handler+0x8>
	...

08000af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <HAL_MspInit+0x30>)
 8000af8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000afc:	4a08      	ldr	r2, [pc, #32]	; (8000b20 <HAL_MspInit+0x30>)
 8000afe:	f043 0302 	orr.w	r3, r3, #2
 8000b02:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_MspInit+0x30>)
 8000b08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b0c:	f003 0302 	and.w	r3, r3, #2
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	58024400 	.word	0x58024400

08000b24 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08e      	sub	sp, #56	; 0x38
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a59      	ldr	r2, [pc, #356]	; (8000ca8 <HAL_ETH_MspInit+0x184>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	f040 80ab 	bne.w	8000c9e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b48:	4b58      	ldr	r3, [pc, #352]	; (8000cac <HAL_ETH_MspInit+0x188>)
 8000b4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b4e:	4a57      	ldr	r2, [pc, #348]	; (8000cac <HAL_ETH_MspInit+0x188>)
 8000b50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b54:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b58:	4b54      	ldr	r3, [pc, #336]	; (8000cac <HAL_ETH_MspInit+0x188>)
 8000b5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b62:	623b      	str	r3, [r7, #32]
 8000b64:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000b66:	4b51      	ldr	r3, [pc, #324]	; (8000cac <HAL_ETH_MspInit+0x188>)
 8000b68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b6c:	4a4f      	ldr	r2, [pc, #316]	; (8000cac <HAL_ETH_MspInit+0x188>)
 8000b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b72:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b76:	4b4d      	ldr	r3, [pc, #308]	; (8000cac <HAL_ETH_MspInit+0x188>)
 8000b78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b80:	61fb      	str	r3, [r7, #28]
 8000b82:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000b84:	4b49      	ldr	r3, [pc, #292]	; (8000cac <HAL_ETH_MspInit+0x188>)
 8000b86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b8a:	4a48      	ldr	r2, [pc, #288]	; (8000cac <HAL_ETH_MspInit+0x188>)
 8000b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b90:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b94:	4b45      	ldr	r3, [pc, #276]	; (8000cac <HAL_ETH_MspInit+0x188>)
 8000b96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9e:	61bb      	str	r3, [r7, #24]
 8000ba0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba2:	4b42      	ldr	r3, [pc, #264]	; (8000cac <HAL_ETH_MspInit+0x188>)
 8000ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba8:	4a40      	ldr	r2, [pc, #256]	; (8000cac <HAL_ETH_MspInit+0x188>)
 8000baa:	f043 0304 	orr.w	r3, r3, #4
 8000bae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb2:	4b3e      	ldr	r3, [pc, #248]	; (8000cac <HAL_ETH_MspInit+0x188>)
 8000bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb8:	f003 0304 	and.w	r3, r3, #4
 8000bbc:	617b      	str	r3, [r7, #20]
 8000bbe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc0:	4b3a      	ldr	r3, [pc, #232]	; (8000cac <HAL_ETH_MspInit+0x188>)
 8000bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc6:	4a39      	ldr	r2, [pc, #228]	; (8000cac <HAL_ETH_MspInit+0x188>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd0:	4b36      	ldr	r3, [pc, #216]	; (8000cac <HAL_ETH_MspInit+0x188>)
 8000bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	4b33      	ldr	r3, [pc, #204]	; (8000cac <HAL_ETH_MspInit+0x188>)
 8000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be4:	4a31      	ldr	r2, [pc, #196]	; (8000cac <HAL_ETH_MspInit+0x188>)
 8000be6:	f043 0302 	orr.w	r3, r3, #2
 8000bea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bee:	4b2f      	ldr	r3, [pc, #188]	; (8000cac <HAL_ETH_MspInit+0x188>)
 8000bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf4:	f003 0302 	and.w	r3, r3, #2
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bfc:	4b2b      	ldr	r3, [pc, #172]	; (8000cac <HAL_ETH_MspInit+0x188>)
 8000bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c02:	4a2a      	ldr	r2, [pc, #168]	; (8000cac <HAL_ETH_MspInit+0x188>)
 8000c04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c0c:	4b27      	ldr	r3, [pc, #156]	; (8000cac <HAL_ETH_MspInit+0x188>)
 8000c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c1a:	2332      	movs	r3, #50	; 0x32
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c2a:	230b      	movs	r3, #11
 8000c2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c32:	4619      	mov	r1, r3
 8000c34:	481e      	ldr	r0, [pc, #120]	; (8000cb0 <HAL_ETH_MspInit+0x18c>)
 8000c36:	f000 ff11 	bl	8001a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000c3a:	2386      	movs	r3, #134	; 0x86
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c4a:	230b      	movs	r3, #11
 8000c4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c52:	4619      	mov	r1, r3
 8000c54:	4817      	ldr	r0, [pc, #92]	; (8000cb4 <HAL_ETH_MspInit+0x190>)
 8000c56:	f000 ff01 	bl	8001a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c6c:	230b      	movs	r3, #11
 8000c6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c74:	4619      	mov	r1, r3
 8000c76:	4810      	ldr	r0, [pc, #64]	; (8000cb8 <HAL_ETH_MspInit+0x194>)
 8000c78:	f000 fef0 	bl	8001a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c7c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c8e:	230b      	movs	r3, #11
 8000c90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c96:	4619      	mov	r1, r3
 8000c98:	4808      	ldr	r0, [pc, #32]	; (8000cbc <HAL_ETH_MspInit+0x198>)
 8000c9a:	f000 fedf 	bl	8001a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c9e:	bf00      	nop
 8000ca0:	3738      	adds	r7, #56	; 0x38
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40028000 	.word	0x40028000
 8000cac:	58024400 	.word	0x58024400
 8000cb0:	58020800 	.word	0x58020800
 8000cb4:	58020000 	.word	0x58020000
 8000cb8:	58020400 	.word	0x58020400
 8000cbc:	58021800 	.word	0x58021800

08000cc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b0b8      	sub	sp, #224	; 0xe0
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd8:	f107 0310 	add.w	r3, r7, #16
 8000cdc:	22bc      	movs	r2, #188	; 0xbc
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f00a f947 	bl	800af74 <memset>
  if(huart->Instance==USART3)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a25      	ldr	r2, [pc, #148]	; (8000d80 <HAL_UART_MspInit+0xc0>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d142      	bne.n	8000d76 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cfa:	f107 0310 	add.w	r3, r7, #16
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f003 fbb8 	bl	8004474 <HAL_RCCEx_PeriphCLKConfig>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d0a:	f7ff feeb 	bl	8000ae4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d0e:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <HAL_UART_MspInit+0xc4>)
 8000d10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d14:	4a1b      	ldr	r2, [pc, #108]	; (8000d84 <HAL_UART_MspInit+0xc4>)
 8000d16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d1a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d1e:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <HAL_UART_MspInit+0xc4>)
 8000d20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2c:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <HAL_UART_MspInit+0xc4>)
 8000d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d32:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <HAL_UART_MspInit+0xc4>)
 8000d34:	f043 0308 	orr.w	r3, r3, #8
 8000d38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <HAL_UART_MspInit+0xc4>)
 8000d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d42:	f003 0308 	and.w	r3, r3, #8
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d64:	2307      	movs	r3, #7
 8000d66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d6a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4805      	ldr	r0, [pc, #20]	; (8000d88 <HAL_UART_MspInit+0xc8>)
 8000d72:	f000 fe73 	bl	8001a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d76:	bf00      	nop
 8000d78:	37e0      	adds	r7, #224	; 0xe0
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40004800 	.word	0x40004800
 8000d84:	58024400 	.word	0x58024400
 8000d88:	58020c00 	.word	0x58020c00

08000d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <NMI_Handler+0x4>

08000d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <HardFault_Handler+0x4>

08000d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <MemManage_Handler+0x4>

08000d9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <BusFault_Handler+0x4>

08000da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <UsageFault_Handler+0x4>

08000daa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd8:	f000 f8a8 	bl	8000f2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000de4:	4802      	ldr	r0, [pc, #8]	; (8000df0 <OTG_FS_IRQHandler+0x10>)
 8000de6:	f001 f9a2 	bl	800212e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	24001840 	.word	0x24001840

08000df4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000df4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e2c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000df8:	f7ff fbf0 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dfc:	480c      	ldr	r0, [pc, #48]	; (8000e30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dfe:	490d      	ldr	r1, [pc, #52]	; (8000e34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e00:	4a0d      	ldr	r2, [pc, #52]	; (8000e38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e04:	e002      	b.n	8000e0c <LoopCopyDataInit>

08000e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0a:	3304      	adds	r3, #4

08000e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e10:	d3f9      	bcc.n	8000e06 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e12:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e14:	4c0a      	ldr	r4, [pc, #40]	; (8000e40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e18:	e001      	b.n	8000e1e <LoopFillZerobss>

08000e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e1c:	3204      	adds	r2, #4

08000e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e20:	d3fb      	bcc.n	8000e1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e22:	f00a f883 	bl	800af2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e26:	f7ff fc6f 	bl	8000708 <main>
  bx  lr
 8000e2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e2c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000e30:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e34:	24000100 	.word	0x24000100
  ldr r2, =_sidata
 8000e38:	0800b02c 	.word	0x0800b02c
  ldr r2, =_sbss
 8000e3c:	240001c0 	.word	0x240001c0
  ldr r4, =_ebss
 8000e40:	24001f6c 	.word	0x24001f6c

08000e44 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e44:	e7fe      	b.n	8000e44 <ADC3_IRQHandler>
	...

08000e48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e4e:	2003      	movs	r0, #3
 8000e50:	f000 f9a0 	bl	8001194 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e54:	f003 f938 	bl	80040c8 <HAL_RCC_GetSysClockFreq>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <HAL_Init+0x68>)
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	0a1b      	lsrs	r3, r3, #8
 8000e60:	f003 030f 	and.w	r3, r3, #15
 8000e64:	4913      	ldr	r1, [pc, #76]	; (8000eb4 <HAL_Init+0x6c>)
 8000e66:	5ccb      	ldrb	r3, [r1, r3]
 8000e68:	f003 031f 	and.w	r3, r3, #31
 8000e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e70:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e72:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <HAL_Init+0x68>)
 8000e74:	699b      	ldr	r3, [r3, #24]
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	4a0e      	ldr	r2, [pc, #56]	; (8000eb4 <HAL_Init+0x6c>)
 8000e7c:	5cd3      	ldrb	r3, [r2, r3]
 8000e7e:	f003 031f 	and.w	r3, r3, #31
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	fa22 f303 	lsr.w	r3, r2, r3
 8000e88:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <HAL_Init+0x70>)
 8000e8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e8c:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <HAL_Init+0x74>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e92:	2000      	movs	r0, #0
 8000e94:	f000 f814 	bl	8000ec0 <HAL_InitTick>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e002      	b.n	8000ea8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea2:	f7ff fe25 	bl	8000af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	58024400 	.word	0x58024400
 8000eb4:	0800afe4 	.word	0x0800afe4
 8000eb8:	24000004 	.word	0x24000004
 8000ebc:	24000000 	.word	0x24000000

08000ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ec8:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <HAL_InitTick+0x60>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d101      	bne.n	8000ed4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e021      	b.n	8000f18 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ed4:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <HAL_InitTick+0x64>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <HAL_InitTick+0x60>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	4619      	mov	r1, r3
 8000ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 f985 	bl	80011fa <HAL_SYSTICK_Config>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e00e      	b.n	8000f18 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b0f      	cmp	r3, #15
 8000efe:	d80a      	bhi.n	8000f16 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f00:	2200      	movs	r2, #0
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	f000 f94f 	bl	80011aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f0c:	4a06      	ldr	r2, [pc, #24]	; (8000f28 <HAL_InitTick+0x68>)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f12:	2300      	movs	r3, #0
 8000f14:	e000      	b.n	8000f18 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	2400000c 	.word	0x2400000c
 8000f24:	24000000 	.word	0x24000000
 8000f28:	24000008 	.word	0x24000008

08000f2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_IncTick+0x20>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_IncTick+0x24>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <HAL_IncTick+0x24>)
 8000f3e:	6013      	str	r3, [r2, #0]
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	2400000c 	.word	0x2400000c
 8000f50:	2400035c 	.word	0x2400035c

08000f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return uwTick;
 8000f58:	4b03      	ldr	r3, [pc, #12]	; (8000f68 <HAL_GetTick+0x14>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	2400035c 	.word	0x2400035c

08000f6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f74:	f7ff ffee 	bl	8000f54 <HAL_GetTick>
 8000f78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f84:	d005      	beq.n	8000f92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <HAL_Delay+0x44>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4413      	add	r3, r2
 8000f90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f92:	bf00      	nop
 8000f94:	f7ff ffde 	bl	8000f54 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d8f7      	bhi.n	8000f94 <HAL_Delay+0x28>
  {
  }
}
 8000fa4:	bf00      	nop
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	2400000c 	.word	0x2400000c

08000fb4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <HAL_GetREVID+0x14>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	0c1b      	lsrs	r3, r3, #16
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	5c001000 	.word	0x5c001000

08000fcc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8000fdc:	4904      	ldr	r1, [pc, #16]	; (8000ff0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	604b      	str	r3, [r1, #4]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	58000400 	.word	0x58000400

08000ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001004:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <__NVIC_SetPriorityGrouping+0x40>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001010:	4013      	ands	r3, r2
 8001012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <__NVIC_SetPriorityGrouping+0x44>)
 800101e:	4313      	orrs	r3, r2
 8001020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001022:	4a04      	ldr	r2, [pc, #16]	; (8001034 <__NVIC_SetPriorityGrouping+0x40>)
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	60d3      	str	r3, [r2, #12]
}
 8001028:	bf00      	nop
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00
 8001038:	05fa0000 	.word	0x05fa0000

0800103c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001040:	4b04      	ldr	r3, [pc, #16]	; (8001054 <__NVIC_GetPriorityGrouping+0x18>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	0a1b      	lsrs	r3, r3, #8
 8001046:	f003 0307 	and.w	r3, r3, #7
}
 800104a:	4618      	mov	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001062:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001066:	2b00      	cmp	r3, #0
 8001068:	db0b      	blt.n	8001082 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800106a:	88fb      	ldrh	r3, [r7, #6]
 800106c:	f003 021f 	and.w	r2, r3, #31
 8001070:	4907      	ldr	r1, [pc, #28]	; (8001090 <__NVIC_EnableIRQ+0x38>)
 8001072:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001076:	095b      	lsrs	r3, r3, #5
 8001078:	2001      	movs	r0, #1
 800107a:	fa00 f202 	lsl.w	r2, r0, r2
 800107e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000e100 	.word	0xe000e100

08001094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	6039      	str	r1, [r7, #0]
 800109e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	db0a      	blt.n	80010be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	490c      	ldr	r1, [pc, #48]	; (80010e0 <__NVIC_SetPriority+0x4c>)
 80010ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010b2:	0112      	lsls	r2, r2, #4
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	440b      	add	r3, r1
 80010b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010bc:	e00a      	b.n	80010d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4908      	ldr	r1, [pc, #32]	; (80010e4 <__NVIC_SetPriority+0x50>)
 80010c4:	88fb      	ldrh	r3, [r7, #6]
 80010c6:	f003 030f 	and.w	r3, r3, #15
 80010ca:	3b04      	subs	r3, #4
 80010cc:	0112      	lsls	r2, r2, #4
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	440b      	add	r3, r1
 80010d2:	761a      	strb	r2, [r3, #24]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000e100 	.word	0xe000e100
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b089      	sub	sp, #36	; 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f1c3 0307 	rsb	r3, r3, #7
 8001102:	2b04      	cmp	r3, #4
 8001104:	bf28      	it	cs
 8001106:	2304      	movcs	r3, #4
 8001108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3304      	adds	r3, #4
 800110e:	2b06      	cmp	r3, #6
 8001110:	d902      	bls.n	8001118 <NVIC_EncodePriority+0x30>
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3b03      	subs	r3, #3
 8001116:	e000      	b.n	800111a <NVIC_EncodePriority+0x32>
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	f04f 32ff 	mov.w	r2, #4294967295
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43da      	mvns	r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	401a      	ands	r2, r3
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001130:	f04f 31ff 	mov.w	r1, #4294967295
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	fa01 f303 	lsl.w	r3, r1, r3
 800113a:	43d9      	mvns	r1, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	4313      	orrs	r3, r2
         );
}
 8001142:	4618      	mov	r0, r3
 8001144:	3724      	adds	r7, #36	; 0x24
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
	...

08001150 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3b01      	subs	r3, #1
 800115c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001160:	d301      	bcc.n	8001166 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001162:	2301      	movs	r3, #1
 8001164:	e00f      	b.n	8001186 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001166:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <SysTick_Config+0x40>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3b01      	subs	r3, #1
 800116c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116e:	210f      	movs	r1, #15
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	f7ff ff8e 	bl	8001094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <SysTick_Config+0x40>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117e:	4b04      	ldr	r3, [pc, #16]	; (8001190 <SysTick_Config+0x40>)
 8001180:	2207      	movs	r2, #7
 8001182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	e000e010 	.word	0xe000e010

08001194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ff29 	bl	8000ff4 <__NVIC_SetPriorityGrouping>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b086      	sub	sp, #24
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4603      	mov	r3, r0
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	607a      	str	r2, [r7, #4]
 80011b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011b8:	f7ff ff40 	bl	800103c <__NVIC_GetPriorityGrouping>
 80011bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	68b9      	ldr	r1, [r7, #8]
 80011c2:	6978      	ldr	r0, [r7, #20]
 80011c4:	f7ff ff90 	bl	80010e8 <NVIC_EncodePriority>
 80011c8:	4602      	mov	r2, r0
 80011ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011ce:	4611      	mov	r1, r2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff5f 	bl	8001094 <__NVIC_SetPriority>
}
 80011d6:	bf00      	nop
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	4603      	mov	r3, r0
 80011e6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff33 	bl	8001058 <__NVIC_EnableIRQ>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff ffa4 	bl	8001150 <SysTick_Config>
 8001208:	4603      	mov	r3, r0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e0cf      	b.n	80013c6 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800122c:	2b00      	cmp	r3, #0
 800122e:	d106      	bne.n	800123e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2223      	movs	r2, #35	; 0x23
 8001234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff fc73 	bl	8000b24 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123e:	4b64      	ldr	r3, [pc, #400]	; (80013d0 <HAL_ETH_Init+0x1bc>)
 8001240:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001244:	4a62      	ldr	r2, [pc, #392]	; (80013d0 <HAL_ETH_Init+0x1bc>)
 8001246:	f043 0302 	orr.w	r3, r3, #2
 800124a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800124e:	4b60      	ldr	r3, [pc, #384]	; (80013d0 <HAL_ETH_Init+0x1bc>)
 8001250:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	7a1b      	ldrb	r3, [r3, #8]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d103      	bne.n	800126c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001264:	2000      	movs	r0, #0
 8001266:	f7ff feb1 	bl	8000fcc <HAL_SYSCFG_ETHInterfaceSelect>
 800126a:	e003      	b.n	8001274 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800126c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001270:	f7ff feac 	bl	8000fcc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001274:	4b57      	ldr	r3, [pc, #348]	; (80013d4 <HAL_ETH_Init+0x1c0>)
 8001276:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	6812      	ldr	r2, [r2, #0]
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800128e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001290:	f7ff fe60 	bl	8000f54 <HAL_GetTick>
 8001294:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001296:	e011      	b.n	80012bc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001298:	f7ff fe5c 	bl	8000f54 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012a6:	d909      	bls.n	80012bc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2204      	movs	r2, #4
 80012ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	22e0      	movs	r2, #224	; 0xe0
 80012b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e084      	b.n	80013c6 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1e4      	bne.n	8001298 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 f886 	bl	80013e0 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80012d4:	f003 f872 	bl	80043bc <HAL_RCC_GetHCLKFreq>
 80012d8:	4603      	mov	r3, r0
 80012da:	4a3f      	ldr	r2, [pc, #252]	; (80013d8 <HAL_ETH_Init+0x1c4>)
 80012dc:	fba2 2303 	umull	r2, r3, r2, r3
 80012e0:	0c9a      	lsrs	r2, r3, #18
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	3a01      	subs	r2, #1
 80012e8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 fa71 	bl	80017d4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012fa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80012fe:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	6812      	ldr	r2, [r2, #0]
 8001306:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800130a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800130e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d009      	beq.n	8001332 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2201      	movs	r2, #1
 8001322:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	22e0      	movs	r2, #224	; 0xe0
 800132a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e049      	b.n	80013c6 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800133a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800133e:	4b27      	ldr	r3, [pc, #156]	; (80013dc <HAL_ETH_Init+0x1c8>)
 8001340:	4013      	ands	r3, r2
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	6952      	ldr	r2, [r2, #20]
 8001346:	0051      	lsls	r1, r2, #1
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	6812      	ldr	r2, [r2, #0]
 800134c:	430b      	orrs	r3, r1
 800134e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001352:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 fad9 	bl	800190e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 fb1f 	bl	80019a0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	3305      	adds	r3, #5
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	021a      	lsls	r2, r3, #8
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	3304      	adds	r3, #4
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4619      	mov	r1, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	430a      	orrs	r2, r1
 800137c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	3303      	adds	r3, #3
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	061a      	lsls	r2, r3, #24
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	3302      	adds	r3, #2
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	041b      	lsls	r3, r3, #16
 8001394:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	3301      	adds	r3, #1
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80013a0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80013ae:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80013b0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2210      	movs	r2, #16
 80013c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	58024400 	.word	0x58024400
 80013d4:	58000400 	.word	0x58000400
 80013d8:	431bde83 	.word	0x431bde83
 80013dc:	ffff8001 	.word	0xffff8001

080013e0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013f0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80013f8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80013fa:	f002 ffdf 	bl	80043bc <HAL_RCC_GetHCLKFreq>
 80013fe:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	4a1e      	ldr	r2, [pc, #120]	; (800147c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d908      	bls.n	800141a <HAL_ETH_SetMDIOClockRange+0x3a>
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	4a1d      	ldr	r2, [pc, #116]	; (8001480 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d804      	bhi.n	800141a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	e027      	b.n	800146a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	4a18      	ldr	r2, [pc, #96]	; (8001480 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d908      	bls.n	8001434 <HAL_ETH_SetMDIOClockRange+0x54>
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	4a17      	ldr	r2, [pc, #92]	; (8001484 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d204      	bcs.n	8001434 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	e01a      	b.n	800146a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	4a13      	ldr	r2, [pc, #76]	; (8001484 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d303      	bcc.n	8001444 <HAL_ETH_SetMDIOClockRange+0x64>
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	4a12      	ldr	r2, [pc, #72]	; (8001488 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d911      	bls.n	8001468 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	4a10      	ldr	r2, [pc, #64]	; (8001488 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d908      	bls.n	800145e <HAL_ETH_SetMDIOClockRange+0x7e>
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	4a0f      	ldr	r2, [pc, #60]	; (800148c <HAL_ETH_SetMDIOClockRange+0xac>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d804      	bhi.n	800145e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	e005      	b.n	800146a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	e000      	b.n	800146a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001468:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001474:	bf00      	nop
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	01312cff 	.word	0x01312cff
 8001480:	02160ebf 	.word	0x02160ebf
 8001484:	03938700 	.word	0x03938700
 8001488:	05f5e0ff 	.word	0x05f5e0ff
 800148c:	08f0d17f 	.word	0x08f0d17f

08001490 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80014a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	791b      	ldrb	r3, [r3, #4]
 80014a8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80014aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	7b1b      	ldrb	r3, [r3, #12]
 80014b0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80014b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	7b5b      	ldrb	r3, [r3, #13]
 80014b8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80014ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	7b9b      	ldrb	r3, [r3, #14]
 80014c0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80014c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	7bdb      	ldrb	r3, [r3, #15]
 80014c8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80014ca:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	7c12      	ldrb	r2, [r2, #16]
 80014d0:	2a00      	cmp	r2, #0
 80014d2:	d102      	bne.n	80014da <ETH_SetMACConfig+0x4a>
 80014d4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80014d8:	e000      	b.n	80014dc <ETH_SetMACConfig+0x4c>
 80014da:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80014dc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	7c52      	ldrb	r2, [r2, #17]
 80014e2:	2a00      	cmp	r2, #0
 80014e4:	d102      	bne.n	80014ec <ETH_SetMACConfig+0x5c>
 80014e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014ea:	e000      	b.n	80014ee <ETH_SetMACConfig+0x5e>
 80014ec:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80014ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	7c9b      	ldrb	r3, [r3, #18]
 80014f4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80014f6:	431a      	orrs	r2, r3
               macconf->Speed |
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80014fc:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001502:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	7f1b      	ldrb	r3, [r3, #28]
 8001508:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800150a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	7f5b      	ldrb	r3, [r3, #29]
 8001510:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001512:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	7f92      	ldrb	r2, [r2, #30]
 8001518:	2a00      	cmp	r2, #0
 800151a:	d102      	bne.n	8001522 <ETH_SetMACConfig+0x92>
 800151c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001520:	e000      	b.n	8001524 <ETH_SetMACConfig+0x94>
 8001522:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001524:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	7fdb      	ldrb	r3, [r3, #31]
 800152a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800152c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001534:	2a00      	cmp	r2, #0
 8001536:	d102      	bne.n	800153e <ETH_SetMACConfig+0xae>
 8001538:	f44f 7280 	mov.w	r2, #256	; 0x100
 800153c:	e000      	b.n	8001540 <ETH_SetMACConfig+0xb0>
 800153e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001540:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001546:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800154e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001550:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001556:	4313      	orrs	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b56      	ldr	r3, [pc, #344]	; (80016bc <ETH_SetMACConfig+0x22c>)
 8001562:	4013      	ands	r3, r2
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	6812      	ldr	r2, [r2, #0]
 8001568:	68f9      	ldr	r1, [r7, #12]
 800156a:	430b      	orrs	r3, r1
 800156c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001572:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800157a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800157c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001584:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001586:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800158e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001590:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001598:	2a00      	cmp	r2, #0
 800159a:	d102      	bne.n	80015a2 <ETH_SetMACConfig+0x112>
 800159c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015a0:	e000      	b.n	80015a4 <ETH_SetMACConfig+0x114>
 80015a2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80015a4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80015aa:	4313      	orrs	r3, r2
 80015ac:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	4b42      	ldr	r3, [pc, #264]	; (80016c0 <ETH_SetMACConfig+0x230>)
 80015b6:	4013      	ands	r3, r2
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	6812      	ldr	r2, [r2, #0]
 80015bc:	68f9      	ldr	r1, [r7, #12]
 80015be:	430b      	orrs	r3, r1
 80015c0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015c8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80015ce:	4313      	orrs	r3, r2
 80015d0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68da      	ldr	r2, [r3, #12]
 80015d8:	4b3a      	ldr	r3, [pc, #232]	; (80016c4 <ETH_SetMACConfig+0x234>)
 80015da:	4013      	ands	r3, r2
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	6812      	ldr	r2, [r2, #0]
 80015e0:	68f9      	ldr	r1, [r7, #12]
 80015e2:	430b      	orrs	r3, r1
 80015e4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80015ec:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80015f2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80015fa:	2a00      	cmp	r2, #0
 80015fc:	d101      	bne.n	8001602 <ETH_SetMACConfig+0x172>
 80015fe:	2280      	movs	r2, #128	; 0x80
 8001600:	e000      	b.n	8001604 <ETH_SetMACConfig+0x174>
 8001602:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001604:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800160a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800160c:	4313      	orrs	r3, r2
 800160e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001616:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800161a:	4013      	ands	r3, r2
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	6812      	ldr	r2, [r2, #0]
 8001620:	68f9      	ldr	r1, [r7, #12]
 8001622:	430b      	orrs	r3, r1
 8001624:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800162c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001634:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001636:	4313      	orrs	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001642:	f023 0103 	bic.w	r1, r3, #3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	430a      	orrs	r2, r1
 800164e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800165a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001676:	2a00      	cmp	r2, #0
 8001678:	d101      	bne.n	800167e <ETH_SetMACConfig+0x1ee>
 800167a:	2240      	movs	r2, #64	; 0x40
 800167c:	e000      	b.n	8001680 <ETH_SetMACConfig+0x1f0>
 800167e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001680:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001688:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800168a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001692:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001694:	4313      	orrs	r3, r2
 8001696:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80016a0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	00048083 	.word	0x00048083
 80016c0:	c0f88000 	.word	0xc0f88000
 80016c4:	fffffef0 	.word	0xfffffef0

080016c8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4b38      	ldr	r3, [pc, #224]	; (80017c0 <ETH_SetDMAConfig+0xf8>)
 80016de:	4013      	ands	r3, r2
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	6811      	ldr	r1, [r2, #0]
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6812      	ldr	r2, [r2, #0]
 80016e8:	430b      	orrs	r3, r1
 80016ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016ee:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	791b      	ldrb	r3, [r3, #4]
 80016f4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80016fa:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	7b1b      	ldrb	r3, [r3, #12]
 8001700:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001702:	4313      	orrs	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	4b2c      	ldr	r3, [pc, #176]	; (80017c4 <ETH_SetDMAConfig+0xfc>)
 8001712:	4013      	ands	r3, r2
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	6812      	ldr	r2, [r2, #0]
 8001718:	68f9      	ldr	r1, [r7, #12]
 800171a:	430b      	orrs	r3, r1
 800171c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001720:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	7b5b      	ldrb	r3, [r3, #13]
 8001726:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800172c:	4313      	orrs	r3, r2
 800172e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001738:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800173c:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <ETH_SetDMAConfig+0x100>)
 800173e:	4013      	ands	r3, r2
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6812      	ldr	r2, [r2, #0]
 8001744:	68f9      	ldr	r1, [r7, #12]
 8001746:	430b      	orrs	r3, r1
 8001748:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800174c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	7d1b      	ldrb	r3, [r3, #20]
 8001758:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800175a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	7f5b      	ldrb	r3, [r3, #29]
 8001760:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001762:	4313      	orrs	r3, r2
 8001764:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800176e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001772:	4b16      	ldr	r3, [pc, #88]	; (80017cc <ETH_SetDMAConfig+0x104>)
 8001774:	4013      	ands	r3, r2
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6812      	ldr	r2, [r2, #0]
 800177a:	68f9      	ldr	r1, [r7, #12]
 800177c:	430b      	orrs	r3, r1
 800177e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001782:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	7f1b      	ldrb	r3, [r3, #28]
 800178a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001790:	4313      	orrs	r3, r2
 8001792:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800179c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80017a0:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <ETH_SetDMAConfig+0x108>)
 80017a2:	4013      	ands	r3, r2
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	6812      	ldr	r2, [r2, #0]
 80017a8:	68f9      	ldr	r1, [r7, #12]
 80017aa:	430b      	orrs	r3, r1
 80017ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017b0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80017b4:	bf00      	nop
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	ffff87fd 	.word	0xffff87fd
 80017c4:	ffff2ffe 	.word	0xffff2ffe
 80017c8:	fffec000 	.word	0xfffec000
 80017cc:	ffc0efef 	.word	0xffc0efef
 80017d0:	7fc0ffff 	.word	0x7fc0ffff

080017d4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b0a4      	sub	sp, #144	; 0x90
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80017dc:	2301      	movs	r3, #1
 80017de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80017e2:	2300      	movs	r3, #0
 80017e4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80017e6:	2300      	movs	r3, #0
 80017e8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80017f2:	2301      	movs	r3, #1
 80017f4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80017f8:	2301      	movs	r3, #1
 80017fa:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80017fe:	2301      	movs	r3, #1
 8001800:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001804:	2300      	movs	r3, #0
 8001806:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800180a:	2301      	movs	r3, #1
 800180c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001810:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001814:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001816:	2300      	movs	r3, #0
 8001818:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800181c:	2300      	movs	r3, #0
 800181e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001820:	2300      	movs	r3, #0
 8001822:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001826:	2300      	movs	r3, #0
 8001828:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800182c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001830:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001832:	2300      	movs	r3, #0
 8001834:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001838:	2300      	movs	r3, #0
 800183a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800183c:	2301      	movs	r3, #1
 800183e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001842:	2300      	movs	r3, #0
 8001844:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001848:	2300      	movs	r3, #0
 800184a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800184e:	2300      	movs	r3, #0
 8001850:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001852:	2300      	movs	r3, #0
 8001854:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001856:	2300      	movs	r3, #0
 8001858:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800185a:	2300      	movs	r3, #0
 800185c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001860:	2300      	movs	r3, #0
 8001862:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001866:	2301      	movs	r3, #1
 8001868:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800186c:	2320      	movs	r3, #32
 800186e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001872:	2301      	movs	r3, #1
 8001874:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800187e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001882:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001884:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001888:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800188a:	2300      	movs	r3, #0
 800188c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001890:	2302      	movs	r3, #2
 8001892:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001896:	2300      	movs	r3, #0
 8001898:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800189c:	2300      	movs	r3, #0
 800189e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80018a8:	2301      	movs	r3, #1
 80018aa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80018ae:	2300      	movs	r3, #0
 80018b0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80018b2:	2301      	movs	r3, #1
 80018b4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80018b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018bc:	4619      	mov	r1, r3
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff fde6 	bl	8001490 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80018c4:	2301      	movs	r3, #1
 80018c6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80018c8:	2301      	movs	r3, #1
 80018ca:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80018da:	2300      	movs	r3, #0
 80018dc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80018de:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80018e2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80018e4:	2300      	movs	r3, #0
 80018e6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80018e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80018ec:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80018f4:	f44f 7306 	mov.w	r3, #536	; 0x218
 80018f8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80018fa:	f107 0308 	add.w	r3, r7, #8
 80018fe:	4619      	mov	r1, r3
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff fee1 	bl	80016c8 <ETH_SetDMAConfig>
}
 8001906:	bf00      	nop
 8001908:	3790      	adds	r7, #144	; 0x90
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800190e:	b480      	push	{r7}
 8001910:	b085      	sub	sp, #20
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	e01d      	b.n	8001958 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68d9      	ldr	r1, [r3, #12]
 8001920:	68fa      	ldr	r2, [r7, #12]
 8001922:	4613      	mov	r3, r2
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	4413      	add	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	440b      	add	r3, r1
 800192c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	2200      	movs	r2, #0
 8001938:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	2200      	movs	r2, #0
 8001944:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001946:	68b9      	ldr	r1, [r7, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	3206      	adds	r2, #6
 800194e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	3301      	adds	r3, #1
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2b03      	cmp	r3, #3
 800195c:	d9de      	bls.n	800191c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800196c:	461a      	mov	r2, r3
 800196e:	2303      	movs	r3, #3
 8001970:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68da      	ldr	r2, [r3, #12]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001980:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001990:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001994:	bf00      	nop
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019a8:	2300      	movs	r3, #0
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	e023      	b.n	80019f6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6919      	ldr	r1, [r3, #16]
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	4613      	mov	r3, r2
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	4413      	add	r3, r2
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	440b      	add	r3, r1
 80019be:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	2200      	movs	r2, #0
 80019ca:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	2200      	movs	r2, #0
 80019d6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	2200      	movs	r2, #0
 80019dc:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	2200      	movs	r2, #0
 80019e2:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	3212      	adds	r2, #18
 80019ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	3301      	adds	r3, #1
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d9d8      	bls.n	80019ae <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a22:	461a      	mov	r2, r3
 8001a24:	2303      	movs	r3, #3
 8001a26:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	691a      	ldr	r2, [r3, #16]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a36:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a4a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001a4e:	bf00      	nop
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b089      	sub	sp, #36	; 0x24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001a6a:	4b89      	ldr	r3, [pc, #548]	; (8001c90 <HAL_GPIO_Init+0x234>)
 8001a6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a6e:	e194      	b.n	8001d9a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	2101      	movs	r1, #1
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 8186 	beq.w	8001d94 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 0303 	and.w	r3, r3, #3
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d005      	beq.n	8001aa0 <HAL_GPIO_Init+0x44>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d130      	bne.n	8001b02 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	2203      	movs	r2, #3
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	68da      	ldr	r2, [r3, #12]
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	091b      	lsrs	r3, r3, #4
 8001aec:	f003 0201 	and.w	r2, r3, #1
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	d017      	beq.n	8001b3e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	2203      	movs	r2, #3
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4013      	ands	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f003 0303 	and.w	r3, r3, #3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d123      	bne.n	8001b92 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	08da      	lsrs	r2, r3, #3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3208      	adds	r2, #8
 8001b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	220f      	movs	r2, #15
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	691a      	ldr	r2, [r3, #16]
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	08da      	lsrs	r2, r3, #3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3208      	adds	r2, #8
 8001b8c:	69b9      	ldr	r1, [r7, #24]
 8001b8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 0203 	and.w	r2, r3, #3
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 80e0 	beq.w	8001d94 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd4:	4b2f      	ldr	r3, [pc, #188]	; (8001c94 <HAL_GPIO_Init+0x238>)
 8001bd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bda:	4a2e      	ldr	r2, [pc, #184]	; (8001c94 <HAL_GPIO_Init+0x238>)
 8001bdc:	f043 0302 	orr.w	r3, r3, #2
 8001be0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001be4:	4b2b      	ldr	r3, [pc, #172]	; (8001c94 <HAL_GPIO_Init+0x238>)
 8001be6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bf2:	4a29      	ldr	r2, [pc, #164]	; (8001c98 <HAL_GPIO_Init+0x23c>)
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	089b      	lsrs	r3, r3, #2
 8001bf8:	3302      	adds	r3, #2
 8001bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	220f      	movs	r2, #15
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4013      	ands	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a20      	ldr	r2, [pc, #128]	; (8001c9c <HAL_GPIO_Init+0x240>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d052      	beq.n	8001cc4 <HAL_GPIO_Init+0x268>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a1f      	ldr	r2, [pc, #124]	; (8001ca0 <HAL_GPIO_Init+0x244>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d031      	beq.n	8001c8a <HAL_GPIO_Init+0x22e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a1e      	ldr	r2, [pc, #120]	; (8001ca4 <HAL_GPIO_Init+0x248>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d02b      	beq.n	8001c86 <HAL_GPIO_Init+0x22a>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a1d      	ldr	r2, [pc, #116]	; (8001ca8 <HAL_GPIO_Init+0x24c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d025      	beq.n	8001c82 <HAL_GPIO_Init+0x226>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a1c      	ldr	r2, [pc, #112]	; (8001cac <HAL_GPIO_Init+0x250>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d01f      	beq.n	8001c7e <HAL_GPIO_Init+0x222>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a1b      	ldr	r2, [pc, #108]	; (8001cb0 <HAL_GPIO_Init+0x254>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d019      	beq.n	8001c7a <HAL_GPIO_Init+0x21e>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a1a      	ldr	r2, [pc, #104]	; (8001cb4 <HAL_GPIO_Init+0x258>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d013      	beq.n	8001c76 <HAL_GPIO_Init+0x21a>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a19      	ldr	r2, [pc, #100]	; (8001cb8 <HAL_GPIO_Init+0x25c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d00d      	beq.n	8001c72 <HAL_GPIO_Init+0x216>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a18      	ldr	r2, [pc, #96]	; (8001cbc <HAL_GPIO_Init+0x260>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d007      	beq.n	8001c6e <HAL_GPIO_Init+0x212>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a17      	ldr	r2, [pc, #92]	; (8001cc0 <HAL_GPIO_Init+0x264>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d101      	bne.n	8001c6a <HAL_GPIO_Init+0x20e>
 8001c66:	2309      	movs	r3, #9
 8001c68:	e02d      	b.n	8001cc6 <HAL_GPIO_Init+0x26a>
 8001c6a:	230a      	movs	r3, #10
 8001c6c:	e02b      	b.n	8001cc6 <HAL_GPIO_Init+0x26a>
 8001c6e:	2308      	movs	r3, #8
 8001c70:	e029      	b.n	8001cc6 <HAL_GPIO_Init+0x26a>
 8001c72:	2307      	movs	r3, #7
 8001c74:	e027      	b.n	8001cc6 <HAL_GPIO_Init+0x26a>
 8001c76:	2306      	movs	r3, #6
 8001c78:	e025      	b.n	8001cc6 <HAL_GPIO_Init+0x26a>
 8001c7a:	2305      	movs	r3, #5
 8001c7c:	e023      	b.n	8001cc6 <HAL_GPIO_Init+0x26a>
 8001c7e:	2304      	movs	r3, #4
 8001c80:	e021      	b.n	8001cc6 <HAL_GPIO_Init+0x26a>
 8001c82:	2303      	movs	r3, #3
 8001c84:	e01f      	b.n	8001cc6 <HAL_GPIO_Init+0x26a>
 8001c86:	2302      	movs	r3, #2
 8001c88:	e01d      	b.n	8001cc6 <HAL_GPIO_Init+0x26a>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e01b      	b.n	8001cc6 <HAL_GPIO_Init+0x26a>
 8001c8e:	bf00      	nop
 8001c90:	58000080 	.word	0x58000080
 8001c94:	58024400 	.word	0x58024400
 8001c98:	58000400 	.word	0x58000400
 8001c9c:	58020000 	.word	0x58020000
 8001ca0:	58020400 	.word	0x58020400
 8001ca4:	58020800 	.word	0x58020800
 8001ca8:	58020c00 	.word	0x58020c00
 8001cac:	58021000 	.word	0x58021000
 8001cb0:	58021400 	.word	0x58021400
 8001cb4:	58021800 	.word	0x58021800
 8001cb8:	58021c00 	.word	0x58021c00
 8001cbc:	58022000 	.word	0x58022000
 8001cc0:	58022400 	.word	0x58022400
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	69fa      	ldr	r2, [r7, #28]
 8001cc8:	f002 0203 	and.w	r2, r2, #3
 8001ccc:	0092      	lsls	r2, r2, #2
 8001cce:	4093      	lsls	r3, r2
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cd6:	4938      	ldr	r1, [pc, #224]	; (8001db8 <HAL_GPIO_Init+0x35c>)
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	3302      	adds	r3, #2
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001d0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001d38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	3301      	adds	r3, #1
 8001d98:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	fa22 f303 	lsr.w	r3, r2, r3
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f47f ae63 	bne.w	8001a70 <HAL_GPIO_Init+0x14>
  }
}
 8001daa:	bf00      	nop
 8001dac:	bf00      	nop
 8001dae:	3724      	adds	r7, #36	; 0x24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	58000400 	.word	0x58000400

08001dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	807b      	strh	r3, [r7, #2]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dcc:	787b      	ldrb	r3, [r7, #1]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dd2:	887a      	ldrh	r2, [r7, #2]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001dd8:	e003      	b.n	8001de2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001dda:	887b      	ldrh	r3, [r7, #2]
 8001ddc:	041a      	lsls	r2, r3, #16
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	619a      	str	r2, [r3, #24]
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b085      	sub	sp, #20
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	460b      	mov	r3, r1
 8001df8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e00:	887a      	ldrh	r2, [r7, #2]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4013      	ands	r3, r2
 8001e06:	041a      	lsls	r2, r3, #16
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	43d9      	mvns	r1, r3
 8001e0c:	887b      	ldrh	r3, [r7, #2]
 8001e0e:	400b      	ands	r3, r1
 8001e10:	431a      	orrs	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	619a      	str	r2, [r3, #24]
}
 8001e16:	bf00      	nop
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001e2c:	4a08      	ldr	r2, [pc, #32]	; (8001e50 <HAL_HSEM_FastTake+0x2c>)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	3320      	adds	r3, #32
 8001e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e36:	4a07      	ldr	r2, [pc, #28]	; (8001e54 <HAL_HSEM_FastTake+0x30>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d101      	bne.n	8001e40 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	e000      	b.n	8001e42 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	58026400 	.word	0x58026400
 8001e54:	80000300 	.word	0x80000300

08001e58 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001e62:	4906      	ldr	r1, [pc, #24]	; (8001e7c <HAL_HSEM_Release+0x24>)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	58026400 	.word	0x58026400

08001e80 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e82:	b08f      	sub	sp, #60	; 0x3c
 8001e84:	af0a      	add	r7, sp, #40	; 0x28
 8001e86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e116      	b.n	80020c0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d106      	bne.n	8001eb2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f008 fcf7 	bl	800a8a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d102      	bne.n	8001ecc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f004 ffc8 	bl	8006e66 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	603b      	str	r3, [r7, #0]
 8001edc:	687e      	ldr	r6, [r7, #4]
 8001ede:	466d      	mov	r5, sp
 8001ee0:	f106 0410 	add.w	r4, r6, #16
 8001ee4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ee6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ee8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eec:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ef0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ef4:	1d33      	adds	r3, r6, #4
 8001ef6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ef8:	6838      	ldr	r0, [r7, #0]
 8001efa:	f004 fe93 	bl	8006c24 <USB_CoreInit>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d005      	beq.n	8001f10 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2202      	movs	r2, #2
 8001f08:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0d7      	b.n	80020c0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2100      	movs	r1, #0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f004 ffb6 	bl	8006e88 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	73fb      	strb	r3, [r7, #15]
 8001f20:	e04a      	b.n	8001fb8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f22:	7bfa      	ldrb	r2, [r7, #15]
 8001f24:	6879      	ldr	r1, [r7, #4]
 8001f26:	4613      	mov	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	440b      	add	r3, r1
 8001f30:	333d      	adds	r3, #61	; 0x3d
 8001f32:	2201      	movs	r2, #1
 8001f34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f36:	7bfa      	ldrb	r2, [r7, #15]
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	4413      	add	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	440b      	add	r3, r1
 8001f44:	333c      	adds	r3, #60	; 0x3c
 8001f46:	7bfa      	ldrb	r2, [r7, #15]
 8001f48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f4a:	7bfa      	ldrb	r2, [r7, #15]
 8001f4c:	7bfb      	ldrb	r3, [r7, #15]
 8001f4e:	b298      	uxth	r0, r3
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	4613      	mov	r3, r2
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	4413      	add	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	3344      	adds	r3, #68	; 0x44
 8001f5e:	4602      	mov	r2, r0
 8001f60:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f62:	7bfa      	ldrb	r2, [r7, #15]
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	440b      	add	r3, r1
 8001f70:	3340      	adds	r3, #64	; 0x40
 8001f72:	2200      	movs	r2, #0
 8001f74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f76:	7bfa      	ldrb	r2, [r7, #15]
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	4413      	add	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	440b      	add	r3, r1
 8001f84:	3348      	adds	r3, #72	; 0x48
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f8a:	7bfa      	ldrb	r2, [r7, #15]
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4413      	add	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	440b      	add	r3, r1
 8001f98:	334c      	adds	r3, #76	; 0x4c
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f9e:	7bfa      	ldrb	r2, [r7, #15]
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	440b      	add	r3, r1
 8001fac:	3354      	adds	r3, #84	; 0x54
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fb2:	7bfb      	ldrb	r3, [r7, #15]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
 8001fb8:	7bfa      	ldrb	r2, [r7, #15]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d3af      	bcc.n	8001f22 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	73fb      	strb	r3, [r7, #15]
 8001fc6:	e044      	b.n	8002052 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fc8:	7bfa      	ldrb	r2, [r7, #15]
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001fda:	2200      	movs	r2, #0
 8001fdc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fde:	7bfa      	ldrb	r2, [r7, #15]
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	440b      	add	r3, r1
 8001fec:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001ff0:	7bfa      	ldrb	r2, [r7, #15]
 8001ff2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ff4:	7bfa      	ldrb	r2, [r7, #15]
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	440b      	add	r3, r1
 8002002:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002006:	2200      	movs	r2, #0
 8002008:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800200a:	7bfa      	ldrb	r2, [r7, #15]
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	4613      	mov	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	4413      	add	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	440b      	add	r3, r1
 8002018:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002020:	7bfa      	ldrb	r2, [r7, #15]
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	4413      	add	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002036:	7bfa      	ldrb	r2, [r7, #15]
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	4413      	add	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	440b      	add	r3, r1
 8002044:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800204c:	7bfb      	ldrb	r3, [r7, #15]
 800204e:	3301      	adds	r3, #1
 8002050:	73fb      	strb	r3, [r7, #15]
 8002052:	7bfa      	ldrb	r2, [r7, #15]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	429a      	cmp	r2, r3
 800205a:	d3b5      	bcc.n	8001fc8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	603b      	str	r3, [r7, #0]
 8002062:	687e      	ldr	r6, [r7, #4]
 8002064:	466d      	mov	r5, sp
 8002066:	f106 0410 	add.w	r4, r6, #16
 800206a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800206c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800206e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002070:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002072:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002076:	e885 0003 	stmia.w	r5, {r0, r1}
 800207a:	1d33      	adds	r3, r6, #4
 800207c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800207e:	6838      	ldr	r0, [r7, #0]
 8002080:	f004 ff4e 	bl	8006f20 <USB_DevInit>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d005      	beq.n	8002096 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2202      	movs	r2, #2
 800208e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e014      	b.n	80020c0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d102      	bne.n	80020b4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f001 f98c 	bl	80033cc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f006 f89c 	bl	80081f6 <USB_DevDisconnect>

  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020c8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d101      	bne.n	80020e4 <HAL_PCD_Start+0x1c>
 80020e0:	2302      	movs	r3, #2
 80020e2:	e020      	b.n	8002126 <HAL_PCD_Start+0x5e>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d109      	bne.n	8002108 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d005      	beq.n	8002108 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002100:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f004 fe99 	bl	8006e44 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f006 f84c 	bl	80081b4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800212e:	b590      	push	{r4, r7, lr}
 8002130:	b08d      	sub	sp, #52	; 0x34
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800213c:	6a3b      	ldr	r3, [r7, #32]
 800213e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f006 f90a 	bl	800835e <USB_GetMode>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	f040 84b7 	bne.w	8002ac0 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f006 f86e 	bl	8008238 <USB_ReadInterrupts>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 84ad 	beq.w	8002abe <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	0a1b      	lsrs	r3, r3, #8
 800216e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f006 f85b 	bl	8008238 <USB_ReadInterrupts>
 8002182:	4603      	mov	r3, r0
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b02      	cmp	r3, #2
 800218a:	d107      	bne.n	800219c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	695a      	ldr	r2, [r3, #20]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f002 0202 	and.w	r2, r2, #2
 800219a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f006 f849 	bl	8008238 <USB_ReadInterrupts>
 80021a6:	4603      	mov	r3, r0
 80021a8:	f003 0310 	and.w	r3, r3, #16
 80021ac:	2b10      	cmp	r3, #16
 80021ae:	d161      	bne.n	8002274 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	699a      	ldr	r2, [r3, #24]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0210 	bic.w	r2, r2, #16
 80021be:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80021c0:	6a3b      	ldr	r3, [r7, #32]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	f003 020f 	and.w	r2, r3, #15
 80021cc:	4613      	mov	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	4413      	add	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	4413      	add	r3, r2
 80021dc:	3304      	adds	r3, #4
 80021de:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	0c5b      	lsrs	r3, r3, #17
 80021e4:	f003 030f 	and.w	r3, r3, #15
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d124      	bne.n	8002236 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d035      	beq.n	8002264 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	091b      	lsrs	r3, r3, #4
 8002200:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002202:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002206:	b29b      	uxth	r3, r3
 8002208:	461a      	mov	r2, r3
 800220a:	6a38      	ldr	r0, [r7, #32]
 800220c:	f005 fe80 	bl	8007f10 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	691a      	ldr	r2, [r3, #16]
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	091b      	lsrs	r3, r3, #4
 8002218:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800221c:	441a      	add	r2, r3
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	6a1a      	ldr	r2, [r3, #32]
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	091b      	lsrs	r3, r3, #4
 800222a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800222e:	441a      	add	r2, r3
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	621a      	str	r2, [r3, #32]
 8002234:	e016      	b.n	8002264 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	0c5b      	lsrs	r3, r3, #17
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	2b06      	cmp	r3, #6
 8002240:	d110      	bne.n	8002264 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002248:	2208      	movs	r2, #8
 800224a:	4619      	mov	r1, r3
 800224c:	6a38      	ldr	r0, [r7, #32]
 800224e:	f005 fe5f 	bl	8007f10 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	6a1a      	ldr	r2, [r3, #32]
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	091b      	lsrs	r3, r3, #4
 800225a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800225e:	441a      	add	r2, r3
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699a      	ldr	r2, [r3, #24]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0210 	orr.w	r2, r2, #16
 8002272:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f005 ffdd 	bl	8008238 <USB_ReadInterrupts>
 800227e:	4603      	mov	r3, r0
 8002280:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002284:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002288:	f040 80a7 	bne.w	80023da <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800228c:	2300      	movs	r3, #0
 800228e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f005 ffe2 	bl	800825e <USB_ReadDevAllOutEpInterrupt>
 800229a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800229c:	e099      	b.n	80023d2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800229e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f000 808e 	beq.w	80023c6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	4611      	mov	r1, r2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f006 f806 	bl	80082c6 <USB_ReadDevOutEPInterrupt>
 80022ba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00c      	beq.n	80022e0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	015a      	lsls	r2, r3, #5
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	4413      	add	r3, r2
 80022ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022d2:	461a      	mov	r2, r3
 80022d4:	2301      	movs	r3, #1
 80022d6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80022d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 fef0 	bl	80030c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00c      	beq.n	8002304 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	015a      	lsls	r2, r3, #5
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	4413      	add	r3, r2
 80022f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f6:	461a      	mov	r2, r3
 80022f8:	2308      	movs	r3, #8
 80022fa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80022fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 ffc6 	bl	8003290 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	f003 0310 	and.w	r3, r3, #16
 800230a:	2b00      	cmp	r3, #0
 800230c:	d008      	beq.n	8002320 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	015a      	lsls	r2, r3, #5
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	4413      	add	r3, r2
 8002316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800231a:	461a      	mov	r2, r3
 800231c:	2310      	movs	r3, #16
 800231e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d030      	beq.n	800238c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002332:	2b80      	cmp	r3, #128	; 0x80
 8002334:	d109      	bne.n	800234a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	69fa      	ldr	r2, [r7, #28]
 8002340:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002344:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002348:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800234a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800234c:	4613      	mov	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4413      	add	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	4413      	add	r3, r2
 800235c:	3304      	adds	r3, #4
 800235e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	78db      	ldrb	r3, [r3, #3]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d108      	bne.n	800237a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	2200      	movs	r2, #0
 800236c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	b2db      	uxtb	r3, r3
 8002372:	4619      	mov	r1, r3
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f008 fbc7 	bl	800ab08 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	015a      	lsls	r2, r3, #5
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	4413      	add	r3, r2
 8002382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002386:	461a      	mov	r2, r3
 8002388:	2302      	movs	r3, #2
 800238a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	f003 0320 	and.w	r3, r3, #32
 8002392:	2b00      	cmp	r3, #0
 8002394:	d008      	beq.n	80023a8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	015a      	lsls	r2, r3, #5
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	4413      	add	r3, r2
 800239e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023a2:	461a      	mov	r2, r3
 80023a4:	2320      	movs	r3, #32
 80023a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d009      	beq.n	80023c6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	015a      	lsls	r2, r3, #5
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	4413      	add	r3, r2
 80023ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023be:	461a      	mov	r2, r3
 80023c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023c4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	3301      	adds	r3, #1
 80023ca:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ce:	085b      	lsrs	r3, r3, #1
 80023d0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f47f af62 	bne.w	800229e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f005 ff2a 	bl	8008238 <USB_ReadInterrupts>
 80023e4:	4603      	mov	r3, r0
 80023e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023ee:	f040 80db 	bne.w	80025a8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f005 ff4b 	bl	8008292 <USB_ReadDevAllInEpInterrupt>
 80023fc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002402:	e0cd      	b.n	80025a0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 80c2 	beq.w	8002594 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	4611      	mov	r1, r2
 800241a:	4618      	mov	r0, r3
 800241c:	f005 ff71 	bl	8008302 <USB_ReadDevInEPInterrupt>
 8002420:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b00      	cmp	r3, #0
 800242a:	d057      	beq.n	80024dc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	2201      	movs	r2, #1
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002440:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	43db      	mvns	r3, r3
 8002446:	69f9      	ldr	r1, [r7, #28]
 8002448:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800244c:	4013      	ands	r3, r2
 800244e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	015a      	lsls	r2, r3, #5
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	4413      	add	r3, r2
 8002458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800245c:	461a      	mov	r2, r3
 800245e:	2301      	movs	r3, #1
 8002460:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d132      	bne.n	80024d0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800246e:	4613      	mov	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	4413      	add	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	440b      	add	r3, r1
 8002478:	334c      	adds	r3, #76	; 0x4c
 800247a:	6819      	ldr	r1, [r3, #0]
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002480:	4613      	mov	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4413      	add	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4403      	add	r3, r0
 800248a:	3348      	adds	r3, #72	; 0x48
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4419      	add	r1, r3
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002494:	4613      	mov	r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4413      	add	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4403      	add	r3, r0
 800249e:	334c      	adds	r3, #76	; 0x4c
 80024a0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d113      	bne.n	80024d0 <HAL_PCD_IRQHandler+0x3a2>
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ac:	4613      	mov	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	4413      	add	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	440b      	add	r3, r1
 80024b6:	3354      	adds	r3, #84	; 0x54
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d108      	bne.n	80024d0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6818      	ldr	r0, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024c8:	461a      	mov	r2, r3
 80024ca:	2101      	movs	r1, #1
 80024cc:	f005 ff7a 	bl	80083c4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	4619      	mov	r1, r3
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f008 fa91 	bl	800a9fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d008      	beq.n	80024f8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	015a      	lsls	r2, r3, #5
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	4413      	add	r3, r2
 80024ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024f2:	461a      	mov	r2, r3
 80024f4:	2308      	movs	r3, #8
 80024f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	f003 0310 	and.w	r3, r3, #16
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d008      	beq.n	8002514 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	015a      	lsls	r2, r3, #5
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	4413      	add	r3, r2
 800250a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800250e:	461a      	mov	r2, r3
 8002510:	2310      	movs	r3, #16
 8002512:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800251a:	2b00      	cmp	r3, #0
 800251c:	d008      	beq.n	8002530 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	015a      	lsls	r2, r3, #5
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	4413      	add	r3, r2
 8002526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800252a:	461a      	mov	r2, r3
 800252c:	2340      	movs	r3, #64	; 0x40
 800252e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d023      	beq.n	8002582 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800253a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800253c:	6a38      	ldr	r0, [r7, #32]
 800253e:	f004 fe4d 	bl	80071dc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002544:	4613      	mov	r3, r2
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	4413      	add	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	3338      	adds	r3, #56	; 0x38
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	4413      	add	r3, r2
 8002552:	3304      	adds	r3, #4
 8002554:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	78db      	ldrb	r3, [r3, #3]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d108      	bne.n	8002570 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	2200      	movs	r2, #0
 8002562:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	b2db      	uxtb	r3, r3
 8002568:	4619      	mov	r1, r3
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f008 fade 	bl	800ab2c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	015a      	lsls	r2, r3, #5
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	4413      	add	r3, r2
 8002578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800257c:	461a      	mov	r2, r3
 800257e:	2302      	movs	r3, #2
 8002580:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800258c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 fd08 	bl	8002fa4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	3301      	adds	r3, #1
 8002598:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800259a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259c:	085b      	lsrs	r3, r3, #1
 800259e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80025a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f47f af2e 	bne.w	8002404 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f005 fe43 	bl	8008238 <USB_ReadInterrupts>
 80025b2:	4603      	mov	r3, r0
 80025b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80025b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025bc:	d122      	bne.n	8002604 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	69fa      	ldr	r2, [r7, #28]
 80025c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025cc:	f023 0301 	bic.w	r3, r3, #1
 80025d0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d108      	bne.n	80025ee <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80025e4:	2100      	movs	r1, #0
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 ff14 	bl	8003414 <HAL_PCDEx_LPM_Callback>
 80025ec:	e002      	b.n	80025f4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f008 fa7c 	bl	800aaec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	695a      	ldr	r2, [r3, #20]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002602:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f005 fe15 	bl	8008238 <USB_ReadInterrupts>
 800260e:	4603      	mov	r3, r0
 8002610:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002614:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002618:	d112      	bne.n	8002640 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b01      	cmp	r3, #1
 8002628:	d102      	bne.n	8002630 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f008 fa38 	bl	800aaa0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695a      	ldr	r2, [r3, #20]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800263e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f005 fdf7 	bl	8008238 <USB_ReadInterrupts>
 800264a:	4603      	mov	r3, r0
 800264c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002650:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002654:	d121      	bne.n	800269a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	695a      	ldr	r2, [r3, #20]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002664:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800266c:	2b00      	cmp	r3, #0
 800266e:	d111      	bne.n	8002694 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267e:	089b      	lsrs	r3, r3, #2
 8002680:	f003 020f 	and.w	r2, r3, #15
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800268a:	2101      	movs	r1, #1
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 fec1 	bl	8003414 <HAL_PCDEx_LPM_Callback>
 8002692:	e002      	b.n	800269a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f008 fa03 	bl	800aaa0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f005 fdca 	bl	8008238 <USB_ReadInterrupts>
 80026a4:	4603      	mov	r3, r0
 80026a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ae:	f040 80b7 	bne.w	8002820 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	69fa      	ldr	r2, [r7, #28]
 80026bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026c0:	f023 0301 	bic.w	r3, r3, #1
 80026c4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2110      	movs	r1, #16
 80026cc:	4618      	mov	r0, r3
 80026ce:	f004 fd85 	bl	80071dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026d2:	2300      	movs	r3, #0
 80026d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026d6:	e046      	b.n	8002766 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80026d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026da:	015a      	lsls	r2, r3, #5
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	4413      	add	r3, r2
 80026e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026e4:	461a      	mov	r2, r3
 80026e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80026ea:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80026ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026fc:	0151      	lsls	r1, r2, #5
 80026fe:	69fa      	ldr	r2, [r7, #28]
 8002700:	440a      	add	r2, r1
 8002702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002706:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800270a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800270c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270e:	015a      	lsls	r2, r3, #5
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	4413      	add	r3, r2
 8002714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002718:	461a      	mov	r2, r3
 800271a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800271e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002722:	015a      	lsls	r2, r3, #5
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	4413      	add	r3, r2
 8002728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002730:	0151      	lsls	r1, r2, #5
 8002732:	69fa      	ldr	r2, [r7, #28]
 8002734:	440a      	add	r2, r1
 8002736:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800273a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800273e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	4413      	add	r3, r2
 8002748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002750:	0151      	lsls	r1, r2, #5
 8002752:	69fa      	ldr	r2, [r7, #28]
 8002754:	440a      	add	r2, r1
 8002756:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800275a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800275e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002762:	3301      	adds	r3, #1
 8002764:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800276c:	429a      	cmp	r2, r3
 800276e:	d3b3      	bcc.n	80026d8 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	69fa      	ldr	r2, [r7, #28]
 800277a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800277e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002782:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002788:	2b00      	cmp	r3, #0
 800278a:	d016      	beq.n	80027ba <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002792:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002796:	69fa      	ldr	r2, [r7, #28]
 8002798:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800279c:	f043 030b 	orr.w	r3, r3, #11
 80027a0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ac:	69fa      	ldr	r2, [r7, #28]
 80027ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027b2:	f043 030b 	orr.w	r3, r3, #11
 80027b6:	6453      	str	r3, [r2, #68]	; 0x44
 80027b8:	e015      	b.n	80027e6 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027c0:	695a      	ldr	r2, [r3, #20]
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027c8:	4619      	mov	r1, r3
 80027ca:	f242 032b 	movw	r3, #8235	; 0x202b
 80027ce:	4313      	orrs	r3, r2
 80027d0:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	69fa      	ldr	r2, [r7, #28]
 80027dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027e0:	f043 030b 	orr.w	r3, r3, #11
 80027e4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	69fa      	ldr	r2, [r7, #28]
 80027f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027f4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80027f8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6818      	ldr	r0, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800280a:	461a      	mov	r2, r3
 800280c:	f005 fdda 	bl	80083c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	695a      	ldr	r2, [r3, #20]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800281e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f005 fd07 	bl	8008238 <USB_ReadInterrupts>
 800282a:	4603      	mov	r3, r0
 800282c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002830:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002834:	d124      	bne.n	8002880 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f005 fd9e 	bl	800837c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f004 fd46 	bl	80072d6 <USB_GetDevSpeed>
 800284a:	4603      	mov	r3, r0
 800284c:	461a      	mov	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681c      	ldr	r4, [r3, #0]
 8002856:	f001 fdb1 	bl	80043bc <HAL_RCC_GetHCLKFreq>
 800285a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002860:	b2db      	uxtb	r3, r3
 8002862:	461a      	mov	r2, r3
 8002864:	4620      	mov	r0, r4
 8002866:	f004 fa4b 	bl	8006d00 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f008 f8ef 	bl	800aa4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	695a      	ldr	r2, [r3, #20]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800287e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f005 fcd7 	bl	8008238 <USB_ReadInterrupts>
 800288a:	4603      	mov	r3, r0
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b08      	cmp	r3, #8
 8002892:	d10a      	bne.n	80028aa <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f008 f8cc 	bl	800aa32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	695a      	ldr	r2, [r3, #20]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f002 0208 	and.w	r2, r2, #8
 80028a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f005 fcc2 	bl	8008238 <USB_ReadInterrupts>
 80028b4:	4603      	mov	r3, r0
 80028b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ba:	2b80      	cmp	r3, #128	; 0x80
 80028bc:	d122      	bne.n	8002904 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028c6:	6a3b      	ldr	r3, [r7, #32]
 80028c8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028ca:	2301      	movs	r3, #1
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24
 80028ce:	e014      	b.n	80028fa <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d4:	4613      	mov	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	4413      	add	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d105      	bne.n	80028f4 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	4619      	mov	r1, r3
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 fb27 	bl	8002f42 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	3301      	adds	r3, #1
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002900:	429a      	cmp	r2, r3
 8002902:	d3e5      	bcc.n	80028d0 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f005 fc95 	bl	8008238 <USB_ReadInterrupts>
 800290e:	4603      	mov	r3, r0
 8002910:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002914:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002918:	d13b      	bne.n	8002992 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800291a:	2301      	movs	r3, #1
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
 800291e:	e02b      	b.n	8002978 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	4413      	add	r3, r2
 8002928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002934:	4613      	mov	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	4413      	add	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	3340      	adds	r3, #64	; 0x40
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d115      	bne.n	8002972 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002946:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002948:	2b00      	cmp	r3, #0
 800294a:	da12      	bge.n	8002972 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002950:	4613      	mov	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4413      	add	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	333f      	adds	r3, #63	; 0x3f
 800295c:	2201      	movs	r2, #1
 800295e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	b2db      	uxtb	r3, r3
 8002964:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002968:	b2db      	uxtb	r3, r3
 800296a:	4619      	mov	r1, r3
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 fae8 	bl	8002f42 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	3301      	adds	r3, #1
 8002976:	627b      	str	r3, [r7, #36]	; 0x24
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800297e:	429a      	cmp	r2, r3
 8002980:	d3ce      	bcc.n	8002920 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695a      	ldr	r2, [r3, #20]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002990:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f005 fc4e 	bl	8008238 <USB_ReadInterrupts>
 800299c:	4603      	mov	r3, r0
 800299e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029a6:	d155      	bne.n	8002a54 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029a8:	2301      	movs	r3, #1
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
 80029ac:	e045      	b.n	8002a3a <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	015a      	lsls	r2, r3, #5
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	4413      	add	r3, r2
 80029b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c2:	4613      	mov	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	4413      	add	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d12e      	bne.n	8002a34 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80029d6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80029d8:	2b00      	cmp	r3, #0
 80029da:	da2b      	bge.n	8002a34 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80029e8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d121      	bne.n	8002a34 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f4:	4613      	mov	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4413      	add	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002a02:	2201      	movs	r2, #1
 8002a04:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002a12:	6a3b      	ldr	r3, [r7, #32]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10a      	bne.n	8002a34 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	69fa      	ldr	r2, [r7, #28]
 8002a28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a30:	6053      	str	r3, [r2, #4]
            break;
 8002a32:	e007      	b.n	8002a44 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	3301      	adds	r3, #1
 8002a38:	627b      	str	r3, [r7, #36]	; 0x24
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d3b4      	bcc.n	80029ae <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695a      	ldr	r2, [r3, #20]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002a52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f005 fbed 	bl	8008238 <USB_ReadInterrupts>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a68:	d10a      	bne.n	8002a80 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f008 f870 	bl	800ab50 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	695a      	ldr	r2, [r3, #20]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f005 fbd7 	bl	8008238 <USB_ReadInterrupts>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	d115      	bne.n	8002ac0 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d002      	beq.n	8002aac <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f008 f860 	bl	800ab6c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6859      	ldr	r1, [r3, #4]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	605a      	str	r2, [r3, #4]
 8002abc:	e000      	b.n	8002ac0 <HAL_PCD_IRQHandler+0x992>
      return;
 8002abe:	bf00      	nop
    }
  }
}
 8002ac0:	3734      	adds	r7, #52	; 0x34
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd90      	pop	{r4, r7, pc}

08002ac6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
 8002ace:	460b      	mov	r3, r1
 8002ad0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_PCD_SetAddress+0x1a>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e013      	b.n	8002b08 <HAL_PCD_SetAddress+0x42>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	78fa      	ldrb	r2, [r7, #3]
 8002aec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	78fa      	ldrb	r2, [r7, #3]
 8002af6:	4611      	mov	r1, r2
 8002af8:	4618      	mov	r0, r3
 8002afa:	f005 fb35 	bl	8008168 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	4608      	mov	r0, r1
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4603      	mov	r3, r0
 8002b20:	70fb      	strb	r3, [r7, #3]
 8002b22:	460b      	mov	r3, r1
 8002b24:	803b      	strh	r3, [r7, #0]
 8002b26:	4613      	mov	r3, r2
 8002b28:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	da0f      	bge.n	8002b56 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b36:	78fb      	ldrb	r3, [r7, #3]
 8002b38:	f003 020f 	and.w	r2, r3, #15
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	4413      	add	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	3338      	adds	r3, #56	; 0x38
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	4413      	add	r3, r2
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2201      	movs	r2, #1
 8002b52:	705a      	strb	r2, [r3, #1]
 8002b54:	e00f      	b.n	8002b76 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b56:	78fb      	ldrb	r3, [r7, #3]
 8002b58:	f003 020f 	and.w	r2, r3, #15
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	4413      	add	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b76:	78fb      	ldrb	r3, [r7, #3]
 8002b78:	f003 030f 	and.w	r3, r3, #15
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b82:	883a      	ldrh	r2, [r7, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	78ba      	ldrb	r2, [r7, #2]
 8002b8c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	785b      	ldrb	r3, [r3, #1]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d004      	beq.n	8002ba0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ba0:	78bb      	ldrb	r3, [r7, #2]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d102      	bne.n	8002bac <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d101      	bne.n	8002bba <HAL_PCD_EP_Open+0xaa>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	e00e      	b.n	8002bd8 <HAL_PCD_EP_Open+0xc8>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68f9      	ldr	r1, [r7, #12]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f004 fba9 	bl	8007320 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002bd6:	7afb      	ldrb	r3, [r7, #11]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002bec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	da0f      	bge.n	8002c14 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bf4:	78fb      	ldrb	r3, [r7, #3]
 8002bf6:	f003 020f 	and.w	r2, r3, #15
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	4413      	add	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	3338      	adds	r3, #56	; 0x38
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	4413      	add	r3, r2
 8002c08:	3304      	adds	r3, #4
 8002c0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	705a      	strb	r2, [r3, #1]
 8002c12:	e00f      	b.n	8002c34 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c14:	78fb      	ldrb	r3, [r7, #3]
 8002c16:	f003 020f 	and.w	r2, r3, #15
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	4413      	add	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	4413      	add	r3, r2
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002c34:	78fb      	ldrb	r3, [r7, #3]
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d101      	bne.n	8002c4e <HAL_PCD_EP_Close+0x6e>
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	e00e      	b.n	8002c6c <HAL_PCD_EP_Close+0x8c>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68f9      	ldr	r1, [r7, #12]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f004 fbe7 	bl	8007430 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	607a      	str	r2, [r7, #4]
 8002c7e:	603b      	str	r3, [r7, #0]
 8002c80:	460b      	mov	r3, r1
 8002c82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c84:	7afb      	ldrb	r3, [r7, #11]
 8002c86:	f003 020f 	and.w	r2, r3, #15
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	4413      	add	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	4413      	add	r3, r2
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	2200      	movs	r2, #0
 8002cae:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cb6:	7afb      	ldrb	r3, [r7, #11]
 8002cb8:	f003 030f 	and.w	r3, r3, #15
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d102      	bne.n	8002cd0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cd0:	7afb      	ldrb	r3, [r7, #11]
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d109      	bne.n	8002cee <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6818      	ldr	r0, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	6979      	ldr	r1, [r7, #20]
 8002ce8:	f004 fece 	bl	8007a88 <USB_EP0StartXfer>
 8002cec:	e008      	b.n	8002d00 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	6979      	ldr	r1, [r7, #20]
 8002cfc:	f004 fc74 	bl	80075e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	460b      	mov	r3, r1
 8002d14:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d16:	78fb      	ldrb	r3, [r7, #3]
 8002d18:	f003 020f 	and.w	r2, r3, #15
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	4413      	add	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	440b      	add	r3, r1
 8002d28:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002d2c:	681b      	ldr	r3, [r3, #0]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b086      	sub	sp, #24
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	60f8      	str	r0, [r7, #12]
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	603b      	str	r3, [r7, #0]
 8002d46:	460b      	mov	r3, r1
 8002d48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d4a:	7afb      	ldrb	r3, [r7, #11]
 8002d4c:	f003 020f 	and.w	r2, r3, #15
 8002d50:	4613      	mov	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	4413      	add	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	3338      	adds	r3, #56	; 0x38
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3304      	adds	r3, #4
 8002d60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	2200      	movs	r2, #0
 8002d72:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	2201      	movs	r2, #1
 8002d78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d7a:	7afb      	ldrb	r3, [r7, #11]
 8002d7c:	f003 030f 	and.w	r3, r3, #15
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d102      	bne.n	8002d94 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d94:	7afb      	ldrb	r3, [r7, #11]
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d109      	bne.n	8002db2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6818      	ldr	r0, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	461a      	mov	r2, r3
 8002daa:	6979      	ldr	r1, [r7, #20]
 8002dac:	f004 fe6c 	bl	8007a88 <USB_EP0StartXfer>
 8002db0:	e008      	b.n	8002dc4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6818      	ldr	r0, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	6979      	ldr	r1, [r7, #20]
 8002dc0:	f004 fc12 	bl	80075e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b084      	sub	sp, #16
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002dda:	78fb      	ldrb	r3, [r7, #3]
 8002ddc:	f003 020f 	and.w	r2, r3, #15
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d901      	bls.n	8002dec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e050      	b.n	8002e8e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002dec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	da0f      	bge.n	8002e14 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002df4:	78fb      	ldrb	r3, [r7, #3]
 8002df6:	f003 020f 	and.w	r2, r3, #15
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	4413      	add	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	3338      	adds	r3, #56	; 0x38
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	4413      	add	r3, r2
 8002e08:	3304      	adds	r3, #4
 8002e0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	705a      	strb	r2, [r3, #1]
 8002e12:	e00d      	b.n	8002e30 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e14:	78fa      	ldrb	r2, [r7, #3]
 8002e16:	4613      	mov	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	4413      	add	r3, r2
 8002e26:	3304      	adds	r3, #4
 8002e28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2201      	movs	r2, #1
 8002e34:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e36:	78fb      	ldrb	r3, [r7, #3]
 8002e38:	f003 030f 	and.w	r3, r3, #15
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d101      	bne.n	8002e50 <HAL_PCD_EP_SetStall+0x82>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e01e      	b.n	8002e8e <HAL_PCD_EP_SetStall+0xc0>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68f9      	ldr	r1, [r7, #12]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f005 f8ae 	bl	8007fc0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e64:	78fb      	ldrb	r3, [r7, #3]
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10a      	bne.n	8002e84 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6818      	ldr	r0, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	b2d9      	uxtb	r1, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e7e:	461a      	mov	r2, r3
 8002e80:	f005 faa0 	bl	80083c4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b084      	sub	sp, #16
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ea2:	78fb      	ldrb	r3, [r7, #3]
 8002ea4:	f003 020f 	and.w	r2, r3, #15
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d901      	bls.n	8002eb4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e042      	b.n	8002f3a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002eb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	da0f      	bge.n	8002edc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ebc:	78fb      	ldrb	r3, [r7, #3]
 8002ebe:	f003 020f 	and.w	r2, r3, #15
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	3338      	adds	r3, #56	; 0x38
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	4413      	add	r3, r2
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	705a      	strb	r2, [r3, #1]
 8002eda:	e00f      	b.n	8002efc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002edc:	78fb      	ldrb	r3, [r7, #3]
 8002ede:	f003 020f 	and.w	r2, r3, #15
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	3304      	adds	r3, #4
 8002ef4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f02:	78fb      	ldrb	r3, [r7, #3]
 8002f04:	f003 030f 	and.w	r3, r3, #15
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d101      	bne.n	8002f1c <HAL_PCD_EP_ClrStall+0x86>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e00e      	b.n	8002f3a <HAL_PCD_EP_ClrStall+0xa4>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68f9      	ldr	r1, [r7, #12]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f005 f8b6 	bl	800809c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b084      	sub	sp, #16
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002f4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	da0c      	bge.n	8002f70 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f56:	78fb      	ldrb	r3, [r7, #3]
 8002f58:	f003 020f 	and.w	r2, r3, #15
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	4413      	add	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	3338      	adds	r3, #56	; 0x38
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	4413      	add	r3, r2
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	e00c      	b.n	8002f8a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f70:	78fb      	ldrb	r3, [r7, #3]
 8002f72:	f003 020f 	and.w	r2, r3, #15
 8002f76:	4613      	mov	r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	4413      	add	r3, r2
 8002f86:	3304      	adds	r3, #4
 8002f88:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68f9      	ldr	r1, [r7, #12]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f004 fed5 	bl	8007d40 <USB_EPStopXfer>
 8002f96:	4603      	mov	r3, r0
 8002f98:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002f9a:	7afb      	ldrb	r3, [r7, #11]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08a      	sub	sp, #40	; 0x28
 8002fa8:	af02      	add	r7, sp, #8
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	3338      	adds	r3, #56	; 0x38
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	3304      	adds	r3, #4
 8002fca:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a1a      	ldr	r2, [r3, #32]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d901      	bls.n	8002fdc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e06c      	b.n	80030b6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	699a      	ldr	r2, [r3, #24]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	69fa      	ldr	r2, [r7, #28]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d902      	bls.n	8002ff8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	3303      	adds	r3, #3
 8002ffc:	089b      	lsrs	r3, r3, #2
 8002ffe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003000:	e02b      	b.n	800305a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	699a      	ldr	r2, [r3, #24]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	69fa      	ldr	r2, [r7, #28]
 8003014:	429a      	cmp	r2, r3
 8003016:	d902      	bls.n	800301e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	3303      	adds	r3, #3
 8003022:	089b      	lsrs	r3, r3, #2
 8003024:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6919      	ldr	r1, [r3, #16]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	b2da      	uxtb	r2, r3
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003036:	b2db      	uxtb	r3, r3
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	4603      	mov	r3, r0
 800303c:	6978      	ldr	r0, [r7, #20]
 800303e:	f004 ff29 	bl	8007e94 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	691a      	ldr	r2, [r3, #16]
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	441a      	add	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6a1a      	ldr	r2, [r3, #32]
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	441a      	add	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	015a      	lsls	r2, r3, #5
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4413      	add	r3, r2
 8003062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	b29b      	uxth	r3, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	429a      	cmp	r2, r3
 800306e:	d809      	bhi.n	8003084 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6a1a      	ldr	r2, [r3, #32]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003078:	429a      	cmp	r2, r3
 800307a:	d203      	bcs.n	8003084 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1be      	bne.n	8003002 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	699a      	ldr	r2, [r3, #24]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	429a      	cmp	r2, r3
 800308e:	d811      	bhi.n	80030b4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	2201      	movs	r2, #1
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	43db      	mvns	r3, r3
 80030aa:	6939      	ldr	r1, [r7, #16]
 80030ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030b0:	4013      	ands	r3, r2
 80030b2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3720      	adds	r7, #32
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
	...

080030c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b088      	sub	sp, #32
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	333c      	adds	r3, #60	; 0x3c
 80030d8:	3304      	adds	r3, #4
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	015a      	lsls	r2, r3, #5
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	4413      	add	r3, r2
 80030e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d17b      	bne.n	80031ee <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	f003 0308 	and.w	r3, r3, #8
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d015      	beq.n	800312c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	4a61      	ldr	r2, [pc, #388]	; (8003288 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003104:	4293      	cmp	r3, r2
 8003106:	f240 80b9 	bls.w	800327c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 80b3 	beq.w	800327c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	015a      	lsls	r2, r3, #5
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	4413      	add	r3, r2
 800311e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003122:	461a      	mov	r2, r3
 8003124:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003128:	6093      	str	r3, [r2, #8]
 800312a:	e0a7      	b.n	800327c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	f003 0320 	and.w	r3, r3, #32
 8003132:	2b00      	cmp	r3, #0
 8003134:	d009      	beq.n	800314a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	015a      	lsls	r2, r3, #5
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	4413      	add	r3, r2
 800313e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003142:	461a      	mov	r2, r3
 8003144:	2320      	movs	r3, #32
 8003146:	6093      	str	r3, [r2, #8]
 8003148:	e098      	b.n	800327c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003150:	2b00      	cmp	r3, #0
 8003152:	f040 8093 	bne.w	800327c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	4a4b      	ldr	r2, [pc, #300]	; (8003288 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d90f      	bls.n	800317e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00a      	beq.n	800317e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	015a      	lsls	r2, r3, #5
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	4413      	add	r3, r2
 8003170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003174:	461a      	mov	r2, r3
 8003176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800317a:	6093      	str	r3, [r2, #8]
 800317c:	e07e      	b.n	800327c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	4613      	mov	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	4413      	add	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	4413      	add	r3, r2
 8003190:	3304      	adds	r3, #4
 8003192:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	69da      	ldr	r2, [r3, #28]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	0159      	lsls	r1, r3, #5
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	440b      	add	r3, r1
 80031a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031aa:	1ad2      	subs	r2, r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d114      	bne.n	80031e0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d109      	bne.n	80031d2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6818      	ldr	r0, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031c8:	461a      	mov	r2, r3
 80031ca:	2101      	movs	r1, #1
 80031cc:	f005 f8fa 	bl	80083c4 <USB_EP0_OutStart>
 80031d0:	e006      	b.n	80031e0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	691a      	ldr	r2, [r3, #16]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	441a      	add	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	4619      	mov	r1, r3
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f007 fbee 	bl	800a9c8 <HAL_PCD_DataOutStageCallback>
 80031ec:	e046      	b.n	800327c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	4a26      	ldr	r2, [pc, #152]	; (800328c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d124      	bne.n	8003240 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00a      	beq.n	8003216 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	015a      	lsls	r2, r3, #5
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	4413      	add	r3, r2
 8003208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800320c:	461a      	mov	r2, r3
 800320e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003212:	6093      	str	r3, [r2, #8]
 8003214:	e032      	b.n	800327c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	f003 0320 	and.w	r3, r3, #32
 800321c:	2b00      	cmp	r3, #0
 800321e:	d008      	beq.n	8003232 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	015a      	lsls	r2, r3, #5
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	4413      	add	r3, r2
 8003228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800322c:	461a      	mov	r2, r3
 800322e:	2320      	movs	r3, #32
 8003230:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	b2db      	uxtb	r3, r3
 8003236:	4619      	mov	r1, r3
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f007 fbc5 	bl	800a9c8 <HAL_PCD_DataOutStageCallback>
 800323e:	e01d      	b.n	800327c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d114      	bne.n	8003270 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	4613      	mov	r3, r2
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	4413      	add	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	440b      	add	r3, r1
 8003254:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d108      	bne.n	8003270 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6818      	ldr	r0, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003268:	461a      	mov	r2, r3
 800326a:	2100      	movs	r1, #0
 800326c:	f005 f8aa 	bl	80083c4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	b2db      	uxtb	r3, r3
 8003274:	4619      	mov	r1, r3
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f007 fba6 	bl	800a9c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3720      	adds	r7, #32
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	4f54300a 	.word	0x4f54300a
 800328c:	4f54310a 	.word	0x4f54310a

08003290 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	333c      	adds	r3, #60	; 0x3c
 80032a8:	3304      	adds	r3, #4
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4a15      	ldr	r2, [pc, #84]	; (8003318 <PCD_EP_OutSetupPacket_int+0x88>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d90e      	bls.n	80032e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d009      	beq.n	80032e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032dc:	461a      	mov	r2, r3
 80032de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f007 fb5d 	bl	800a9a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4a0a      	ldr	r2, [pc, #40]	; (8003318 <PCD_EP_OutSetupPacket_int+0x88>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d90c      	bls.n	800330c <PCD_EP_OutSetupPacket_int+0x7c>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d108      	bne.n	800330c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6818      	ldr	r0, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003304:	461a      	mov	r2, r3
 8003306:	2101      	movs	r1, #1
 8003308:	f005 f85c 	bl	80083c4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	4f54300a 	.word	0x4f54300a

0800331c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	70fb      	strb	r3, [r7, #3]
 8003328:	4613      	mov	r3, r2
 800332a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003334:	78fb      	ldrb	r3, [r7, #3]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d107      	bne.n	800334a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800333a:	883b      	ldrh	r3, [r7, #0]
 800333c:	0419      	lsls	r1, r3, #16
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	430a      	orrs	r2, r1
 8003346:	629a      	str	r2, [r3, #40]	; 0x28
 8003348:	e028      	b.n	800339c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003350:	0c1b      	lsrs	r3, r3, #16
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	4413      	add	r3, r2
 8003356:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003358:	2300      	movs	r3, #0
 800335a:	73fb      	strb	r3, [r7, #15]
 800335c:	e00d      	b.n	800337a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	7bfb      	ldrb	r3, [r7, #15]
 8003364:	3340      	adds	r3, #64	; 0x40
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	0c1b      	lsrs	r3, r3, #16
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	4413      	add	r3, r2
 8003372:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003374:	7bfb      	ldrb	r3, [r7, #15]
 8003376:	3301      	adds	r3, #1
 8003378:	73fb      	strb	r3, [r7, #15]
 800337a:	7bfa      	ldrb	r2, [r7, #15]
 800337c:	78fb      	ldrb	r3, [r7, #3]
 800337e:	3b01      	subs	r3, #1
 8003380:	429a      	cmp	r2, r3
 8003382:	d3ec      	bcc.n	800335e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003384:	883b      	ldrh	r3, [r7, #0]
 8003386:	0418      	lsls	r0, r3, #16
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6819      	ldr	r1, [r3, #0]
 800338c:	78fb      	ldrb	r3, [r7, #3]
 800338e:	3b01      	subs	r3, #1
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	4302      	orrs	r2, r0
 8003394:	3340      	adds	r3, #64	; 0x40
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
 80033b2:	460b      	mov	r3, r1
 80033b4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	887a      	ldrh	r2, [r7, #2]
 80033bc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033fa:	4b05      	ldr	r3, [pc, #20]	; (8003410 <HAL_PCDEx_ActivateLPM+0x44>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	10000003 	.word	0x10000003

08003414 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	460b      	mov	r3, r1
 800341e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003434:	4b29      	ldr	r3, [pc, #164]	; (80034dc <HAL_PWREx_ConfigSupply+0xb0>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	2b06      	cmp	r3, #6
 800343e:	d00a      	beq.n	8003456 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003440:	4b26      	ldr	r3, [pc, #152]	; (80034dc <HAL_PWREx_ConfigSupply+0xb0>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	429a      	cmp	r2, r3
 800344c:	d001      	beq.n	8003452 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e040      	b.n	80034d4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003452:	2300      	movs	r3, #0
 8003454:	e03e      	b.n	80034d4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003456:	4b21      	ldr	r3, [pc, #132]	; (80034dc <HAL_PWREx_ConfigSupply+0xb0>)
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800345e:	491f      	ldr	r1, [pc, #124]	; (80034dc <HAL_PWREx_ConfigSupply+0xb0>)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4313      	orrs	r3, r2
 8003464:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003466:	f7fd fd75 	bl	8000f54 <HAL_GetTick>
 800346a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800346c:	e009      	b.n	8003482 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800346e:	f7fd fd71 	bl	8000f54 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800347c:	d901      	bls.n	8003482 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e028      	b.n	80034d4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003482:	4b16      	ldr	r3, [pc, #88]	; (80034dc <HAL_PWREx_ConfigSupply+0xb0>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800348a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800348e:	d1ee      	bne.n	800346e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b1e      	cmp	r3, #30
 8003494:	d008      	beq.n	80034a8 <HAL_PWREx_ConfigSupply+0x7c>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b2e      	cmp	r3, #46	; 0x2e
 800349a:	d005      	beq.n	80034a8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b1d      	cmp	r3, #29
 80034a0:	d002      	beq.n	80034a8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b2d      	cmp	r3, #45	; 0x2d
 80034a6:	d114      	bne.n	80034d2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80034a8:	f7fd fd54 	bl	8000f54 <HAL_GetTick>
 80034ac:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80034ae:	e009      	b.n	80034c4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80034b0:	f7fd fd50 	bl	8000f54 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034be:	d901      	bls.n	80034c4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e007      	b.n	80034d4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80034c4:	4b05      	ldr	r3, [pc, #20]	; (80034dc <HAL_PWREx_ConfigSupply+0xb0>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d0:	d1ee      	bne.n	80034b0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	58024800 	.word	0x58024800

080034e0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80034e4:	4b05      	ldr	r3, [pc, #20]	; (80034fc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	4a04      	ldr	r2, [pc, #16]	; (80034fc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80034ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ee:	60d3      	str	r3, [r2, #12]
}
 80034f0:	bf00      	nop
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	58024800 	.word	0x58024800

08003500 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b08c      	sub	sp, #48	; 0x30
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d102      	bne.n	8003514 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	f000 bc1d 	b.w	8003d4e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 8087 	beq.w	8003630 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003522:	4b99      	ldr	r3, [pc, #612]	; (8003788 <HAL_RCC_OscConfig+0x288>)
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800352a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800352c:	4b96      	ldr	r3, [pc, #600]	; (8003788 <HAL_RCC_OscConfig+0x288>)
 800352e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003530:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003534:	2b10      	cmp	r3, #16
 8003536:	d007      	beq.n	8003548 <HAL_RCC_OscConfig+0x48>
 8003538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800353a:	2b18      	cmp	r3, #24
 800353c:	d110      	bne.n	8003560 <HAL_RCC_OscConfig+0x60>
 800353e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003540:	f003 0303 	and.w	r3, r3, #3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d10b      	bne.n	8003560 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003548:	4b8f      	ldr	r3, [pc, #572]	; (8003788 <HAL_RCC_OscConfig+0x288>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d06c      	beq.n	800362e <HAL_RCC_OscConfig+0x12e>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d168      	bne.n	800362e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e3f6      	b.n	8003d4e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003568:	d106      	bne.n	8003578 <HAL_RCC_OscConfig+0x78>
 800356a:	4b87      	ldr	r3, [pc, #540]	; (8003788 <HAL_RCC_OscConfig+0x288>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a86      	ldr	r2, [pc, #536]	; (8003788 <HAL_RCC_OscConfig+0x288>)
 8003570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	e02e      	b.n	80035d6 <HAL_RCC_OscConfig+0xd6>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10c      	bne.n	800359a <HAL_RCC_OscConfig+0x9a>
 8003580:	4b81      	ldr	r3, [pc, #516]	; (8003788 <HAL_RCC_OscConfig+0x288>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a80      	ldr	r2, [pc, #512]	; (8003788 <HAL_RCC_OscConfig+0x288>)
 8003586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800358a:	6013      	str	r3, [r2, #0]
 800358c:	4b7e      	ldr	r3, [pc, #504]	; (8003788 <HAL_RCC_OscConfig+0x288>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a7d      	ldr	r2, [pc, #500]	; (8003788 <HAL_RCC_OscConfig+0x288>)
 8003592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003596:	6013      	str	r3, [r2, #0]
 8003598:	e01d      	b.n	80035d6 <HAL_RCC_OscConfig+0xd6>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035a2:	d10c      	bne.n	80035be <HAL_RCC_OscConfig+0xbe>
 80035a4:	4b78      	ldr	r3, [pc, #480]	; (8003788 <HAL_RCC_OscConfig+0x288>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a77      	ldr	r2, [pc, #476]	; (8003788 <HAL_RCC_OscConfig+0x288>)
 80035aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035ae:	6013      	str	r3, [r2, #0]
 80035b0:	4b75      	ldr	r3, [pc, #468]	; (8003788 <HAL_RCC_OscConfig+0x288>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a74      	ldr	r2, [pc, #464]	; (8003788 <HAL_RCC_OscConfig+0x288>)
 80035b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	e00b      	b.n	80035d6 <HAL_RCC_OscConfig+0xd6>
 80035be:	4b72      	ldr	r3, [pc, #456]	; (8003788 <HAL_RCC_OscConfig+0x288>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a71      	ldr	r2, [pc, #452]	; (8003788 <HAL_RCC_OscConfig+0x288>)
 80035c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035c8:	6013      	str	r3, [r2, #0]
 80035ca:	4b6f      	ldr	r3, [pc, #444]	; (8003788 <HAL_RCC_OscConfig+0x288>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a6e      	ldr	r2, [pc, #440]	; (8003788 <HAL_RCC_OscConfig+0x288>)
 80035d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035d4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d013      	beq.n	8003606 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035de:	f7fd fcb9 	bl	8000f54 <HAL_GetTick>
 80035e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035e6:	f7fd fcb5 	bl	8000f54 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b64      	cmp	r3, #100	; 0x64
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e3aa      	b.n	8003d4e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035f8:	4b63      	ldr	r3, [pc, #396]	; (8003788 <HAL_RCC_OscConfig+0x288>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0f0      	beq.n	80035e6 <HAL_RCC_OscConfig+0xe6>
 8003604:	e014      	b.n	8003630 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003606:	f7fd fca5 	bl	8000f54 <HAL_GetTick>
 800360a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800360e:	f7fd fca1 	bl	8000f54 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b64      	cmp	r3, #100	; 0x64
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e396      	b.n	8003d4e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003620:	4b59      	ldr	r3, [pc, #356]	; (8003788 <HAL_RCC_OscConfig+0x288>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1f0      	bne.n	800360e <HAL_RCC_OscConfig+0x10e>
 800362c:	e000      	b.n	8003630 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800362e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 80cb 	beq.w	80037d4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800363e:	4b52      	ldr	r3, [pc, #328]	; (8003788 <HAL_RCC_OscConfig+0x288>)
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003646:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003648:	4b4f      	ldr	r3, [pc, #316]	; (8003788 <HAL_RCC_OscConfig+0x288>)
 800364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d007      	beq.n	8003664 <HAL_RCC_OscConfig+0x164>
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	2b18      	cmp	r3, #24
 8003658:	d156      	bne.n	8003708 <HAL_RCC_OscConfig+0x208>
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	f003 0303 	and.w	r3, r3, #3
 8003660:	2b00      	cmp	r3, #0
 8003662:	d151      	bne.n	8003708 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003664:	4b48      	ldr	r3, [pc, #288]	; (8003788 <HAL_RCC_OscConfig+0x288>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	d005      	beq.n	800367c <HAL_RCC_OscConfig+0x17c>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d101      	bne.n	800367c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e368      	b.n	8003d4e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800367c:	4b42      	ldr	r3, [pc, #264]	; (8003788 <HAL_RCC_OscConfig+0x288>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f023 0219 	bic.w	r2, r3, #25
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	493f      	ldr	r1, [pc, #252]	; (8003788 <HAL_RCC_OscConfig+0x288>)
 800368a:	4313      	orrs	r3, r2
 800368c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800368e:	f7fd fc61 	bl	8000f54 <HAL_GetTick>
 8003692:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003696:	f7fd fc5d 	bl	8000f54 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e352      	b.n	8003d4e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036a8:	4b37      	ldr	r3, [pc, #220]	; (8003788 <HAL_RCC_OscConfig+0x288>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0f0      	beq.n	8003696 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b4:	f7fd fc7e 	bl	8000fb4 <HAL_GetREVID>
 80036b8:	4603      	mov	r3, r0
 80036ba:	f241 0203 	movw	r2, #4099	; 0x1003
 80036be:	4293      	cmp	r3, r2
 80036c0:	d817      	bhi.n	80036f2 <HAL_RCC_OscConfig+0x1f2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	2b40      	cmp	r3, #64	; 0x40
 80036c8:	d108      	bne.n	80036dc <HAL_RCC_OscConfig+0x1dc>
 80036ca:	4b2f      	ldr	r3, [pc, #188]	; (8003788 <HAL_RCC_OscConfig+0x288>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80036d2:	4a2d      	ldr	r2, [pc, #180]	; (8003788 <HAL_RCC_OscConfig+0x288>)
 80036d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036d8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036da:	e07b      	b.n	80037d4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036dc:	4b2a      	ldr	r3, [pc, #168]	; (8003788 <HAL_RCC_OscConfig+0x288>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	031b      	lsls	r3, r3, #12
 80036ea:	4927      	ldr	r1, [pc, #156]	; (8003788 <HAL_RCC_OscConfig+0x288>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036f0:	e070      	b.n	80037d4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f2:	4b25      	ldr	r3, [pc, #148]	; (8003788 <HAL_RCC_OscConfig+0x288>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	061b      	lsls	r3, r3, #24
 8003700:	4921      	ldr	r1, [pc, #132]	; (8003788 <HAL_RCC_OscConfig+0x288>)
 8003702:	4313      	orrs	r3, r2
 8003704:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003706:	e065      	b.n	80037d4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d048      	beq.n	80037a2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003710:	4b1d      	ldr	r3, [pc, #116]	; (8003788 <HAL_RCC_OscConfig+0x288>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f023 0219 	bic.w	r2, r3, #25
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	491a      	ldr	r1, [pc, #104]	; (8003788 <HAL_RCC_OscConfig+0x288>)
 800371e:	4313      	orrs	r3, r2
 8003720:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003722:	f7fd fc17 	bl	8000f54 <HAL_GetTick>
 8003726:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800372a:	f7fd fc13 	bl	8000f54 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e308      	b.n	8003d4e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800373c:	4b12      	ldr	r3, [pc, #72]	; (8003788 <HAL_RCC_OscConfig+0x288>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d0f0      	beq.n	800372a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003748:	f7fd fc34 	bl	8000fb4 <HAL_GetREVID>
 800374c:	4603      	mov	r3, r0
 800374e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003752:	4293      	cmp	r3, r2
 8003754:	d81a      	bhi.n	800378c <HAL_RCC_OscConfig+0x28c>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	2b40      	cmp	r3, #64	; 0x40
 800375c:	d108      	bne.n	8003770 <HAL_RCC_OscConfig+0x270>
 800375e:	4b0a      	ldr	r3, [pc, #40]	; (8003788 <HAL_RCC_OscConfig+0x288>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003766:	4a08      	ldr	r2, [pc, #32]	; (8003788 <HAL_RCC_OscConfig+0x288>)
 8003768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800376c:	6053      	str	r3, [r2, #4]
 800376e:	e031      	b.n	80037d4 <HAL_RCC_OscConfig+0x2d4>
 8003770:	4b05      	ldr	r3, [pc, #20]	; (8003788 <HAL_RCC_OscConfig+0x288>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	031b      	lsls	r3, r3, #12
 800377e:	4902      	ldr	r1, [pc, #8]	; (8003788 <HAL_RCC_OscConfig+0x288>)
 8003780:	4313      	orrs	r3, r2
 8003782:	604b      	str	r3, [r1, #4]
 8003784:	e026      	b.n	80037d4 <HAL_RCC_OscConfig+0x2d4>
 8003786:	bf00      	nop
 8003788:	58024400 	.word	0x58024400
 800378c:	4b9a      	ldr	r3, [pc, #616]	; (80039f8 <HAL_RCC_OscConfig+0x4f8>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	061b      	lsls	r3, r3, #24
 800379a:	4997      	ldr	r1, [pc, #604]	; (80039f8 <HAL_RCC_OscConfig+0x4f8>)
 800379c:	4313      	orrs	r3, r2
 800379e:	604b      	str	r3, [r1, #4]
 80037a0:	e018      	b.n	80037d4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037a2:	4b95      	ldr	r3, [pc, #596]	; (80039f8 <HAL_RCC_OscConfig+0x4f8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a94      	ldr	r2, [pc, #592]	; (80039f8 <HAL_RCC_OscConfig+0x4f8>)
 80037a8:	f023 0301 	bic.w	r3, r3, #1
 80037ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ae:	f7fd fbd1 	bl	8000f54 <HAL_GetTick>
 80037b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037b4:	e008      	b.n	80037c8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037b6:	f7fd fbcd 	bl	8000f54 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e2c2      	b.n	8003d4e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037c8:	4b8b      	ldr	r3, [pc, #556]	; (80039f8 <HAL_RCC_OscConfig+0x4f8>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1f0      	bne.n	80037b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0310 	and.w	r3, r3, #16
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 80a9 	beq.w	8003934 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037e2:	4b85      	ldr	r3, [pc, #532]	; (80039f8 <HAL_RCC_OscConfig+0x4f8>)
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037ea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037ec:	4b82      	ldr	r3, [pc, #520]	; (80039f8 <HAL_RCC_OscConfig+0x4f8>)
 80037ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	2b08      	cmp	r3, #8
 80037f6:	d007      	beq.n	8003808 <HAL_RCC_OscConfig+0x308>
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	2b18      	cmp	r3, #24
 80037fc:	d13a      	bne.n	8003874 <HAL_RCC_OscConfig+0x374>
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f003 0303 	and.w	r3, r3, #3
 8003804:	2b01      	cmp	r3, #1
 8003806:	d135      	bne.n	8003874 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003808:	4b7b      	ldr	r3, [pc, #492]	; (80039f8 <HAL_RCC_OscConfig+0x4f8>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <HAL_RCC_OscConfig+0x320>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	2b80      	cmp	r3, #128	; 0x80
 800381a:	d001      	beq.n	8003820 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e296      	b.n	8003d4e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003820:	f7fd fbc8 	bl	8000fb4 <HAL_GetREVID>
 8003824:	4603      	mov	r3, r0
 8003826:	f241 0203 	movw	r2, #4099	; 0x1003
 800382a:	4293      	cmp	r3, r2
 800382c:	d817      	bhi.n	800385e <HAL_RCC_OscConfig+0x35e>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	2b20      	cmp	r3, #32
 8003834:	d108      	bne.n	8003848 <HAL_RCC_OscConfig+0x348>
 8003836:	4b70      	ldr	r3, [pc, #448]	; (80039f8 <HAL_RCC_OscConfig+0x4f8>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800383e:	4a6e      	ldr	r2, [pc, #440]	; (80039f8 <HAL_RCC_OscConfig+0x4f8>)
 8003840:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003844:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003846:	e075      	b.n	8003934 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003848:	4b6b      	ldr	r3, [pc, #428]	; (80039f8 <HAL_RCC_OscConfig+0x4f8>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	069b      	lsls	r3, r3, #26
 8003856:	4968      	ldr	r1, [pc, #416]	; (80039f8 <HAL_RCC_OscConfig+0x4f8>)
 8003858:	4313      	orrs	r3, r2
 800385a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800385c:	e06a      	b.n	8003934 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800385e:	4b66      	ldr	r3, [pc, #408]	; (80039f8 <HAL_RCC_OscConfig+0x4f8>)
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	061b      	lsls	r3, r3, #24
 800386c:	4962      	ldr	r1, [pc, #392]	; (80039f8 <HAL_RCC_OscConfig+0x4f8>)
 800386e:	4313      	orrs	r3, r2
 8003870:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003872:	e05f      	b.n	8003934 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	69db      	ldr	r3, [r3, #28]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d042      	beq.n	8003902 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800387c:	4b5e      	ldr	r3, [pc, #376]	; (80039f8 <HAL_RCC_OscConfig+0x4f8>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a5d      	ldr	r2, [pc, #372]	; (80039f8 <HAL_RCC_OscConfig+0x4f8>)
 8003882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003888:	f7fd fb64 	bl	8000f54 <HAL_GetTick>
 800388c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003890:	f7fd fb60 	bl	8000f54 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e255      	b.n	8003d4e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038a2:	4b55      	ldr	r3, [pc, #340]	; (80039f8 <HAL_RCC_OscConfig+0x4f8>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d0f0      	beq.n	8003890 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038ae:	f7fd fb81 	bl	8000fb4 <HAL_GetREVID>
 80038b2:	4603      	mov	r3, r0
 80038b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d817      	bhi.n	80038ec <HAL_RCC_OscConfig+0x3ec>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	2b20      	cmp	r3, #32
 80038c2:	d108      	bne.n	80038d6 <HAL_RCC_OscConfig+0x3d6>
 80038c4:	4b4c      	ldr	r3, [pc, #304]	; (80039f8 <HAL_RCC_OscConfig+0x4f8>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80038cc:	4a4a      	ldr	r2, [pc, #296]	; (80039f8 <HAL_RCC_OscConfig+0x4f8>)
 80038ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038d2:	6053      	str	r3, [r2, #4]
 80038d4:	e02e      	b.n	8003934 <HAL_RCC_OscConfig+0x434>
 80038d6:	4b48      	ldr	r3, [pc, #288]	; (80039f8 <HAL_RCC_OscConfig+0x4f8>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	069b      	lsls	r3, r3, #26
 80038e4:	4944      	ldr	r1, [pc, #272]	; (80039f8 <HAL_RCC_OscConfig+0x4f8>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	604b      	str	r3, [r1, #4]
 80038ea:	e023      	b.n	8003934 <HAL_RCC_OscConfig+0x434>
 80038ec:	4b42      	ldr	r3, [pc, #264]	; (80039f8 <HAL_RCC_OscConfig+0x4f8>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	061b      	lsls	r3, r3, #24
 80038fa:	493f      	ldr	r1, [pc, #252]	; (80039f8 <HAL_RCC_OscConfig+0x4f8>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	60cb      	str	r3, [r1, #12]
 8003900:	e018      	b.n	8003934 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003902:	4b3d      	ldr	r3, [pc, #244]	; (80039f8 <HAL_RCC_OscConfig+0x4f8>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a3c      	ldr	r2, [pc, #240]	; (80039f8 <HAL_RCC_OscConfig+0x4f8>)
 8003908:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800390c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390e:	f7fd fb21 	bl	8000f54 <HAL_GetTick>
 8003912:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003914:	e008      	b.n	8003928 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003916:	f7fd fb1d 	bl	8000f54 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d901      	bls.n	8003928 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e212      	b.n	8003d4e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003928:	4b33      	ldr	r3, [pc, #204]	; (80039f8 <HAL_RCC_OscConfig+0x4f8>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1f0      	bne.n	8003916 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0308 	and.w	r3, r3, #8
 800393c:	2b00      	cmp	r3, #0
 800393e:	d036      	beq.n	80039ae <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d019      	beq.n	800397c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003948:	4b2b      	ldr	r3, [pc, #172]	; (80039f8 <HAL_RCC_OscConfig+0x4f8>)
 800394a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800394c:	4a2a      	ldr	r2, [pc, #168]	; (80039f8 <HAL_RCC_OscConfig+0x4f8>)
 800394e:	f043 0301 	orr.w	r3, r3, #1
 8003952:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003954:	f7fd fafe 	bl	8000f54 <HAL_GetTick>
 8003958:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800395c:	f7fd fafa 	bl	8000f54 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e1ef      	b.n	8003d4e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800396e:	4b22      	ldr	r3, [pc, #136]	; (80039f8 <HAL_RCC_OscConfig+0x4f8>)
 8003970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d0f0      	beq.n	800395c <HAL_RCC_OscConfig+0x45c>
 800397a:	e018      	b.n	80039ae <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800397c:	4b1e      	ldr	r3, [pc, #120]	; (80039f8 <HAL_RCC_OscConfig+0x4f8>)
 800397e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003980:	4a1d      	ldr	r2, [pc, #116]	; (80039f8 <HAL_RCC_OscConfig+0x4f8>)
 8003982:	f023 0301 	bic.w	r3, r3, #1
 8003986:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003988:	f7fd fae4 	bl	8000f54 <HAL_GetTick>
 800398c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003990:	f7fd fae0 	bl	8000f54 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e1d5      	b.n	8003d4e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039a2:	4b15      	ldr	r3, [pc, #84]	; (80039f8 <HAL_RCC_OscConfig+0x4f8>)
 80039a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1f0      	bne.n	8003990 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0320 	and.w	r3, r3, #32
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d039      	beq.n	8003a2e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d01c      	beq.n	80039fc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039c2:	4b0d      	ldr	r3, [pc, #52]	; (80039f8 <HAL_RCC_OscConfig+0x4f8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a0c      	ldr	r2, [pc, #48]	; (80039f8 <HAL_RCC_OscConfig+0x4f8>)
 80039c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80039ce:	f7fd fac1 	bl	8000f54 <HAL_GetTick>
 80039d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80039d4:	e008      	b.n	80039e8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80039d6:	f7fd fabd 	bl	8000f54 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e1b2      	b.n	8003d4e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80039e8:	4b03      	ldr	r3, [pc, #12]	; (80039f8 <HAL_RCC_OscConfig+0x4f8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0f0      	beq.n	80039d6 <HAL_RCC_OscConfig+0x4d6>
 80039f4:	e01b      	b.n	8003a2e <HAL_RCC_OscConfig+0x52e>
 80039f6:	bf00      	nop
 80039f8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80039fc:	4b9b      	ldr	r3, [pc, #620]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a9a      	ldr	r2, [pc, #616]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003a02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a06:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a08:	f7fd faa4 	bl	8000f54 <HAL_GetTick>
 8003a0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003a10:	f7fd faa0 	bl	8000f54 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e195      	b.n	8003d4e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a22:	4b92      	ldr	r3, [pc, #584]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f0      	bne.n	8003a10 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0304 	and.w	r3, r3, #4
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 8081 	beq.w	8003b3e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a3c:	4b8c      	ldr	r3, [pc, #560]	; (8003c70 <HAL_RCC_OscConfig+0x770>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a8b      	ldr	r2, [pc, #556]	; (8003c70 <HAL_RCC_OscConfig+0x770>)
 8003a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a48:	f7fd fa84 	bl	8000f54 <HAL_GetTick>
 8003a4c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003a50:	f7fd fa80 	bl	8000f54 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b64      	cmp	r3, #100	; 0x64
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e175      	b.n	8003d4e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a62:	4b83      	ldr	r3, [pc, #524]	; (8003c70 <HAL_RCC_OscConfig+0x770>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0f0      	beq.n	8003a50 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d106      	bne.n	8003a84 <HAL_RCC_OscConfig+0x584>
 8003a76:	4b7d      	ldr	r3, [pc, #500]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7a:	4a7c      	ldr	r2, [pc, #496]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003a7c:	f043 0301 	orr.w	r3, r3, #1
 8003a80:	6713      	str	r3, [r2, #112]	; 0x70
 8003a82:	e02d      	b.n	8003ae0 <HAL_RCC_OscConfig+0x5e0>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10c      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x5a6>
 8003a8c:	4b77      	ldr	r3, [pc, #476]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a90:	4a76      	ldr	r2, [pc, #472]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003a92:	f023 0301 	bic.w	r3, r3, #1
 8003a96:	6713      	str	r3, [r2, #112]	; 0x70
 8003a98:	4b74      	ldr	r3, [pc, #464]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9c:	4a73      	ldr	r2, [pc, #460]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003a9e:	f023 0304 	bic.w	r3, r3, #4
 8003aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8003aa4:	e01c      	b.n	8003ae0 <HAL_RCC_OscConfig+0x5e0>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	2b05      	cmp	r3, #5
 8003aac:	d10c      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x5c8>
 8003aae:	4b6f      	ldr	r3, [pc, #444]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab2:	4a6e      	ldr	r2, [pc, #440]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003ab4:	f043 0304 	orr.w	r3, r3, #4
 8003ab8:	6713      	str	r3, [r2, #112]	; 0x70
 8003aba:	4b6c      	ldr	r3, [pc, #432]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003abe:	4a6b      	ldr	r2, [pc, #428]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003ac0:	f043 0301 	orr.w	r3, r3, #1
 8003ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ac6:	e00b      	b.n	8003ae0 <HAL_RCC_OscConfig+0x5e0>
 8003ac8:	4b68      	ldr	r3, [pc, #416]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003acc:	4a67      	ldr	r2, [pc, #412]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003ace:	f023 0301 	bic.w	r3, r3, #1
 8003ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ad4:	4b65      	ldr	r3, [pc, #404]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad8:	4a64      	ldr	r2, [pc, #400]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003ada:	f023 0304 	bic.w	r3, r3, #4
 8003ade:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d015      	beq.n	8003b14 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae8:	f7fd fa34 	bl	8000f54 <HAL_GetTick>
 8003aec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003aee:	e00a      	b.n	8003b06 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003af0:	f7fd fa30 	bl	8000f54 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e123      	b.n	8003d4e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b06:	4b59      	ldr	r3, [pc, #356]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0ee      	beq.n	8003af0 <HAL_RCC_OscConfig+0x5f0>
 8003b12:	e014      	b.n	8003b3e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b14:	f7fd fa1e 	bl	8000f54 <HAL_GetTick>
 8003b18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b1a:	e00a      	b.n	8003b32 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b1c:	f7fd fa1a 	bl	8000f54 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e10d      	b.n	8003d4e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b32:	4b4e      	ldr	r3, [pc, #312]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1ee      	bne.n	8003b1c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f000 8102 	beq.w	8003d4c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003b48:	4b48      	ldr	r3, [pc, #288]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b50:	2b18      	cmp	r3, #24
 8003b52:	f000 80bd 	beq.w	8003cd0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	f040 809e 	bne.w	8003c9c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b60:	4b42      	ldr	r3, [pc, #264]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a41      	ldr	r2, [pc, #260]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003b66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6c:	f7fd f9f2 	bl	8000f54 <HAL_GetTick>
 8003b70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b74:	f7fd f9ee 	bl	8000f54 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e0e3      	b.n	8003d4e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b86:	4b39      	ldr	r3, [pc, #228]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1f0      	bne.n	8003b74 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b92:	4b36      	ldr	r3, [pc, #216]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003b94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b96:	4b37      	ldr	r3, [pc, #220]	; (8003c74 <HAL_RCC_OscConfig+0x774>)
 8003b98:	4013      	ands	r3, r2
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003ba2:	0112      	lsls	r2, r2, #4
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	4931      	ldr	r1, [pc, #196]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	628b      	str	r3, [r1, #40]	; 0x28
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	025b      	lsls	r3, r3, #9
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	041b      	lsls	r3, r3, #16
 8003bca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	061b      	lsls	r3, r3, #24
 8003bd8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003bdc:	4923      	ldr	r1, [pc, #140]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003be2:	4b22      	ldr	r3, [pc, #136]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be6:	4a21      	ldr	r2, [pc, #132]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003be8:	f023 0301 	bic.w	r3, r3, #1
 8003bec:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003bee:	4b1f      	ldr	r3, [pc, #124]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003bf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bf2:	4b21      	ldr	r3, [pc, #132]	; (8003c78 <HAL_RCC_OscConfig+0x778>)
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003bfa:	00d2      	lsls	r2, r2, #3
 8003bfc:	491b      	ldr	r1, [pc, #108]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003c02:	4b1a      	ldr	r3, [pc, #104]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c06:	f023 020c 	bic.w	r2, r3, #12
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	4917      	ldr	r1, [pc, #92]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003c14:	4b15      	ldr	r3, [pc, #84]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c18:	f023 0202 	bic.w	r2, r3, #2
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c20:	4912      	ldr	r1, [pc, #72]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c26:	4b11      	ldr	r3, [pc, #68]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2a:	4a10      	ldr	r2, [pc, #64]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c32:	4b0e      	ldr	r3, [pc, #56]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c36:	4a0d      	ldr	r2, [pc, #52]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003c3e:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c42:	4a0a      	ldr	r2, [pc, #40]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003c4a:	4b08      	ldr	r3, [pc, #32]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4e:	4a07      	ldr	r2, [pc, #28]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003c50:	f043 0301 	orr.w	r3, r3, #1
 8003c54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c56:	4b05      	ldr	r3, [pc, #20]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a04      	ldr	r2, [pc, #16]	; (8003c6c <HAL_RCC_OscConfig+0x76c>)
 8003c5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c62:	f7fd f977 	bl	8000f54 <HAL_GetTick>
 8003c66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c68:	e011      	b.n	8003c8e <HAL_RCC_OscConfig+0x78e>
 8003c6a:	bf00      	nop
 8003c6c:	58024400 	.word	0x58024400
 8003c70:	58024800 	.word	0x58024800
 8003c74:	fffffc0c 	.word	0xfffffc0c
 8003c78:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c7c:	f7fd f96a 	bl	8000f54 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e05f      	b.n	8003d4e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c8e:	4b32      	ldr	r3, [pc, #200]	; (8003d58 <HAL_RCC_OscConfig+0x858>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0f0      	beq.n	8003c7c <HAL_RCC_OscConfig+0x77c>
 8003c9a:	e057      	b.n	8003d4c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c9c:	4b2e      	ldr	r3, [pc, #184]	; (8003d58 <HAL_RCC_OscConfig+0x858>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a2d      	ldr	r2, [pc, #180]	; (8003d58 <HAL_RCC_OscConfig+0x858>)
 8003ca2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca8:	f7fd f954 	bl	8000f54 <HAL_GetTick>
 8003cac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cb0:	f7fd f950 	bl	8000f54 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e045      	b.n	8003d4e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cc2:	4b25      	ldr	r3, [pc, #148]	; (8003d58 <HAL_RCC_OscConfig+0x858>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f0      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x7b0>
 8003cce:	e03d      	b.n	8003d4c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003cd0:	4b21      	ldr	r3, [pc, #132]	; (8003d58 <HAL_RCC_OscConfig+0x858>)
 8003cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003cd6:	4b20      	ldr	r3, [pc, #128]	; (8003d58 <HAL_RCC_OscConfig+0x858>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cda:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d031      	beq.n	8003d48 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	f003 0203 	and.w	r2, r3, #3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d12a      	bne.n	8003d48 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	091b      	lsrs	r3, r3, #4
 8003cf6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d122      	bne.n	8003d48 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d11a      	bne.n	8003d48 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	0a5b      	lsrs	r3, r3, #9
 8003d16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d1e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d111      	bne.n	8003d48 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	0c1b      	lsrs	r3, r3, #16
 8003d28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d30:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d108      	bne.n	8003d48 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	0e1b      	lsrs	r3, r3, #24
 8003d3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d42:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d001      	beq.n	8003d4c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e000      	b.n	8003d4e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3730      	adds	r7, #48	; 0x30
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	58024400 	.word	0x58024400

08003d5c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e19c      	b.n	80040aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d70:	4b8a      	ldr	r3, [pc, #552]	; (8003f9c <HAL_RCC_ClockConfig+0x240>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 030f 	and.w	r3, r3, #15
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d910      	bls.n	8003da0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d7e:	4b87      	ldr	r3, [pc, #540]	; (8003f9c <HAL_RCC_ClockConfig+0x240>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f023 020f 	bic.w	r2, r3, #15
 8003d86:	4985      	ldr	r1, [pc, #532]	; (8003f9c <HAL_RCC_ClockConfig+0x240>)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8e:	4b83      	ldr	r3, [pc, #524]	; (8003f9c <HAL_RCC_ClockConfig+0x240>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 030f 	and.w	r3, r3, #15
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d001      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e184      	b.n	80040aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d010      	beq.n	8003dce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	691a      	ldr	r2, [r3, #16]
 8003db0:	4b7b      	ldr	r3, [pc, #492]	; (8003fa0 <HAL_RCC_ClockConfig+0x244>)
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d908      	bls.n	8003dce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003dbc:	4b78      	ldr	r3, [pc, #480]	; (8003fa0 <HAL_RCC_ClockConfig+0x244>)
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	4975      	ldr	r1, [pc, #468]	; (8003fa0 <HAL_RCC_ClockConfig+0x244>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0308 	and.w	r3, r3, #8
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d010      	beq.n	8003dfc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	695a      	ldr	r2, [r3, #20]
 8003dde:	4b70      	ldr	r3, [pc, #448]	; (8003fa0 <HAL_RCC_ClockConfig+0x244>)
 8003de0:	69db      	ldr	r3, [r3, #28]
 8003de2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d908      	bls.n	8003dfc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003dea:	4b6d      	ldr	r3, [pc, #436]	; (8003fa0 <HAL_RCC_ClockConfig+0x244>)
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	496a      	ldr	r1, [pc, #424]	; (8003fa0 <HAL_RCC_ClockConfig+0x244>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0310 	and.w	r3, r3, #16
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d010      	beq.n	8003e2a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	699a      	ldr	r2, [r3, #24]
 8003e0c:	4b64      	ldr	r3, [pc, #400]	; (8003fa0 <HAL_RCC_ClockConfig+0x244>)
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d908      	bls.n	8003e2a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e18:	4b61      	ldr	r3, [pc, #388]	; (8003fa0 <HAL_RCC_ClockConfig+0x244>)
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	495e      	ldr	r1, [pc, #376]	; (8003fa0 <HAL_RCC_ClockConfig+0x244>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0320 	and.w	r3, r3, #32
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d010      	beq.n	8003e58 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69da      	ldr	r2, [r3, #28]
 8003e3a:	4b59      	ldr	r3, [pc, #356]	; (8003fa0 <HAL_RCC_ClockConfig+0x244>)
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d908      	bls.n	8003e58 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003e46:	4b56      	ldr	r3, [pc, #344]	; (8003fa0 <HAL_RCC_ClockConfig+0x244>)
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	4953      	ldr	r1, [pc, #332]	; (8003fa0 <HAL_RCC_ClockConfig+0x244>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d010      	beq.n	8003e86 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68da      	ldr	r2, [r3, #12]
 8003e68:	4b4d      	ldr	r3, [pc, #308]	; (8003fa0 <HAL_RCC_ClockConfig+0x244>)
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	f003 030f 	and.w	r3, r3, #15
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d908      	bls.n	8003e86 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e74:	4b4a      	ldr	r3, [pc, #296]	; (8003fa0 <HAL_RCC_ClockConfig+0x244>)
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	f023 020f 	bic.w	r2, r3, #15
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	4947      	ldr	r1, [pc, #284]	; (8003fa0 <HAL_RCC_ClockConfig+0x244>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d055      	beq.n	8003f3e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003e92:	4b43      	ldr	r3, [pc, #268]	; (8003fa0 <HAL_RCC_ClockConfig+0x244>)
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	4940      	ldr	r1, [pc, #256]	; (8003fa0 <HAL_RCC_ClockConfig+0x244>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d107      	bne.n	8003ebc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003eac:	4b3c      	ldr	r3, [pc, #240]	; (8003fa0 <HAL_RCC_ClockConfig+0x244>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d121      	bne.n	8003efc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e0f6      	b.n	80040aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b03      	cmp	r3, #3
 8003ec2:	d107      	bne.n	8003ed4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ec4:	4b36      	ldr	r3, [pc, #216]	; (8003fa0 <HAL_RCC_ClockConfig+0x244>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d115      	bne.n	8003efc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e0ea      	b.n	80040aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d107      	bne.n	8003eec <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003edc:	4b30      	ldr	r3, [pc, #192]	; (8003fa0 <HAL_RCC_ClockConfig+0x244>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d109      	bne.n	8003efc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e0de      	b.n	80040aa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003eec:	4b2c      	ldr	r3, [pc, #176]	; (8003fa0 <HAL_RCC_ClockConfig+0x244>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e0d6      	b.n	80040aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003efc:	4b28      	ldr	r3, [pc, #160]	; (8003fa0 <HAL_RCC_ClockConfig+0x244>)
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	f023 0207 	bic.w	r2, r3, #7
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	4925      	ldr	r1, [pc, #148]	; (8003fa0 <HAL_RCC_ClockConfig+0x244>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f0e:	f7fd f821 	bl	8000f54 <HAL_GetTick>
 8003f12:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f14:	e00a      	b.n	8003f2c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f16:	f7fd f81d 	bl	8000f54 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e0be      	b.n	80040aa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f2c:	4b1c      	ldr	r3, [pc, #112]	; (8003fa0 <HAL_RCC_ClockConfig+0x244>)
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d1eb      	bne.n	8003f16 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d010      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	4b14      	ldr	r3, [pc, #80]	; (8003fa0 <HAL_RCC_ClockConfig+0x244>)
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d208      	bcs.n	8003f6c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f5a:	4b11      	ldr	r3, [pc, #68]	; (8003fa0 <HAL_RCC_ClockConfig+0x244>)
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	f023 020f 	bic.w	r2, r3, #15
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	490e      	ldr	r1, [pc, #56]	; (8003fa0 <HAL_RCC_ClockConfig+0x244>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f6c:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <HAL_RCC_ClockConfig+0x240>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 030f 	and.w	r3, r3, #15
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d214      	bcs.n	8003fa4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f7a:	4b08      	ldr	r3, [pc, #32]	; (8003f9c <HAL_RCC_ClockConfig+0x240>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f023 020f 	bic.w	r2, r3, #15
 8003f82:	4906      	ldr	r1, [pc, #24]	; (8003f9c <HAL_RCC_ClockConfig+0x240>)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f8a:	4b04      	ldr	r3, [pc, #16]	; (8003f9c <HAL_RCC_ClockConfig+0x240>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d005      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e086      	b.n	80040aa <HAL_RCC_ClockConfig+0x34e>
 8003f9c:	52002000 	.word	0x52002000
 8003fa0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d010      	beq.n	8003fd2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	691a      	ldr	r2, [r3, #16]
 8003fb4:	4b3f      	ldr	r3, [pc, #252]	; (80040b4 <HAL_RCC_ClockConfig+0x358>)
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d208      	bcs.n	8003fd2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003fc0:	4b3c      	ldr	r3, [pc, #240]	; (80040b4 <HAL_RCC_ClockConfig+0x358>)
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	4939      	ldr	r1, [pc, #228]	; (80040b4 <HAL_RCC_ClockConfig+0x358>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0308 	and.w	r3, r3, #8
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d010      	beq.n	8004000 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	695a      	ldr	r2, [r3, #20]
 8003fe2:	4b34      	ldr	r3, [pc, #208]	; (80040b4 <HAL_RCC_ClockConfig+0x358>)
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d208      	bcs.n	8004000 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003fee:	4b31      	ldr	r3, [pc, #196]	; (80040b4 <HAL_RCC_ClockConfig+0x358>)
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	492e      	ldr	r1, [pc, #184]	; (80040b4 <HAL_RCC_ClockConfig+0x358>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0310 	and.w	r3, r3, #16
 8004008:	2b00      	cmp	r3, #0
 800400a:	d010      	beq.n	800402e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	699a      	ldr	r2, [r3, #24]
 8004010:	4b28      	ldr	r3, [pc, #160]	; (80040b4 <HAL_RCC_ClockConfig+0x358>)
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004018:	429a      	cmp	r2, r3
 800401a:	d208      	bcs.n	800402e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800401c:	4b25      	ldr	r3, [pc, #148]	; (80040b4 <HAL_RCC_ClockConfig+0x358>)
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	4922      	ldr	r1, [pc, #136]	; (80040b4 <HAL_RCC_ClockConfig+0x358>)
 800402a:	4313      	orrs	r3, r2
 800402c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0320 	and.w	r3, r3, #32
 8004036:	2b00      	cmp	r3, #0
 8004038:	d010      	beq.n	800405c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69da      	ldr	r2, [r3, #28]
 800403e:	4b1d      	ldr	r3, [pc, #116]	; (80040b4 <HAL_RCC_ClockConfig+0x358>)
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004046:	429a      	cmp	r2, r3
 8004048:	d208      	bcs.n	800405c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800404a:	4b1a      	ldr	r3, [pc, #104]	; (80040b4 <HAL_RCC_ClockConfig+0x358>)
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	4917      	ldr	r1, [pc, #92]	; (80040b4 <HAL_RCC_ClockConfig+0x358>)
 8004058:	4313      	orrs	r3, r2
 800405a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800405c:	f000 f834 	bl	80040c8 <HAL_RCC_GetSysClockFreq>
 8004060:	4602      	mov	r2, r0
 8004062:	4b14      	ldr	r3, [pc, #80]	; (80040b4 <HAL_RCC_ClockConfig+0x358>)
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	0a1b      	lsrs	r3, r3, #8
 8004068:	f003 030f 	and.w	r3, r3, #15
 800406c:	4912      	ldr	r1, [pc, #72]	; (80040b8 <HAL_RCC_ClockConfig+0x35c>)
 800406e:	5ccb      	ldrb	r3, [r1, r3]
 8004070:	f003 031f 	and.w	r3, r3, #31
 8004074:	fa22 f303 	lsr.w	r3, r2, r3
 8004078:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800407a:	4b0e      	ldr	r3, [pc, #56]	; (80040b4 <HAL_RCC_ClockConfig+0x358>)
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	f003 030f 	and.w	r3, r3, #15
 8004082:	4a0d      	ldr	r2, [pc, #52]	; (80040b8 <HAL_RCC_ClockConfig+0x35c>)
 8004084:	5cd3      	ldrb	r3, [r2, r3]
 8004086:	f003 031f 	and.w	r3, r3, #31
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	fa22 f303 	lsr.w	r3, r2, r3
 8004090:	4a0a      	ldr	r2, [pc, #40]	; (80040bc <HAL_RCC_ClockConfig+0x360>)
 8004092:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004094:	4a0a      	ldr	r2, [pc, #40]	; (80040c0 <HAL_RCC_ClockConfig+0x364>)
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800409a:	4b0a      	ldr	r3, [pc, #40]	; (80040c4 <HAL_RCC_ClockConfig+0x368>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fc ff0e 	bl	8000ec0 <HAL_InitTick>
 80040a4:	4603      	mov	r3, r0
 80040a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80040a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3718      	adds	r7, #24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	58024400 	.word	0x58024400
 80040b8:	0800afe4 	.word	0x0800afe4
 80040bc:	24000004 	.word	0x24000004
 80040c0:	24000000 	.word	0x24000000
 80040c4:	24000008 	.word	0x24000008

080040c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b089      	sub	sp, #36	; 0x24
 80040cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040ce:	4bb3      	ldr	r3, [pc, #716]	; (800439c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040d6:	2b18      	cmp	r3, #24
 80040d8:	f200 8155 	bhi.w	8004386 <HAL_RCC_GetSysClockFreq+0x2be>
 80040dc:	a201      	add	r2, pc, #4	; (adr r2, 80040e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80040de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e2:	bf00      	nop
 80040e4:	08004149 	.word	0x08004149
 80040e8:	08004387 	.word	0x08004387
 80040ec:	08004387 	.word	0x08004387
 80040f0:	08004387 	.word	0x08004387
 80040f4:	08004387 	.word	0x08004387
 80040f8:	08004387 	.word	0x08004387
 80040fc:	08004387 	.word	0x08004387
 8004100:	08004387 	.word	0x08004387
 8004104:	0800416f 	.word	0x0800416f
 8004108:	08004387 	.word	0x08004387
 800410c:	08004387 	.word	0x08004387
 8004110:	08004387 	.word	0x08004387
 8004114:	08004387 	.word	0x08004387
 8004118:	08004387 	.word	0x08004387
 800411c:	08004387 	.word	0x08004387
 8004120:	08004387 	.word	0x08004387
 8004124:	08004175 	.word	0x08004175
 8004128:	08004387 	.word	0x08004387
 800412c:	08004387 	.word	0x08004387
 8004130:	08004387 	.word	0x08004387
 8004134:	08004387 	.word	0x08004387
 8004138:	08004387 	.word	0x08004387
 800413c:	08004387 	.word	0x08004387
 8004140:	08004387 	.word	0x08004387
 8004144:	0800417b 	.word	0x0800417b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004148:	4b94      	ldr	r3, [pc, #592]	; (800439c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0320 	and.w	r3, r3, #32
 8004150:	2b00      	cmp	r3, #0
 8004152:	d009      	beq.n	8004168 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004154:	4b91      	ldr	r3, [pc, #580]	; (800439c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	08db      	lsrs	r3, r3, #3
 800415a:	f003 0303 	and.w	r3, r3, #3
 800415e:	4a90      	ldr	r2, [pc, #576]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004160:	fa22 f303 	lsr.w	r3, r2, r3
 8004164:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004166:	e111      	b.n	800438c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004168:	4b8d      	ldr	r3, [pc, #564]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800416a:	61bb      	str	r3, [r7, #24]
    break;
 800416c:	e10e      	b.n	800438c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800416e:	4b8d      	ldr	r3, [pc, #564]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004170:	61bb      	str	r3, [r7, #24]
    break;
 8004172:	e10b      	b.n	800438c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004174:	4b8c      	ldr	r3, [pc, #560]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004176:	61bb      	str	r3, [r7, #24]
    break;
 8004178:	e108      	b.n	800438c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800417a:	4b88      	ldr	r3, [pc, #544]	; (800439c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800417c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417e:	f003 0303 	and.w	r3, r3, #3
 8004182:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004184:	4b85      	ldr	r3, [pc, #532]	; (800439c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004188:	091b      	lsrs	r3, r3, #4
 800418a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800418e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004190:	4b82      	ldr	r3, [pc, #520]	; (800439c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800419a:	4b80      	ldr	r3, [pc, #512]	; (800439c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800419c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800419e:	08db      	lsrs	r3, r3, #3
 80041a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	fb02 f303 	mul.w	r3, r2, r3
 80041aa:	ee07 3a90 	vmov	s15, r3
 80041ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041b2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f000 80e1 	beq.w	8004380 <HAL_RCC_GetSysClockFreq+0x2b8>
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	f000 8083 	beq.w	80042cc <HAL_RCC_GetSysClockFreq+0x204>
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	f200 80a1 	bhi.w	8004310 <HAL_RCC_GetSysClockFreq+0x248>
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d003      	beq.n	80041dc <HAL_RCC_GetSysClockFreq+0x114>
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d056      	beq.n	8004288 <HAL_RCC_GetSysClockFreq+0x1c0>
 80041da:	e099      	b.n	8004310 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041dc:	4b6f      	ldr	r3, [pc, #444]	; (800439c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0320 	and.w	r3, r3, #32
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d02d      	beq.n	8004244 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80041e8:	4b6c      	ldr	r3, [pc, #432]	; (800439c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	08db      	lsrs	r3, r3, #3
 80041ee:	f003 0303 	and.w	r3, r3, #3
 80041f2:	4a6b      	ldr	r2, [pc, #428]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80041f4:	fa22 f303 	lsr.w	r3, r2, r3
 80041f8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	ee07 3a90 	vmov	s15, r3
 8004200:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	ee07 3a90 	vmov	s15, r3
 800420a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800420e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004212:	4b62      	ldr	r3, [pc, #392]	; (800439c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800421a:	ee07 3a90 	vmov	s15, r3
 800421e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004222:	ed97 6a02 	vldr	s12, [r7, #8]
 8004226:	eddf 5a61 	vldr	s11, [pc, #388]	; 80043ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800422a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800422e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004232:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800423a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800423e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004242:	e087      	b.n	8004354 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	ee07 3a90 	vmov	s15, r3
 800424a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800424e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80043b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004256:	4b51      	ldr	r3, [pc, #324]	; (800439c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800425e:	ee07 3a90 	vmov	s15, r3
 8004262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004266:	ed97 6a02 	vldr	s12, [r7, #8]
 800426a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80043ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800426e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004276:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800427a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800427e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004282:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004286:	e065      	b.n	8004354 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	ee07 3a90 	vmov	s15, r3
 800428e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004292:	eddf 6a48 	vldr	s13, [pc, #288]	; 80043b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800429a:	4b40      	ldr	r3, [pc, #256]	; (800439c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042a2:	ee07 3a90 	vmov	s15, r3
 80042a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80042ae:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80043ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80042b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042ca:	e043      	b.n	8004354 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	ee07 3a90 	vmov	s15, r3
 80042d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042d6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80043b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80042da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042de:	4b2f      	ldr	r3, [pc, #188]	; (800439c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042e6:	ee07 3a90 	vmov	s15, r3
 80042ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80042f2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80043ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80042f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800430a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800430e:	e021      	b.n	8004354 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	ee07 3a90 	vmov	s15, r3
 8004316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800431a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80043b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800431e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004322:	4b1e      	ldr	r3, [pc, #120]	; (800439c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800432a:	ee07 3a90 	vmov	s15, r3
 800432e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004332:	ed97 6a02 	vldr	s12, [r7, #8]
 8004336:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80043ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800433a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800433e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004342:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800434a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800434e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004352:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004354:	4b11      	ldr	r3, [pc, #68]	; (800439c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004358:	0a5b      	lsrs	r3, r3, #9
 800435a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800435e:	3301      	adds	r3, #1
 8004360:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	ee07 3a90 	vmov	s15, r3
 8004368:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800436c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004370:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004374:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004378:	ee17 3a90 	vmov	r3, s15
 800437c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800437e:	e005      	b.n	800438c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004380:	2300      	movs	r3, #0
 8004382:	61bb      	str	r3, [r7, #24]
    break;
 8004384:	e002      	b.n	800438c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004386:	4b07      	ldr	r3, [pc, #28]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004388:	61bb      	str	r3, [r7, #24]
    break;
 800438a:	bf00      	nop
  }

  return sysclockfreq;
 800438c:	69bb      	ldr	r3, [r7, #24]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3724      	adds	r7, #36	; 0x24
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	58024400 	.word	0x58024400
 80043a0:	03d09000 	.word	0x03d09000
 80043a4:	003d0900 	.word	0x003d0900
 80043a8:	007a1200 	.word	0x007a1200
 80043ac:	46000000 	.word	0x46000000
 80043b0:	4c742400 	.word	0x4c742400
 80043b4:	4a742400 	.word	0x4a742400
 80043b8:	4af42400 	.word	0x4af42400

080043bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80043c2:	f7ff fe81 	bl	80040c8 <HAL_RCC_GetSysClockFreq>
 80043c6:	4602      	mov	r2, r0
 80043c8:	4b10      	ldr	r3, [pc, #64]	; (800440c <HAL_RCC_GetHCLKFreq+0x50>)
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	0a1b      	lsrs	r3, r3, #8
 80043ce:	f003 030f 	and.w	r3, r3, #15
 80043d2:	490f      	ldr	r1, [pc, #60]	; (8004410 <HAL_RCC_GetHCLKFreq+0x54>)
 80043d4:	5ccb      	ldrb	r3, [r1, r3]
 80043d6:	f003 031f 	and.w	r3, r3, #31
 80043da:	fa22 f303 	lsr.w	r3, r2, r3
 80043de:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043e0:	4b0a      	ldr	r3, [pc, #40]	; (800440c <HAL_RCC_GetHCLKFreq+0x50>)
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	f003 030f 	and.w	r3, r3, #15
 80043e8:	4a09      	ldr	r2, [pc, #36]	; (8004410 <HAL_RCC_GetHCLKFreq+0x54>)
 80043ea:	5cd3      	ldrb	r3, [r2, r3]
 80043ec:	f003 031f 	and.w	r3, r3, #31
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	fa22 f303 	lsr.w	r3, r2, r3
 80043f6:	4a07      	ldr	r2, [pc, #28]	; (8004414 <HAL_RCC_GetHCLKFreq+0x58>)
 80043f8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80043fa:	4a07      	ldr	r2, [pc, #28]	; (8004418 <HAL_RCC_GetHCLKFreq+0x5c>)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004400:	4b04      	ldr	r3, [pc, #16]	; (8004414 <HAL_RCC_GetHCLKFreq+0x58>)
 8004402:	681b      	ldr	r3, [r3, #0]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3708      	adds	r7, #8
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	58024400 	.word	0x58024400
 8004410:	0800afe4 	.word	0x0800afe4
 8004414:	24000004 	.word	0x24000004
 8004418:	24000000 	.word	0x24000000

0800441c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004420:	f7ff ffcc 	bl	80043bc <HAL_RCC_GetHCLKFreq>
 8004424:	4602      	mov	r2, r0
 8004426:	4b06      	ldr	r3, [pc, #24]	; (8004440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	091b      	lsrs	r3, r3, #4
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	4904      	ldr	r1, [pc, #16]	; (8004444 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004432:	5ccb      	ldrb	r3, [r1, r3]
 8004434:	f003 031f 	and.w	r3, r3, #31
 8004438:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800443c:	4618      	mov	r0, r3
 800443e:	bd80      	pop	{r7, pc}
 8004440:	58024400 	.word	0x58024400
 8004444:	0800afe4 	.word	0x0800afe4

08004448 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800444c:	f7ff ffb6 	bl	80043bc <HAL_RCC_GetHCLKFreq>
 8004450:	4602      	mov	r2, r0
 8004452:	4b06      	ldr	r3, [pc, #24]	; (800446c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	0a1b      	lsrs	r3, r3, #8
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	4904      	ldr	r1, [pc, #16]	; (8004470 <HAL_RCC_GetPCLK2Freq+0x28>)
 800445e:	5ccb      	ldrb	r3, [r1, r3]
 8004460:	f003 031f 	and.w	r3, r3, #31
 8004464:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004468:	4618      	mov	r0, r3
 800446a:	bd80      	pop	{r7, pc}
 800446c:	58024400 	.word	0x58024400
 8004470:	0800afe4 	.word	0x0800afe4

08004474 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800447c:	2300      	movs	r3, #0
 800447e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004480:	2300      	movs	r3, #0
 8004482:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d03f      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004494:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004498:	d02a      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800449a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800449e:	d824      	bhi.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044a4:	d018      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80044a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044aa:	d81e      	bhi.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d003      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80044b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044b4:	d007      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80044b6:	e018      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044b8:	4ba3      	ldr	r3, [pc, #652]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	4aa2      	ldr	r2, [pc, #648]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80044be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80044c4:	e015      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	3304      	adds	r3, #4
 80044ca:	2102      	movs	r1, #2
 80044cc:	4618      	mov	r0, r3
 80044ce:	f001 f9d5 	bl	800587c <RCCEx_PLL2_Config>
 80044d2:	4603      	mov	r3, r0
 80044d4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80044d6:	e00c      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3324      	adds	r3, #36	; 0x24
 80044dc:	2102      	movs	r1, #2
 80044de:	4618      	mov	r0, r3
 80044e0:	f001 fa7e 	bl	80059e0 <RCCEx_PLL3_Config>
 80044e4:	4603      	mov	r3, r0
 80044e6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80044e8:	e003      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	75fb      	strb	r3, [r7, #23]
      break;
 80044ee:	e000      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80044f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044f2:	7dfb      	ldrb	r3, [r7, #23]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d109      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80044f8:	4b93      	ldr	r3, [pc, #588]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80044fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004504:	4990      	ldr	r1, [pc, #576]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004506:	4313      	orrs	r3, r2
 8004508:	650b      	str	r3, [r1, #80]	; 0x50
 800450a:	e001      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800450c:	7dfb      	ldrb	r3, [r7, #23]
 800450e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004518:	2b00      	cmp	r3, #0
 800451a:	d03d      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004520:	2b04      	cmp	r3, #4
 8004522:	d826      	bhi.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004524:	a201      	add	r2, pc, #4	; (adr r2, 800452c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452a:	bf00      	nop
 800452c:	08004541 	.word	0x08004541
 8004530:	0800454f 	.word	0x0800454f
 8004534:	08004561 	.word	0x08004561
 8004538:	08004579 	.word	0x08004579
 800453c:	08004579 	.word	0x08004579
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004540:	4b81      	ldr	r3, [pc, #516]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004544:	4a80      	ldr	r2, [pc, #512]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004546:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800454a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800454c:	e015      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	3304      	adds	r3, #4
 8004552:	2100      	movs	r1, #0
 8004554:	4618      	mov	r0, r3
 8004556:	f001 f991 	bl	800587c <RCCEx_PLL2_Config>
 800455a:	4603      	mov	r3, r0
 800455c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800455e:	e00c      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3324      	adds	r3, #36	; 0x24
 8004564:	2100      	movs	r1, #0
 8004566:	4618      	mov	r0, r3
 8004568:	f001 fa3a 	bl	80059e0 <RCCEx_PLL3_Config>
 800456c:	4603      	mov	r3, r0
 800456e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004570:	e003      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	75fb      	strb	r3, [r7, #23]
      break;
 8004576:	e000      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004578:	bf00      	nop
    }

    if(ret == HAL_OK)
 800457a:	7dfb      	ldrb	r3, [r7, #23]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d109      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004580:	4b71      	ldr	r3, [pc, #452]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004584:	f023 0207 	bic.w	r2, r3, #7
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458c:	496e      	ldr	r1, [pc, #440]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800458e:	4313      	orrs	r3, r2
 8004590:	650b      	str	r3, [r1, #80]	; 0x50
 8004592:	e001      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004594:	7dfb      	ldrb	r3, [r7, #23]
 8004596:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d042      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ac:	d02b      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80045ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045b2:	d825      	bhi.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80045b4:	2bc0      	cmp	r3, #192	; 0xc0
 80045b6:	d028      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80045b8:	2bc0      	cmp	r3, #192	; 0xc0
 80045ba:	d821      	bhi.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80045bc:	2b80      	cmp	r3, #128	; 0x80
 80045be:	d016      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80045c0:	2b80      	cmp	r3, #128	; 0x80
 80045c2:	d81d      	bhi.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80045c8:	2b40      	cmp	r3, #64	; 0x40
 80045ca:	d007      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x168>
 80045cc:	e018      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045ce:	4b5e      	ldr	r3, [pc, #376]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80045d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d2:	4a5d      	ldr	r2, [pc, #372]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80045d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80045da:	e017      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	3304      	adds	r3, #4
 80045e0:	2100      	movs	r1, #0
 80045e2:	4618      	mov	r0, r3
 80045e4:	f001 f94a 	bl	800587c <RCCEx_PLL2_Config>
 80045e8:	4603      	mov	r3, r0
 80045ea:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80045ec:	e00e      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	3324      	adds	r3, #36	; 0x24
 80045f2:	2100      	movs	r1, #0
 80045f4:	4618      	mov	r0, r3
 80045f6:	f001 f9f3 	bl	80059e0 <RCCEx_PLL3_Config>
 80045fa:	4603      	mov	r3, r0
 80045fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80045fe:	e005      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	75fb      	strb	r3, [r7, #23]
      break;
 8004604:	e002      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004606:	bf00      	nop
 8004608:	e000      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800460a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800460c:	7dfb      	ldrb	r3, [r7, #23]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d109      	bne.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004612:	4b4d      	ldr	r3, [pc, #308]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004616:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800461e:	494a      	ldr	r1, [pc, #296]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004620:	4313      	orrs	r3, r2
 8004622:	650b      	str	r3, [r1, #80]	; 0x50
 8004624:	e001      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004626:	7dfb      	ldrb	r3, [r7, #23]
 8004628:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004632:	2b00      	cmp	r3, #0
 8004634:	d049      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800463c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004640:	d030      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004642:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004646:	d82a      	bhi.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004648:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800464c:	d02c      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800464e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004652:	d824      	bhi.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004654:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004658:	d018      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800465a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800465e:	d81e      	bhi.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004664:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004668:	d007      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800466a:	e018      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800466c:	4b36      	ldr	r3, [pc, #216]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	4a35      	ldr	r2, [pc, #212]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004672:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004676:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004678:	e017      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	3304      	adds	r3, #4
 800467e:	2100      	movs	r1, #0
 8004680:	4618      	mov	r0, r3
 8004682:	f001 f8fb 	bl	800587c <RCCEx_PLL2_Config>
 8004686:	4603      	mov	r3, r0
 8004688:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800468a:	e00e      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3324      	adds	r3, #36	; 0x24
 8004690:	2100      	movs	r1, #0
 8004692:	4618      	mov	r0, r3
 8004694:	f001 f9a4 	bl	80059e0 <RCCEx_PLL3_Config>
 8004698:	4603      	mov	r3, r0
 800469a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800469c:	e005      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	75fb      	strb	r3, [r7, #23]
      break;
 80046a2:	e002      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80046a4:	bf00      	nop
 80046a6:	e000      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80046a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046aa:	7dfb      	ldrb	r3, [r7, #23]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10a      	bne.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80046b0:	4b25      	ldr	r3, [pc, #148]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80046b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80046be:	4922      	ldr	r1, [pc, #136]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	658b      	str	r3, [r1, #88]	; 0x58
 80046c4:	e001      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c6:	7dfb      	ldrb	r3, [r7, #23]
 80046c8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d04b      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80046dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046e0:	d030      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80046e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046e6:	d82a      	bhi.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80046e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80046ec:	d02e      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80046ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80046f2:	d824      	bhi.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80046f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046f8:	d018      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80046fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046fe:	d81e      	bhi.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004700:	2b00      	cmp	r3, #0
 8004702:	d003      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004704:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004708:	d007      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800470a:	e018      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800470c:	4b0e      	ldr	r3, [pc, #56]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004710:	4a0d      	ldr	r2, [pc, #52]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004712:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004716:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004718:	e019      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	3304      	adds	r3, #4
 800471e:	2100      	movs	r1, #0
 8004720:	4618      	mov	r0, r3
 8004722:	f001 f8ab 	bl	800587c <RCCEx_PLL2_Config>
 8004726:	4603      	mov	r3, r0
 8004728:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800472a:	e010      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	3324      	adds	r3, #36	; 0x24
 8004730:	2100      	movs	r1, #0
 8004732:	4618      	mov	r0, r3
 8004734:	f001 f954 	bl	80059e0 <RCCEx_PLL3_Config>
 8004738:	4603      	mov	r3, r0
 800473a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800473c:	e007      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	75fb      	strb	r3, [r7, #23]
      break;
 8004742:	e004      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8004744:	bf00      	nop
 8004746:	e002      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004748:	58024400 	.word	0x58024400
      break;
 800474c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800474e:	7dfb      	ldrb	r3, [r7, #23]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10a      	bne.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004754:	4b99      	ldr	r3, [pc, #612]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004758:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004762:	4996      	ldr	r1, [pc, #600]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004764:	4313      	orrs	r3, r2
 8004766:	658b      	str	r3, [r1, #88]	; 0x58
 8004768:	e001      	b.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800476a:	7dfb      	ldrb	r3, [r7, #23]
 800476c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d032      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800477e:	2b30      	cmp	r3, #48	; 0x30
 8004780:	d01c      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004782:	2b30      	cmp	r3, #48	; 0x30
 8004784:	d817      	bhi.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004786:	2b20      	cmp	r3, #32
 8004788:	d00c      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800478a:	2b20      	cmp	r3, #32
 800478c:	d813      	bhi.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800478e:	2b00      	cmp	r3, #0
 8004790:	d016      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004792:	2b10      	cmp	r3, #16
 8004794:	d10f      	bne.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004796:	4b89      	ldr	r3, [pc, #548]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479a:	4a88      	ldr	r2, [pc, #544]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800479c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80047a2:	e00e      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3304      	adds	r3, #4
 80047a8:	2102      	movs	r1, #2
 80047aa:	4618      	mov	r0, r3
 80047ac:	f001 f866 	bl	800587c <RCCEx_PLL2_Config>
 80047b0:	4603      	mov	r3, r0
 80047b2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80047b4:	e005      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	75fb      	strb	r3, [r7, #23]
      break;
 80047ba:	e002      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80047bc:	bf00      	nop
 80047be:	e000      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80047c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047c2:	7dfb      	ldrb	r3, [r7, #23]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d109      	bne.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80047c8:	4b7c      	ldr	r3, [pc, #496]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80047ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047d4:	4979      	ldr	r1, [pc, #484]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80047da:	e001      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047dc:	7dfb      	ldrb	r3, [r7, #23]
 80047de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d047      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047f4:	d030      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80047f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047fa:	d82a      	bhi.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80047fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004800:	d02c      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004802:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004806:	d824      	bhi.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004808:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800480c:	d018      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800480e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004812:	d81e      	bhi.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004814:	2b00      	cmp	r3, #0
 8004816:	d003      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800481c:	d007      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800481e:	e018      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004820:	4b66      	ldr	r3, [pc, #408]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004824:	4a65      	ldr	r2, [pc, #404]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800482a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800482c:	e017      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	3304      	adds	r3, #4
 8004832:	2100      	movs	r1, #0
 8004834:	4618      	mov	r0, r3
 8004836:	f001 f821 	bl	800587c <RCCEx_PLL2_Config>
 800483a:	4603      	mov	r3, r0
 800483c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800483e:	e00e      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3324      	adds	r3, #36	; 0x24
 8004844:	2100      	movs	r1, #0
 8004846:	4618      	mov	r0, r3
 8004848:	f001 f8ca 	bl	80059e0 <RCCEx_PLL3_Config>
 800484c:	4603      	mov	r3, r0
 800484e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004850:	e005      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	75fb      	strb	r3, [r7, #23]
      break;
 8004856:	e002      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004858:	bf00      	nop
 800485a:	e000      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800485c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800485e:	7dfb      	ldrb	r3, [r7, #23]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d109      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004864:	4b55      	ldr	r3, [pc, #340]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004868:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004870:	4952      	ldr	r1, [pc, #328]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004872:	4313      	orrs	r3, r2
 8004874:	650b      	str	r3, [r1, #80]	; 0x50
 8004876:	e001      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004878:	7dfb      	ldrb	r3, [r7, #23]
 800487a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d049      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800488c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004890:	d02e      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004892:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004896:	d828      	bhi.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004898:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800489c:	d02a      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800489e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80048a2:	d822      	bhi.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x476>
 80048a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80048a8:	d026      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80048aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80048ae:	d81c      	bhi.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x476>
 80048b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048b4:	d010      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80048b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048ba:	d816      	bhi.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x476>
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d01d      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x488>
 80048c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048c4:	d111      	bne.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	3304      	adds	r3, #4
 80048ca:	2101      	movs	r1, #1
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 ffd5 	bl	800587c <RCCEx_PLL2_Config>
 80048d2:	4603      	mov	r3, r0
 80048d4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80048d6:	e012      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3324      	adds	r3, #36	; 0x24
 80048dc:	2101      	movs	r1, #1
 80048de:	4618      	mov	r0, r3
 80048e0:	f001 f87e 	bl	80059e0 <RCCEx_PLL3_Config>
 80048e4:	4603      	mov	r3, r0
 80048e6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80048e8:	e009      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	75fb      	strb	r3, [r7, #23]
      break;
 80048ee:	e006      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80048f0:	bf00      	nop
 80048f2:	e004      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80048f4:	bf00      	nop
 80048f6:	e002      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80048f8:	bf00      	nop
 80048fa:	e000      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80048fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048fe:	7dfb      	ldrb	r3, [r7, #23]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d109      	bne.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004904:	4b2d      	ldr	r3, [pc, #180]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004908:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004910:	492a      	ldr	r1, [pc, #168]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004912:	4313      	orrs	r3, r2
 8004914:	650b      	str	r3, [r1, #80]	; 0x50
 8004916:	e001      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004918:	7dfb      	ldrb	r3, [r7, #23]
 800491a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d04d      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800492e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004932:	d02e      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004934:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004938:	d828      	bhi.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800493a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493e:	d02a      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004944:	d822      	bhi.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004946:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800494a:	d026      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x526>
 800494c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004950:	d81c      	bhi.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004952:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004956:	d010      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004958:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800495c:	d816      	bhi.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800495e:	2b00      	cmp	r3, #0
 8004960:	d01d      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004962:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004966:	d111      	bne.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	3304      	adds	r3, #4
 800496c:	2101      	movs	r1, #1
 800496e:	4618      	mov	r0, r3
 8004970:	f000 ff84 	bl	800587c <RCCEx_PLL2_Config>
 8004974:	4603      	mov	r3, r0
 8004976:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004978:	e012      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	3324      	adds	r3, #36	; 0x24
 800497e:	2101      	movs	r1, #1
 8004980:	4618      	mov	r0, r3
 8004982:	f001 f82d 	bl	80059e0 <RCCEx_PLL3_Config>
 8004986:	4603      	mov	r3, r0
 8004988:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800498a:	e009      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	75fb      	strb	r3, [r7, #23]
      break;
 8004990:	e006      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004992:	bf00      	nop
 8004994:	e004      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004996:	bf00      	nop
 8004998:	e002      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800499a:	bf00      	nop
 800499c:	e000      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800499e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049a0:	7dfb      	ldrb	r3, [r7, #23]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10c      	bne.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80049a6:	4b05      	ldr	r3, [pc, #20]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80049a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049aa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80049b4:	4901      	ldr	r1, [pc, #4]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	658b      	str	r3, [r1, #88]	; 0x58
 80049ba:	e003      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80049bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c0:	7dfb      	ldrb	r3, [r7, #23]
 80049c2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d02f      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049d8:	d00e      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80049da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049de:	d814      	bhi.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x596>
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d015      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80049e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049e8:	d10f      	bne.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049ea:	4baf      	ldr	r3, [pc, #700]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ee:	4aae      	ldr	r2, [pc, #696]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80049f6:	e00c      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	3304      	adds	r3, #4
 80049fc:	2101      	movs	r1, #1
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 ff3c 	bl	800587c <RCCEx_PLL2_Config>
 8004a04:	4603      	mov	r3, r0
 8004a06:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004a08:	e003      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	75fb      	strb	r3, [r7, #23]
      break;
 8004a0e:	e000      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004a10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a12:	7dfb      	ldrb	r3, [r7, #23]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d109      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a18:	4ba3      	ldr	r3, [pc, #652]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a1c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a24:	49a0      	ldr	r1, [pc, #640]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	650b      	str	r3, [r1, #80]	; 0x50
 8004a2a:	e001      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a2c:	7dfb      	ldrb	r3, [r7, #23]
 8004a2e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d032      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a40:	2b03      	cmp	r3, #3
 8004a42:	d81b      	bhi.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004a44:	a201      	add	r2, pc, #4	; (adr r2, 8004a4c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4a:	bf00      	nop
 8004a4c:	08004a83 	.word	0x08004a83
 8004a50:	08004a5d 	.word	0x08004a5d
 8004a54:	08004a6b 	.word	0x08004a6b
 8004a58:	08004a83 	.word	0x08004a83
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a5c:	4b92      	ldr	r3, [pc, #584]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	4a91      	ldr	r2, [pc, #580]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004a68:	e00c      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	2102      	movs	r1, #2
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 ff03 	bl	800587c <RCCEx_PLL2_Config>
 8004a76:	4603      	mov	r3, r0
 8004a78:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004a7a:	e003      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a80:	e000      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004a82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a84:	7dfb      	ldrb	r3, [r7, #23]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d109      	bne.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004a8a:	4b87      	ldr	r3, [pc, #540]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a8e:	f023 0203 	bic.w	r2, r3, #3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a96:	4984      	ldr	r1, [pc, #528]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004a9c:	e001      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a9e:	7dfb      	ldrb	r3, [r7, #23]
 8004aa0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f000 8086 	beq.w	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ab0:	4b7e      	ldr	r3, [pc, #504]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a7d      	ldr	r2, [pc, #500]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004abc:	f7fc fa4a 	bl	8000f54 <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ac2:	e009      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ac4:	f7fc fa46 	bl	8000f54 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b64      	cmp	r3, #100	; 0x64
 8004ad0:	d902      	bls.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	75fb      	strb	r3, [r7, #23]
        break;
 8004ad6:	e005      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ad8:	4b74      	ldr	r3, [pc, #464]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d0ef      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004ae4:	7dfb      	ldrb	r3, [r7, #23]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d166      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004aea:	4b6f      	ldr	r3, [pc, #444]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004aec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004af4:	4053      	eors	r3, r2
 8004af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d013      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004afe:	4b6a      	ldr	r3, [pc, #424]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b06:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b08:	4b67      	ldr	r3, [pc, #412]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0c:	4a66      	ldr	r2, [pc, #408]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b12:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b14:	4b64      	ldr	r3, [pc, #400]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b18:	4a63      	ldr	r2, [pc, #396]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b1e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004b20:	4a61      	ldr	r2, [pc, #388]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b30:	d115      	bne.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b32:	f7fc fa0f 	bl	8000f54 <HAL_GetTick>
 8004b36:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b38:	e00b      	b.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b3a:	f7fc fa0b 	bl	8000f54 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d902      	bls.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	75fb      	strb	r3, [r7, #23]
            break;
 8004b50:	e005      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b52:	4b55      	ldr	r3, [pc, #340]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d0ed      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004b5e:	7dfb      	ldrb	r3, [r7, #23]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d126      	bne.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b72:	d10d      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004b74:	4b4c      	ldr	r3, [pc, #304]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b82:	0919      	lsrs	r1, r3, #4
 8004b84:	4b4a      	ldr	r3, [pc, #296]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004b86:	400b      	ands	r3, r1
 8004b88:	4947      	ldr	r1, [pc, #284]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	610b      	str	r3, [r1, #16]
 8004b8e:	e005      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004b90:	4b45      	ldr	r3, [pc, #276]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	4a44      	ldr	r2, [pc, #272]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b96:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004b9a:	6113      	str	r3, [r2, #16]
 8004b9c:	4b42      	ldr	r3, [pc, #264]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ba6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004baa:	493f      	ldr	r1, [pc, #252]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	670b      	str	r3, [r1, #112]	; 0x70
 8004bb0:	e004      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bb2:	7dfb      	ldrb	r3, [r7, #23]
 8004bb4:	75bb      	strb	r3, [r7, #22]
 8004bb6:	e001      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb8:	7dfb      	ldrb	r3, [r7, #23]
 8004bba:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 8085 	beq.w	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bce:	2b28      	cmp	r3, #40	; 0x28
 8004bd0:	d866      	bhi.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004bd2:	a201      	add	r2, pc, #4	; (adr r2, 8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd8:	08004cb5 	.word	0x08004cb5
 8004bdc:	08004ca1 	.word	0x08004ca1
 8004be0:	08004ca1 	.word	0x08004ca1
 8004be4:	08004ca1 	.word	0x08004ca1
 8004be8:	08004ca1 	.word	0x08004ca1
 8004bec:	08004ca1 	.word	0x08004ca1
 8004bf0:	08004ca1 	.word	0x08004ca1
 8004bf4:	08004ca1 	.word	0x08004ca1
 8004bf8:	08004c7d 	.word	0x08004c7d
 8004bfc:	08004ca1 	.word	0x08004ca1
 8004c00:	08004ca1 	.word	0x08004ca1
 8004c04:	08004ca1 	.word	0x08004ca1
 8004c08:	08004ca1 	.word	0x08004ca1
 8004c0c:	08004ca1 	.word	0x08004ca1
 8004c10:	08004ca1 	.word	0x08004ca1
 8004c14:	08004ca1 	.word	0x08004ca1
 8004c18:	08004c8f 	.word	0x08004c8f
 8004c1c:	08004ca1 	.word	0x08004ca1
 8004c20:	08004ca1 	.word	0x08004ca1
 8004c24:	08004ca1 	.word	0x08004ca1
 8004c28:	08004ca1 	.word	0x08004ca1
 8004c2c:	08004ca1 	.word	0x08004ca1
 8004c30:	08004ca1 	.word	0x08004ca1
 8004c34:	08004ca1 	.word	0x08004ca1
 8004c38:	08004cb5 	.word	0x08004cb5
 8004c3c:	08004ca1 	.word	0x08004ca1
 8004c40:	08004ca1 	.word	0x08004ca1
 8004c44:	08004ca1 	.word	0x08004ca1
 8004c48:	08004ca1 	.word	0x08004ca1
 8004c4c:	08004ca1 	.word	0x08004ca1
 8004c50:	08004ca1 	.word	0x08004ca1
 8004c54:	08004ca1 	.word	0x08004ca1
 8004c58:	08004cb5 	.word	0x08004cb5
 8004c5c:	08004ca1 	.word	0x08004ca1
 8004c60:	08004ca1 	.word	0x08004ca1
 8004c64:	08004ca1 	.word	0x08004ca1
 8004c68:	08004ca1 	.word	0x08004ca1
 8004c6c:	08004ca1 	.word	0x08004ca1
 8004c70:	08004ca1 	.word	0x08004ca1
 8004c74:	08004ca1 	.word	0x08004ca1
 8004c78:	08004cb5 	.word	0x08004cb5
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	3304      	adds	r3, #4
 8004c80:	2101      	movs	r1, #1
 8004c82:	4618      	mov	r0, r3
 8004c84:	f000 fdfa 	bl	800587c <RCCEx_PLL2_Config>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004c8c:	e013      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	3324      	adds	r3, #36	; 0x24
 8004c92:	2101      	movs	r1, #1
 8004c94:	4618      	mov	r0, r3
 8004c96:	f000 fea3 	bl	80059e0 <RCCEx_PLL3_Config>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004c9e:	e00a      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ca4:	e007      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004ca6:	bf00      	nop
 8004ca8:	58024400 	.word	0x58024400
 8004cac:	58024800 	.word	0x58024800
 8004cb0:	00ffffcf 	.word	0x00ffffcf
      break;
 8004cb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cb6:	7dfb      	ldrb	r3, [r7, #23]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d109      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004cbc:	4b96      	ldr	r3, [pc, #600]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cc8:	4993      	ldr	r1, [pc, #588]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	654b      	str	r3, [r1, #84]	; 0x54
 8004cce:	e001      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd0:	7dfb      	ldrb	r3, [r7, #23]
 8004cd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d038      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ce4:	2b05      	cmp	r3, #5
 8004ce6:	d821      	bhi.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004ce8:	a201      	add	r2, pc, #4	; (adr r2, 8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cee:	bf00      	nop
 8004cf0:	08004d33 	.word	0x08004d33
 8004cf4:	08004d09 	.word	0x08004d09
 8004cf8:	08004d1b 	.word	0x08004d1b
 8004cfc:	08004d33 	.word	0x08004d33
 8004d00:	08004d33 	.word	0x08004d33
 8004d04:	08004d33 	.word	0x08004d33
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	3304      	adds	r3, #4
 8004d0c:	2101      	movs	r1, #1
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 fdb4 	bl	800587c <RCCEx_PLL2_Config>
 8004d14:	4603      	mov	r3, r0
 8004d16:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004d18:	e00c      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	3324      	adds	r3, #36	; 0x24
 8004d1e:	2101      	movs	r1, #1
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 fe5d 	bl	80059e0 <RCCEx_PLL3_Config>
 8004d26:	4603      	mov	r3, r0
 8004d28:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004d2a:	e003      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d30:	e000      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8004d32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d34:	7dfb      	ldrb	r3, [r7, #23]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d109      	bne.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004d3a:	4b77      	ldr	r3, [pc, #476]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3e:	f023 0207 	bic.w	r2, r3, #7
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d46:	4974      	ldr	r1, [pc, #464]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	654b      	str	r3, [r1, #84]	; 0x54
 8004d4c:	e001      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d4e:	7dfb      	ldrb	r3, [r7, #23]
 8004d50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0304 	and.w	r3, r3, #4
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d03a      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d64:	2b05      	cmp	r3, #5
 8004d66:	d821      	bhi.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004d68:	a201      	add	r2, pc, #4	; (adr r2, 8004d70 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6e:	bf00      	nop
 8004d70:	08004db3 	.word	0x08004db3
 8004d74:	08004d89 	.word	0x08004d89
 8004d78:	08004d9b 	.word	0x08004d9b
 8004d7c:	08004db3 	.word	0x08004db3
 8004d80:	08004db3 	.word	0x08004db3
 8004d84:	08004db3 	.word	0x08004db3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	3304      	adds	r3, #4
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 fd74 	bl	800587c <RCCEx_PLL2_Config>
 8004d94:	4603      	mov	r3, r0
 8004d96:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004d98:	e00c      	b.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	3324      	adds	r3, #36	; 0x24
 8004d9e:	2101      	movs	r1, #1
 8004da0:	4618      	mov	r0, r3
 8004da2:	f000 fe1d 	bl	80059e0 <RCCEx_PLL3_Config>
 8004da6:	4603      	mov	r3, r0
 8004da8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004daa:	e003      	b.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	75fb      	strb	r3, [r7, #23]
      break;
 8004db0:	e000      	b.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8004db2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004db4:	7dfb      	ldrb	r3, [r7, #23]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10a      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004dba:	4b57      	ldr	r3, [pc, #348]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dbe:	f023 0207 	bic.w	r2, r3, #7
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc8:	4953      	ldr	r1, [pc, #332]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	658b      	str	r3, [r1, #88]	; 0x58
 8004dce:	e001      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd0:	7dfb      	ldrb	r3, [r7, #23]
 8004dd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0320 	and.w	r3, r3, #32
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d04b      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004de6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004dea:	d02e      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004dec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004df0:	d828      	bhi.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df6:	d02a      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dfc:	d822      	bhi.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004dfe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e02:	d026      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004e04:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e08:	d81c      	bhi.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004e0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e0e:	d010      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004e10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e14:	d816      	bhi.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d01d      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8004e1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e1e:	d111      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	3304      	adds	r3, #4
 8004e24:	2100      	movs	r1, #0
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 fd28 	bl	800587c <RCCEx_PLL2_Config>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004e30:	e012      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	3324      	adds	r3, #36	; 0x24
 8004e36:	2102      	movs	r1, #2
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f000 fdd1 	bl	80059e0 <RCCEx_PLL3_Config>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004e42:	e009      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	75fb      	strb	r3, [r7, #23]
      break;
 8004e48:	e006      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004e4a:	bf00      	nop
 8004e4c:	e004      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004e4e:	bf00      	nop
 8004e50:	e002      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004e52:	bf00      	nop
 8004e54:	e000      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004e56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e58:	7dfb      	ldrb	r3, [r7, #23]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10a      	bne.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e5e:	4b2e      	ldr	r3, [pc, #184]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e62:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e6c:	492a      	ldr	r1, [pc, #168]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	654b      	str	r3, [r1, #84]	; 0x54
 8004e72:	e001      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e74:	7dfb      	ldrb	r3, [r7, #23]
 8004e76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d04d      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e8a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004e8e:	d02e      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004e90:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004e94:	d828      	bhi.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e9a:	d02a      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ea0:	d822      	bhi.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004ea2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ea6:	d026      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004ea8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004eac:	d81c      	bhi.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004eae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eb2:	d010      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004eb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eb8:	d816      	bhi.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d01d      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8004ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ec2:	d111      	bne.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	3304      	adds	r3, #4
 8004ec8:	2100      	movs	r1, #0
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 fcd6 	bl	800587c <RCCEx_PLL2_Config>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004ed4:	e012      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	3324      	adds	r3, #36	; 0x24
 8004eda:	2102      	movs	r1, #2
 8004edc:	4618      	mov	r0, r3
 8004ede:	f000 fd7f 	bl	80059e0 <RCCEx_PLL3_Config>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004ee6:	e009      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	75fb      	strb	r3, [r7, #23]
      break;
 8004eec:	e006      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004eee:	bf00      	nop
 8004ef0:	e004      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004ef2:	bf00      	nop
 8004ef4:	e002      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004ef6:	bf00      	nop
 8004ef8:	e000      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004efa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004efc:	7dfb      	ldrb	r3, [r7, #23]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10c      	bne.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f02:	4b05      	ldr	r3, [pc, #20]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f06:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f10:	4901      	ldr	r1, [pc, #4]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	658b      	str	r3, [r1, #88]	; 0x58
 8004f16:	e003      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004f18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f1c:	7dfb      	ldrb	r3, [r7, #23]
 8004f1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d04b      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f32:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004f36:	d02e      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004f38:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004f3c:	d828      	bhi.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f42:	d02a      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004f44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f48:	d822      	bhi.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004f4a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004f4e:	d026      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004f50:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004f54:	d81c      	bhi.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004f56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f5a:	d010      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004f5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f60:	d816      	bhi.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d01d      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f6a:	d111      	bne.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3304      	adds	r3, #4
 8004f70:	2100      	movs	r1, #0
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 fc82 	bl	800587c <RCCEx_PLL2_Config>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004f7c:	e012      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3324      	adds	r3, #36	; 0x24
 8004f82:	2102      	movs	r1, #2
 8004f84:	4618      	mov	r0, r3
 8004f86:	f000 fd2b 	bl	80059e0 <RCCEx_PLL3_Config>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004f8e:	e009      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	75fb      	strb	r3, [r7, #23]
      break;
 8004f94:	e006      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004f96:	bf00      	nop
 8004f98:	e004      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004f9a:	bf00      	nop
 8004f9c:	e002      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004f9e:	bf00      	nop
 8004fa0:	e000      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004fa2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fa4:	7dfb      	ldrb	r3, [r7, #23]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10a      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004faa:	4b9d      	ldr	r3, [pc, #628]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fb8:	4999      	ldr	r1, [pc, #612]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	658b      	str	r3, [r1, #88]	; 0x58
 8004fbe:	e001      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc0:	7dfb      	ldrb	r3, [r7, #23]
 8004fc2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0308 	and.w	r3, r3, #8
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d01a      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fda:	d10a      	bne.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	3324      	adds	r3, #36	; 0x24
 8004fe0:	2102      	movs	r1, #2
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 fcfc 	bl	80059e0 <RCCEx_PLL3_Config>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004ff2:	4b8b      	ldr	r3, [pc, #556]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005000:	4987      	ldr	r1, [pc, #540]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005002:	4313      	orrs	r3, r2
 8005004:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0310 	and.w	r3, r3, #16
 800500e:	2b00      	cmp	r3, #0
 8005010:	d01a      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005018:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800501c:	d10a      	bne.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	3324      	adds	r3, #36	; 0x24
 8005022:	2102      	movs	r1, #2
 8005024:	4618      	mov	r0, r3
 8005026:	f000 fcdb 	bl	80059e0 <RCCEx_PLL3_Config>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d001      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005034:	4b7a      	ldr	r3, [pc, #488]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005038:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005042:	4977      	ldr	r1, [pc, #476]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005044:	4313      	orrs	r3, r2
 8005046:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d034      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800505a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800505e:	d01d      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005060:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005064:	d817      	bhi.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800506a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800506e:	d009      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005070:	e011      	b.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	3304      	adds	r3, #4
 8005076:	2100      	movs	r1, #0
 8005078:	4618      	mov	r0, r3
 800507a:	f000 fbff 	bl	800587c <RCCEx_PLL2_Config>
 800507e:	4603      	mov	r3, r0
 8005080:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005082:	e00c      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	3324      	adds	r3, #36	; 0x24
 8005088:	2102      	movs	r1, #2
 800508a:	4618      	mov	r0, r3
 800508c:	f000 fca8 	bl	80059e0 <RCCEx_PLL3_Config>
 8005090:	4603      	mov	r3, r0
 8005092:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005094:	e003      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	75fb      	strb	r3, [r7, #23]
      break;
 800509a:	e000      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800509c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800509e:	7dfb      	ldrb	r3, [r7, #23]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10a      	bne.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050a4:	4b5e      	ldr	r3, [pc, #376]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80050b2:	495b      	ldr	r1, [pc, #364]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	658b      	str	r3, [r1, #88]	; 0x58
 80050b8:	e001      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ba:	7dfb      	ldrb	r3, [r7, #23]
 80050bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d033      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80050d4:	d01c      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80050d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80050da:	d816      	bhi.n	800510a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80050dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050e0:	d003      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80050e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050e6:	d007      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80050e8:	e00f      	b.n	800510a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050ea:	4b4d      	ldr	r3, [pc, #308]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ee:	4a4c      	ldr	r2, [pc, #304]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80050f6:	e00c      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	3324      	adds	r3, #36	; 0x24
 80050fc:	2101      	movs	r1, #1
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 fc6e 	bl	80059e0 <RCCEx_PLL3_Config>
 8005104:	4603      	mov	r3, r0
 8005106:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005108:	e003      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	75fb      	strb	r3, [r7, #23]
      break;
 800510e:	e000      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005110:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005112:	7dfb      	ldrb	r3, [r7, #23]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10a      	bne.n	800512e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005118:	4b41      	ldr	r3, [pc, #260]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800511a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800511c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005126:	493e      	ldr	r1, [pc, #248]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005128:	4313      	orrs	r3, r2
 800512a:	654b      	str	r3, [r1, #84]	; 0x54
 800512c:	e001      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800512e:	7dfb      	ldrb	r3, [r7, #23]
 8005130:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d029      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8005146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800514a:	d007      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800514c:	e00f      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800514e:	4b34      	ldr	r3, [pc, #208]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005152:	4a33      	ldr	r2, [pc, #204]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005158:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800515a:	e00b      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	3304      	adds	r3, #4
 8005160:	2102      	movs	r1, #2
 8005162:	4618      	mov	r0, r3
 8005164:	f000 fb8a 	bl	800587c <RCCEx_PLL2_Config>
 8005168:	4603      	mov	r3, r0
 800516a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800516c:	e002      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	75fb      	strb	r3, [r7, #23]
      break;
 8005172:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005174:	7dfb      	ldrb	r3, [r7, #23]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d109      	bne.n	800518e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800517a:	4b29      	ldr	r3, [pc, #164]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800517c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800517e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005186:	4926      	ldr	r1, [pc, #152]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005188:	4313      	orrs	r3, r2
 800518a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800518c:	e001      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800518e:	7dfb      	ldrb	r3, [r7, #23]
 8005190:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00a      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	3324      	adds	r3, #36	; 0x24
 80051a2:	2102      	movs	r1, #2
 80051a4:	4618      	mov	r0, r3
 80051a6:	f000 fc1b 	bl	80059e0 <RCCEx_PLL3_Config>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d033      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051c8:	d017      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80051ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051ce:	d811      	bhi.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80051d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051d4:	d013      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80051d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051da:	d80b      	bhi.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d010      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80051e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051e4:	d106      	bne.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051e6:	4b0e      	ldr	r3, [pc, #56]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80051e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ea:	4a0d      	ldr	r2, [pc, #52]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80051ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80051f2:	e007      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	75fb      	strb	r3, [r7, #23]
      break;
 80051f8:	e004      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80051fa:	bf00      	nop
 80051fc:	e002      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80051fe:	bf00      	nop
 8005200:	e000      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005202:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005204:	7dfb      	ldrb	r3, [r7, #23]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10c      	bne.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800520a:	4b05      	ldr	r3, [pc, #20]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800520c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800520e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005216:	4902      	ldr	r1, [pc, #8]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005218:	4313      	orrs	r3, r2
 800521a:	654b      	str	r3, [r1, #84]	; 0x54
 800521c:	e004      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800521e:	bf00      	nop
 8005220:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005224:	7dfb      	ldrb	r3, [r7, #23]
 8005226:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d008      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005234:	4b31      	ldr	r3, [pc, #196]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005238:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005240:	492e      	ldr	r1, [pc, #184]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005242:	4313      	orrs	r3, r2
 8005244:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d009      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005252:	4b2a      	ldr	r3, [pc, #168]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005260:	4926      	ldr	r1, [pc, #152]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005262:	4313      	orrs	r3, r2
 8005264:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d008      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005272:	4b22      	ldr	r3, [pc, #136]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005276:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800527e:	491f      	ldr	r1, [pc, #124]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005280:	4313      	orrs	r3, r2
 8005282:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00d      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005290:	4b1a      	ldr	r3, [pc, #104]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	4a19      	ldr	r2, [pc, #100]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005296:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800529a:	6113      	str	r3, [r2, #16]
 800529c:	4b17      	ldr	r3, [pc, #92]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800529e:	691a      	ldr	r2, [r3, #16]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80052a6:	4915      	ldr	r1, [pc, #84]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	da08      	bge.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80052b4:	4b11      	ldr	r3, [pc, #68]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80052b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052b8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052c0:	490e      	ldr	r1, [pc, #56]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d009      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80052d2:	4b0a      	ldr	r3, [pc, #40]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80052d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e0:	4906      	ldr	r1, [pc, #24]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80052e6:	7dbb      	ldrb	r3, [r7, #22]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80052ec:	2300      	movs	r3, #0
 80052ee:	e000      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3718      	adds	r7, #24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	58024400 	.word	0x58024400

08005300 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005304:	f7ff f85a 	bl	80043bc <HAL_RCC_GetHCLKFreq>
 8005308:	4602      	mov	r2, r0
 800530a:	4b06      	ldr	r3, [pc, #24]	; (8005324 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	091b      	lsrs	r3, r3, #4
 8005310:	f003 0307 	and.w	r3, r3, #7
 8005314:	4904      	ldr	r1, [pc, #16]	; (8005328 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005316:	5ccb      	ldrb	r3, [r1, r3]
 8005318:	f003 031f 	and.w	r3, r3, #31
 800531c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005320:	4618      	mov	r0, r3
 8005322:	bd80      	pop	{r7, pc}
 8005324:	58024400 	.word	0x58024400
 8005328:	0800afe4 	.word	0x0800afe4

0800532c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800532c:	b480      	push	{r7}
 800532e:	b089      	sub	sp, #36	; 0x24
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005334:	4ba1      	ldr	r3, [pc, #644]	; (80055bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005338:	f003 0303 	and.w	r3, r3, #3
 800533c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800533e:	4b9f      	ldr	r3, [pc, #636]	; (80055bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005342:	0b1b      	lsrs	r3, r3, #12
 8005344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005348:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800534a:	4b9c      	ldr	r3, [pc, #624]	; (80055bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800534c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534e:	091b      	lsrs	r3, r3, #4
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005356:	4b99      	ldr	r3, [pc, #612]	; (80055bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800535a:	08db      	lsrs	r3, r3, #3
 800535c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	fb02 f303 	mul.w	r3, r2, r3
 8005366:	ee07 3a90 	vmov	s15, r3
 800536a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800536e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 8111 	beq.w	800559c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	2b02      	cmp	r3, #2
 800537e:	f000 8083 	beq.w	8005488 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	2b02      	cmp	r3, #2
 8005386:	f200 80a1 	bhi.w	80054cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d003      	beq.n	8005398 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d056      	beq.n	8005444 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005396:	e099      	b.n	80054cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005398:	4b88      	ldr	r3, [pc, #544]	; (80055bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0320 	and.w	r3, r3, #32
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d02d      	beq.n	8005400 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80053a4:	4b85      	ldr	r3, [pc, #532]	; (80055bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	08db      	lsrs	r3, r3, #3
 80053aa:	f003 0303 	and.w	r3, r3, #3
 80053ae:	4a84      	ldr	r2, [pc, #528]	; (80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80053b0:	fa22 f303 	lsr.w	r3, r2, r3
 80053b4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	ee07 3a90 	vmov	s15, r3
 80053bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	ee07 3a90 	vmov	s15, r3
 80053c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ce:	4b7b      	ldr	r3, [pc, #492]	; (80055bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053d6:	ee07 3a90 	vmov	s15, r3
 80053da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053de:	ed97 6a03 	vldr	s12, [r7, #12]
 80053e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80055c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80053e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053fa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80053fe:	e087      	b.n	8005510 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	ee07 3a90 	vmov	s15, r3
 8005406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800540a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800540e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005412:	4b6a      	ldr	r3, [pc, #424]	; (80055bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800541a:	ee07 3a90 	vmov	s15, r3
 800541e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005422:	ed97 6a03 	vldr	s12, [r7, #12]
 8005426:	eddf 5a67 	vldr	s11, [pc, #412]	; 80055c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800542a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800542e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005432:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800543a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800543e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005442:	e065      	b.n	8005510 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	ee07 3a90 	vmov	s15, r3
 800544a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800544e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80055cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005456:	4b59      	ldr	r3, [pc, #356]	; (80055bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800545e:	ee07 3a90 	vmov	s15, r3
 8005462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005466:	ed97 6a03 	vldr	s12, [r7, #12]
 800546a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80055c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800546e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005476:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800547a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800547e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005482:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005486:	e043      	b.n	8005510 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	ee07 3a90 	vmov	s15, r3
 800548e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005492:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80055d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800549a:	4b48      	ldr	r3, [pc, #288]	; (80055bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800549c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054a2:	ee07 3a90 	vmov	s15, r3
 80054a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80054ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 80055c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054ca:	e021      	b.n	8005510 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	ee07 3a90 	vmov	s15, r3
 80054d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80055cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80054da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054de:	4b37      	ldr	r3, [pc, #220]	; (80055bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054e6:	ee07 3a90 	vmov	s15, r3
 80054ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80054f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80055c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800550a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800550e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005510:	4b2a      	ldr	r3, [pc, #168]	; (80055bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005514:	0a5b      	lsrs	r3, r3, #9
 8005516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800551a:	ee07 3a90 	vmov	s15, r3
 800551e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005522:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005526:	ee37 7a87 	vadd.f32	s14, s15, s14
 800552a:	edd7 6a07 	vldr	s13, [r7, #28]
 800552e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005532:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005536:	ee17 2a90 	vmov	r2, s15
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800553e:	4b1f      	ldr	r3, [pc, #124]	; (80055bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005542:	0c1b      	lsrs	r3, r3, #16
 8005544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005548:	ee07 3a90 	vmov	s15, r3
 800554c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005550:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005554:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005558:	edd7 6a07 	vldr	s13, [r7, #28]
 800555c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005560:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005564:	ee17 2a90 	vmov	r2, s15
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800556c:	4b13      	ldr	r3, [pc, #76]	; (80055bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800556e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005570:	0e1b      	lsrs	r3, r3, #24
 8005572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005576:	ee07 3a90 	vmov	s15, r3
 800557a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800557e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005582:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005586:	edd7 6a07 	vldr	s13, [r7, #28]
 800558a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800558e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005592:	ee17 2a90 	vmov	r2, s15
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800559a:	e008      	b.n	80055ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	609a      	str	r2, [r3, #8]
}
 80055ae:	bf00      	nop
 80055b0:	3724      	adds	r7, #36	; 0x24
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	58024400 	.word	0x58024400
 80055c0:	03d09000 	.word	0x03d09000
 80055c4:	46000000 	.word	0x46000000
 80055c8:	4c742400 	.word	0x4c742400
 80055cc:	4a742400 	.word	0x4a742400
 80055d0:	4af42400 	.word	0x4af42400

080055d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b089      	sub	sp, #36	; 0x24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80055dc:	4ba1      	ldr	r3, [pc, #644]	; (8005864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e0:	f003 0303 	and.w	r3, r3, #3
 80055e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80055e6:	4b9f      	ldr	r3, [pc, #636]	; (8005864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ea:	0d1b      	lsrs	r3, r3, #20
 80055ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80055f2:	4b9c      	ldr	r3, [pc, #624]	; (8005864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f6:	0a1b      	lsrs	r3, r3, #8
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80055fe:	4b99      	ldr	r3, [pc, #612]	; (8005864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005602:	08db      	lsrs	r3, r3, #3
 8005604:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	fb02 f303 	mul.w	r3, r2, r3
 800560e:	ee07 3a90 	vmov	s15, r3
 8005612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005616:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 8111 	beq.w	8005844 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	2b02      	cmp	r3, #2
 8005626:	f000 8083 	beq.w	8005730 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	2b02      	cmp	r3, #2
 800562e:	f200 80a1 	bhi.w	8005774 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d003      	beq.n	8005640 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d056      	beq.n	80056ec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800563e:	e099      	b.n	8005774 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005640:	4b88      	ldr	r3, [pc, #544]	; (8005864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0320 	and.w	r3, r3, #32
 8005648:	2b00      	cmp	r3, #0
 800564a:	d02d      	beq.n	80056a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800564c:	4b85      	ldr	r3, [pc, #532]	; (8005864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	08db      	lsrs	r3, r3, #3
 8005652:	f003 0303 	and.w	r3, r3, #3
 8005656:	4a84      	ldr	r2, [pc, #528]	; (8005868 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005658:	fa22 f303 	lsr.w	r3, r2, r3
 800565c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	ee07 3a90 	vmov	s15, r3
 8005664:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	ee07 3a90 	vmov	s15, r3
 800566e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005676:	4b7b      	ldr	r3, [pc, #492]	; (8005864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800567e:	ee07 3a90 	vmov	s15, r3
 8005682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005686:	ed97 6a03 	vldr	s12, [r7, #12]
 800568a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800586c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800568e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800569a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800569e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056a2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80056a6:	e087      	b.n	80057b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	ee07 3a90 	vmov	s15, r3
 80056ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005870 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80056b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ba:	4b6a      	ldr	r3, [pc, #424]	; (8005864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056c2:	ee07 3a90 	vmov	s15, r3
 80056c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80056ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800586c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80056d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056ea:	e065      	b.n	80057b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	ee07 3a90 	vmov	s15, r3
 80056f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005874 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80056fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056fe:	4b59      	ldr	r3, [pc, #356]	; (8005864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005706:	ee07 3a90 	vmov	s15, r3
 800570a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800570e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005712:	eddf 5a56 	vldr	s11, [pc, #344]	; 800586c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800571a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800571e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800572a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800572e:	e043      	b.n	80057b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	ee07 3a90 	vmov	s15, r3
 8005736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800573a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005878 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800573e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005742:	4b48      	ldr	r3, [pc, #288]	; (8005864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800574a:	ee07 3a90 	vmov	s15, r3
 800574e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005752:	ed97 6a03 	vldr	s12, [r7, #12]
 8005756:	eddf 5a45 	vldr	s11, [pc, #276]	; 800586c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800575a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800575e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005762:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800576a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800576e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005772:	e021      	b.n	80057b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	ee07 3a90 	vmov	s15, r3
 800577a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800577e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005874 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005786:	4b37      	ldr	r3, [pc, #220]	; (8005864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800578e:	ee07 3a90 	vmov	s15, r3
 8005792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005796:	ed97 6a03 	vldr	s12, [r7, #12]
 800579a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800586c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800579e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057b6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80057b8:	4b2a      	ldr	r3, [pc, #168]	; (8005864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057bc:	0a5b      	lsrs	r3, r3, #9
 80057be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057c2:	ee07 3a90 	vmov	s15, r3
 80057c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80057d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057de:	ee17 2a90 	vmov	r2, s15
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80057e6:	4b1f      	ldr	r3, [pc, #124]	; (8005864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ea:	0c1b      	lsrs	r3, r3, #16
 80057ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057f0:	ee07 3a90 	vmov	s15, r3
 80057f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005800:	edd7 6a07 	vldr	s13, [r7, #28]
 8005804:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005808:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800580c:	ee17 2a90 	vmov	r2, s15
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005814:	4b13      	ldr	r3, [pc, #76]	; (8005864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005818:	0e1b      	lsrs	r3, r3, #24
 800581a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800581e:	ee07 3a90 	vmov	s15, r3
 8005822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005826:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800582a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800582e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005832:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005836:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800583a:	ee17 2a90 	vmov	r2, s15
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005842:	e008      	b.n	8005856 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	609a      	str	r2, [r3, #8]
}
 8005856:	bf00      	nop
 8005858:	3724      	adds	r7, #36	; 0x24
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	58024400 	.word	0x58024400
 8005868:	03d09000 	.word	0x03d09000
 800586c:	46000000 	.word	0x46000000
 8005870:	4c742400 	.word	0x4c742400
 8005874:	4a742400 	.word	0x4a742400
 8005878:	4af42400 	.word	0x4af42400

0800587c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005886:	2300      	movs	r3, #0
 8005888:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800588a:	4b53      	ldr	r3, [pc, #332]	; (80059d8 <RCCEx_PLL2_Config+0x15c>)
 800588c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588e:	f003 0303 	and.w	r3, r3, #3
 8005892:	2b03      	cmp	r3, #3
 8005894:	d101      	bne.n	800589a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e099      	b.n	80059ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800589a:	4b4f      	ldr	r3, [pc, #316]	; (80059d8 <RCCEx_PLL2_Config+0x15c>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a4e      	ldr	r2, [pc, #312]	; (80059d8 <RCCEx_PLL2_Config+0x15c>)
 80058a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80058a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058a6:	f7fb fb55 	bl	8000f54 <HAL_GetTick>
 80058aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80058ac:	e008      	b.n	80058c0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80058ae:	f7fb fb51 	bl	8000f54 <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d901      	bls.n	80058c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e086      	b.n	80059ce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80058c0:	4b45      	ldr	r3, [pc, #276]	; (80059d8 <RCCEx_PLL2_Config+0x15c>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1f0      	bne.n	80058ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80058cc:	4b42      	ldr	r3, [pc, #264]	; (80059d8 <RCCEx_PLL2_Config+0x15c>)
 80058ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	031b      	lsls	r3, r3, #12
 80058da:	493f      	ldr	r1, [pc, #252]	; (80059d8 <RCCEx_PLL2_Config+0x15c>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	628b      	str	r3, [r1, #40]	; 0x28
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	3b01      	subs	r3, #1
 80058e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	3b01      	subs	r3, #1
 80058f0:	025b      	lsls	r3, r3, #9
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	431a      	orrs	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	3b01      	subs	r3, #1
 80058fc:	041b      	lsls	r3, r3, #16
 80058fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005902:	431a      	orrs	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	3b01      	subs	r3, #1
 800590a:	061b      	lsls	r3, r3, #24
 800590c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005910:	4931      	ldr	r1, [pc, #196]	; (80059d8 <RCCEx_PLL2_Config+0x15c>)
 8005912:	4313      	orrs	r3, r2
 8005914:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005916:	4b30      	ldr	r3, [pc, #192]	; (80059d8 <RCCEx_PLL2_Config+0x15c>)
 8005918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	492d      	ldr	r1, [pc, #180]	; (80059d8 <RCCEx_PLL2_Config+0x15c>)
 8005924:	4313      	orrs	r3, r2
 8005926:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005928:	4b2b      	ldr	r3, [pc, #172]	; (80059d8 <RCCEx_PLL2_Config+0x15c>)
 800592a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592c:	f023 0220 	bic.w	r2, r3, #32
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	4928      	ldr	r1, [pc, #160]	; (80059d8 <RCCEx_PLL2_Config+0x15c>)
 8005936:	4313      	orrs	r3, r2
 8005938:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800593a:	4b27      	ldr	r3, [pc, #156]	; (80059d8 <RCCEx_PLL2_Config+0x15c>)
 800593c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593e:	4a26      	ldr	r2, [pc, #152]	; (80059d8 <RCCEx_PLL2_Config+0x15c>)
 8005940:	f023 0310 	bic.w	r3, r3, #16
 8005944:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005946:	4b24      	ldr	r3, [pc, #144]	; (80059d8 <RCCEx_PLL2_Config+0x15c>)
 8005948:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800594a:	4b24      	ldr	r3, [pc, #144]	; (80059dc <RCCEx_PLL2_Config+0x160>)
 800594c:	4013      	ands	r3, r2
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	69d2      	ldr	r2, [r2, #28]
 8005952:	00d2      	lsls	r2, r2, #3
 8005954:	4920      	ldr	r1, [pc, #128]	; (80059d8 <RCCEx_PLL2_Config+0x15c>)
 8005956:	4313      	orrs	r3, r2
 8005958:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800595a:	4b1f      	ldr	r3, [pc, #124]	; (80059d8 <RCCEx_PLL2_Config+0x15c>)
 800595c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595e:	4a1e      	ldr	r2, [pc, #120]	; (80059d8 <RCCEx_PLL2_Config+0x15c>)
 8005960:	f043 0310 	orr.w	r3, r3, #16
 8005964:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d106      	bne.n	800597a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800596c:	4b1a      	ldr	r3, [pc, #104]	; (80059d8 <RCCEx_PLL2_Config+0x15c>)
 800596e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005970:	4a19      	ldr	r2, [pc, #100]	; (80059d8 <RCCEx_PLL2_Config+0x15c>)
 8005972:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005976:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005978:	e00f      	b.n	800599a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d106      	bne.n	800598e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005980:	4b15      	ldr	r3, [pc, #84]	; (80059d8 <RCCEx_PLL2_Config+0x15c>)
 8005982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005984:	4a14      	ldr	r2, [pc, #80]	; (80059d8 <RCCEx_PLL2_Config+0x15c>)
 8005986:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800598a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800598c:	e005      	b.n	800599a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800598e:	4b12      	ldr	r3, [pc, #72]	; (80059d8 <RCCEx_PLL2_Config+0x15c>)
 8005990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005992:	4a11      	ldr	r2, [pc, #68]	; (80059d8 <RCCEx_PLL2_Config+0x15c>)
 8005994:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005998:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800599a:	4b0f      	ldr	r3, [pc, #60]	; (80059d8 <RCCEx_PLL2_Config+0x15c>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a0e      	ldr	r2, [pc, #56]	; (80059d8 <RCCEx_PLL2_Config+0x15c>)
 80059a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059a6:	f7fb fad5 	bl	8000f54 <HAL_GetTick>
 80059aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80059ac:	e008      	b.n	80059c0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80059ae:	f7fb fad1 	bl	8000f54 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d901      	bls.n	80059c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e006      	b.n	80059ce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80059c0:	4b05      	ldr	r3, [pc, #20]	; (80059d8 <RCCEx_PLL2_Config+0x15c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d0f0      	beq.n	80059ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80059cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	58024400 	.word	0x58024400
 80059dc:	ffff0007 	.word	0xffff0007

080059e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059ea:	2300      	movs	r3, #0
 80059ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80059ee:	4b53      	ldr	r3, [pc, #332]	; (8005b3c <RCCEx_PLL3_Config+0x15c>)
 80059f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f2:	f003 0303 	and.w	r3, r3, #3
 80059f6:	2b03      	cmp	r3, #3
 80059f8:	d101      	bne.n	80059fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e099      	b.n	8005b32 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80059fe:	4b4f      	ldr	r3, [pc, #316]	; (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a4e      	ldr	r2, [pc, #312]	; (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005a04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a0a:	f7fb faa3 	bl	8000f54 <HAL_GetTick>
 8005a0e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a10:	e008      	b.n	8005a24 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005a12:	f7fb fa9f 	bl	8000f54 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d901      	bls.n	8005a24 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e086      	b.n	8005b32 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a24:	4b45      	ldr	r3, [pc, #276]	; (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1f0      	bne.n	8005a12 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005a30:	4b42      	ldr	r3, [pc, #264]	; (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a34:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	051b      	lsls	r3, r3, #20
 8005a3e:	493f      	ldr	r1, [pc, #252]	; (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	628b      	str	r3, [r1, #40]	; 0x28
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	3b01      	subs	r3, #1
 8005a54:	025b      	lsls	r3, r3, #9
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	431a      	orrs	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	041b      	lsls	r3, r3, #16
 8005a62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a66:	431a      	orrs	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	061b      	lsls	r3, r3, #24
 8005a70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a74:	4931      	ldr	r1, [pc, #196]	; (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005a7a:	4b30      	ldr	r3, [pc, #192]	; (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	492d      	ldr	r1, [pc, #180]	; (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005a8c:	4b2b      	ldr	r3, [pc, #172]	; (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a90:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	4928      	ldr	r1, [pc, #160]	; (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005a9e:	4b27      	ldr	r3, [pc, #156]	; (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa2:	4a26      	ldr	r2, [pc, #152]	; (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005aa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005aa8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005aaa:	4b24      	ldr	r3, [pc, #144]	; (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005aac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aae:	4b24      	ldr	r3, [pc, #144]	; (8005b40 <RCCEx_PLL3_Config+0x160>)
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	69d2      	ldr	r2, [r2, #28]
 8005ab6:	00d2      	lsls	r2, r2, #3
 8005ab8:	4920      	ldr	r1, [pc, #128]	; (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005abe:	4b1f      	ldr	r3, [pc, #124]	; (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac2:	4a1e      	ldr	r2, [pc, #120]	; (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ac8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d106      	bne.n	8005ade <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005ad0:	4b1a      	ldr	r3, [pc, #104]	; (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad4:	4a19      	ldr	r2, [pc, #100]	; (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005ad6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ada:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005adc:	e00f      	b.n	8005afe <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d106      	bne.n	8005af2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005ae4:	4b15      	ldr	r3, [pc, #84]	; (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae8:	4a14      	ldr	r2, [pc, #80]	; (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005aea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005aee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005af0:	e005      	b.n	8005afe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005af2:	4b12      	ldr	r3, [pc, #72]	; (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af6:	4a11      	ldr	r2, [pc, #68]	; (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005af8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005afc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005afe:	4b0f      	ldr	r3, [pc, #60]	; (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a0e      	ldr	r2, [pc, #56]	; (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b0a:	f7fb fa23 	bl	8000f54 <HAL_GetTick>
 8005b0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b10:	e008      	b.n	8005b24 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005b12:	f7fb fa1f 	bl	8000f54 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d901      	bls.n	8005b24 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e006      	b.n	8005b32 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b24:	4b05      	ldr	r3, [pc, #20]	; (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d0f0      	beq.n	8005b12 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	58024400 	.word	0x58024400
 8005b40:	ffff0007 	.word	0xffff0007

08005b44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d101      	bne.n	8005b56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e042      	b.n	8005bdc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d106      	bne.n	8005b6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f7fb f8a9 	bl	8000cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2224      	movs	r2, #36	; 0x24
 8005b72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 0201 	bic.w	r2, r2, #1
 8005b84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f82c 	bl	8005be4 <UART_SetConfig>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d101      	bne.n	8005b96 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e022      	b.n	8005bdc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d002      	beq.n	8005ba4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 fd88 	bl	80066b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685a      	ldr	r2, [r3, #4]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f042 0201 	orr.w	r2, r2, #1
 8005bd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 fe0f 	bl	80067f8 <UART_CheckIdleState>
 8005bda:	4603      	mov	r3, r0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005be8:	b092      	sub	sp, #72	; 0x48
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	689a      	ldr	r2, [r3, #8]
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	431a      	orrs	r2, r3
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	431a      	orrs	r2, r3
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	69db      	ldr	r3, [r3, #28]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	4bbe      	ldr	r3, [pc, #760]	; (8005f0c <UART_SetConfig+0x328>)
 8005c14:	4013      	ands	r3, r2
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	6812      	ldr	r2, [r2, #0]
 8005c1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c1c:	430b      	orrs	r3, r1
 8005c1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	68da      	ldr	r2, [r3, #12]
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4ab3      	ldr	r2, [pc, #716]	; (8005f10 <UART_SetConfig+0x32c>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d004      	beq.n	8005c50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689a      	ldr	r2, [r3, #8]
 8005c56:	4baf      	ldr	r3, [pc, #700]	; (8005f14 <UART_SetConfig+0x330>)
 8005c58:	4013      	ands	r3, r2
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	6812      	ldr	r2, [r2, #0]
 8005c5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c60:	430b      	orrs	r3, r1
 8005c62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6a:	f023 010f 	bic.w	r1, r3, #15
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4aa6      	ldr	r2, [pc, #664]	; (8005f18 <UART_SetConfig+0x334>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d177      	bne.n	8005d74 <UART_SetConfig+0x190>
 8005c84:	4ba5      	ldr	r3, [pc, #660]	; (8005f1c <UART_SetConfig+0x338>)
 8005c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c8c:	2b28      	cmp	r3, #40	; 0x28
 8005c8e:	d86d      	bhi.n	8005d6c <UART_SetConfig+0x188>
 8005c90:	a201      	add	r2, pc, #4	; (adr r2, 8005c98 <UART_SetConfig+0xb4>)
 8005c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c96:	bf00      	nop
 8005c98:	08005d3d 	.word	0x08005d3d
 8005c9c:	08005d6d 	.word	0x08005d6d
 8005ca0:	08005d6d 	.word	0x08005d6d
 8005ca4:	08005d6d 	.word	0x08005d6d
 8005ca8:	08005d6d 	.word	0x08005d6d
 8005cac:	08005d6d 	.word	0x08005d6d
 8005cb0:	08005d6d 	.word	0x08005d6d
 8005cb4:	08005d6d 	.word	0x08005d6d
 8005cb8:	08005d45 	.word	0x08005d45
 8005cbc:	08005d6d 	.word	0x08005d6d
 8005cc0:	08005d6d 	.word	0x08005d6d
 8005cc4:	08005d6d 	.word	0x08005d6d
 8005cc8:	08005d6d 	.word	0x08005d6d
 8005ccc:	08005d6d 	.word	0x08005d6d
 8005cd0:	08005d6d 	.word	0x08005d6d
 8005cd4:	08005d6d 	.word	0x08005d6d
 8005cd8:	08005d4d 	.word	0x08005d4d
 8005cdc:	08005d6d 	.word	0x08005d6d
 8005ce0:	08005d6d 	.word	0x08005d6d
 8005ce4:	08005d6d 	.word	0x08005d6d
 8005ce8:	08005d6d 	.word	0x08005d6d
 8005cec:	08005d6d 	.word	0x08005d6d
 8005cf0:	08005d6d 	.word	0x08005d6d
 8005cf4:	08005d6d 	.word	0x08005d6d
 8005cf8:	08005d55 	.word	0x08005d55
 8005cfc:	08005d6d 	.word	0x08005d6d
 8005d00:	08005d6d 	.word	0x08005d6d
 8005d04:	08005d6d 	.word	0x08005d6d
 8005d08:	08005d6d 	.word	0x08005d6d
 8005d0c:	08005d6d 	.word	0x08005d6d
 8005d10:	08005d6d 	.word	0x08005d6d
 8005d14:	08005d6d 	.word	0x08005d6d
 8005d18:	08005d5d 	.word	0x08005d5d
 8005d1c:	08005d6d 	.word	0x08005d6d
 8005d20:	08005d6d 	.word	0x08005d6d
 8005d24:	08005d6d 	.word	0x08005d6d
 8005d28:	08005d6d 	.word	0x08005d6d
 8005d2c:	08005d6d 	.word	0x08005d6d
 8005d30:	08005d6d 	.word	0x08005d6d
 8005d34:	08005d6d 	.word	0x08005d6d
 8005d38:	08005d65 	.word	0x08005d65
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d42:	e222      	b.n	800618a <UART_SetConfig+0x5a6>
 8005d44:	2304      	movs	r3, #4
 8005d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d4a:	e21e      	b.n	800618a <UART_SetConfig+0x5a6>
 8005d4c:	2308      	movs	r3, #8
 8005d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d52:	e21a      	b.n	800618a <UART_SetConfig+0x5a6>
 8005d54:	2310      	movs	r3, #16
 8005d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d5a:	e216      	b.n	800618a <UART_SetConfig+0x5a6>
 8005d5c:	2320      	movs	r3, #32
 8005d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d62:	e212      	b.n	800618a <UART_SetConfig+0x5a6>
 8005d64:	2340      	movs	r3, #64	; 0x40
 8005d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d6a:	e20e      	b.n	800618a <UART_SetConfig+0x5a6>
 8005d6c:	2380      	movs	r3, #128	; 0x80
 8005d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d72:	e20a      	b.n	800618a <UART_SetConfig+0x5a6>
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a69      	ldr	r2, [pc, #420]	; (8005f20 <UART_SetConfig+0x33c>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d130      	bne.n	8005de0 <UART_SetConfig+0x1fc>
 8005d7e:	4b67      	ldr	r3, [pc, #412]	; (8005f1c <UART_SetConfig+0x338>)
 8005d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d82:	f003 0307 	and.w	r3, r3, #7
 8005d86:	2b05      	cmp	r3, #5
 8005d88:	d826      	bhi.n	8005dd8 <UART_SetConfig+0x1f4>
 8005d8a:	a201      	add	r2, pc, #4	; (adr r2, 8005d90 <UART_SetConfig+0x1ac>)
 8005d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d90:	08005da9 	.word	0x08005da9
 8005d94:	08005db1 	.word	0x08005db1
 8005d98:	08005db9 	.word	0x08005db9
 8005d9c:	08005dc1 	.word	0x08005dc1
 8005da0:	08005dc9 	.word	0x08005dc9
 8005da4:	08005dd1 	.word	0x08005dd1
 8005da8:	2300      	movs	r3, #0
 8005daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dae:	e1ec      	b.n	800618a <UART_SetConfig+0x5a6>
 8005db0:	2304      	movs	r3, #4
 8005db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005db6:	e1e8      	b.n	800618a <UART_SetConfig+0x5a6>
 8005db8:	2308      	movs	r3, #8
 8005dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dbe:	e1e4      	b.n	800618a <UART_SetConfig+0x5a6>
 8005dc0:	2310      	movs	r3, #16
 8005dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dc6:	e1e0      	b.n	800618a <UART_SetConfig+0x5a6>
 8005dc8:	2320      	movs	r3, #32
 8005dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dce:	e1dc      	b.n	800618a <UART_SetConfig+0x5a6>
 8005dd0:	2340      	movs	r3, #64	; 0x40
 8005dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dd6:	e1d8      	b.n	800618a <UART_SetConfig+0x5a6>
 8005dd8:	2380      	movs	r3, #128	; 0x80
 8005dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dde:	e1d4      	b.n	800618a <UART_SetConfig+0x5a6>
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a4f      	ldr	r2, [pc, #316]	; (8005f24 <UART_SetConfig+0x340>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d130      	bne.n	8005e4c <UART_SetConfig+0x268>
 8005dea:	4b4c      	ldr	r3, [pc, #304]	; (8005f1c <UART_SetConfig+0x338>)
 8005dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dee:	f003 0307 	and.w	r3, r3, #7
 8005df2:	2b05      	cmp	r3, #5
 8005df4:	d826      	bhi.n	8005e44 <UART_SetConfig+0x260>
 8005df6:	a201      	add	r2, pc, #4	; (adr r2, 8005dfc <UART_SetConfig+0x218>)
 8005df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfc:	08005e15 	.word	0x08005e15
 8005e00:	08005e1d 	.word	0x08005e1d
 8005e04:	08005e25 	.word	0x08005e25
 8005e08:	08005e2d 	.word	0x08005e2d
 8005e0c:	08005e35 	.word	0x08005e35
 8005e10:	08005e3d 	.word	0x08005e3d
 8005e14:	2300      	movs	r3, #0
 8005e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e1a:	e1b6      	b.n	800618a <UART_SetConfig+0x5a6>
 8005e1c:	2304      	movs	r3, #4
 8005e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e22:	e1b2      	b.n	800618a <UART_SetConfig+0x5a6>
 8005e24:	2308      	movs	r3, #8
 8005e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e2a:	e1ae      	b.n	800618a <UART_SetConfig+0x5a6>
 8005e2c:	2310      	movs	r3, #16
 8005e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e32:	e1aa      	b.n	800618a <UART_SetConfig+0x5a6>
 8005e34:	2320      	movs	r3, #32
 8005e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e3a:	e1a6      	b.n	800618a <UART_SetConfig+0x5a6>
 8005e3c:	2340      	movs	r3, #64	; 0x40
 8005e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e42:	e1a2      	b.n	800618a <UART_SetConfig+0x5a6>
 8005e44:	2380      	movs	r3, #128	; 0x80
 8005e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e4a:	e19e      	b.n	800618a <UART_SetConfig+0x5a6>
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a35      	ldr	r2, [pc, #212]	; (8005f28 <UART_SetConfig+0x344>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d130      	bne.n	8005eb8 <UART_SetConfig+0x2d4>
 8005e56:	4b31      	ldr	r3, [pc, #196]	; (8005f1c <UART_SetConfig+0x338>)
 8005e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e5a:	f003 0307 	and.w	r3, r3, #7
 8005e5e:	2b05      	cmp	r3, #5
 8005e60:	d826      	bhi.n	8005eb0 <UART_SetConfig+0x2cc>
 8005e62:	a201      	add	r2, pc, #4	; (adr r2, 8005e68 <UART_SetConfig+0x284>)
 8005e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e68:	08005e81 	.word	0x08005e81
 8005e6c:	08005e89 	.word	0x08005e89
 8005e70:	08005e91 	.word	0x08005e91
 8005e74:	08005e99 	.word	0x08005e99
 8005e78:	08005ea1 	.word	0x08005ea1
 8005e7c:	08005ea9 	.word	0x08005ea9
 8005e80:	2300      	movs	r3, #0
 8005e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e86:	e180      	b.n	800618a <UART_SetConfig+0x5a6>
 8005e88:	2304      	movs	r3, #4
 8005e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e8e:	e17c      	b.n	800618a <UART_SetConfig+0x5a6>
 8005e90:	2308      	movs	r3, #8
 8005e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e96:	e178      	b.n	800618a <UART_SetConfig+0x5a6>
 8005e98:	2310      	movs	r3, #16
 8005e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e9e:	e174      	b.n	800618a <UART_SetConfig+0x5a6>
 8005ea0:	2320      	movs	r3, #32
 8005ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ea6:	e170      	b.n	800618a <UART_SetConfig+0x5a6>
 8005ea8:	2340      	movs	r3, #64	; 0x40
 8005eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eae:	e16c      	b.n	800618a <UART_SetConfig+0x5a6>
 8005eb0:	2380      	movs	r3, #128	; 0x80
 8005eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eb6:	e168      	b.n	800618a <UART_SetConfig+0x5a6>
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a1b      	ldr	r2, [pc, #108]	; (8005f2c <UART_SetConfig+0x348>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d142      	bne.n	8005f48 <UART_SetConfig+0x364>
 8005ec2:	4b16      	ldr	r3, [pc, #88]	; (8005f1c <UART_SetConfig+0x338>)
 8005ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec6:	f003 0307 	and.w	r3, r3, #7
 8005eca:	2b05      	cmp	r3, #5
 8005ecc:	d838      	bhi.n	8005f40 <UART_SetConfig+0x35c>
 8005ece:	a201      	add	r2, pc, #4	; (adr r2, 8005ed4 <UART_SetConfig+0x2f0>)
 8005ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed4:	08005eed 	.word	0x08005eed
 8005ed8:	08005ef5 	.word	0x08005ef5
 8005edc:	08005efd 	.word	0x08005efd
 8005ee0:	08005f05 	.word	0x08005f05
 8005ee4:	08005f31 	.word	0x08005f31
 8005ee8:	08005f39 	.word	0x08005f39
 8005eec:	2300      	movs	r3, #0
 8005eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ef2:	e14a      	b.n	800618a <UART_SetConfig+0x5a6>
 8005ef4:	2304      	movs	r3, #4
 8005ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005efa:	e146      	b.n	800618a <UART_SetConfig+0x5a6>
 8005efc:	2308      	movs	r3, #8
 8005efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f02:	e142      	b.n	800618a <UART_SetConfig+0x5a6>
 8005f04:	2310      	movs	r3, #16
 8005f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f0a:	e13e      	b.n	800618a <UART_SetConfig+0x5a6>
 8005f0c:	cfff69f3 	.word	0xcfff69f3
 8005f10:	58000c00 	.word	0x58000c00
 8005f14:	11fff4ff 	.word	0x11fff4ff
 8005f18:	40011000 	.word	0x40011000
 8005f1c:	58024400 	.word	0x58024400
 8005f20:	40004400 	.word	0x40004400
 8005f24:	40004800 	.word	0x40004800
 8005f28:	40004c00 	.word	0x40004c00
 8005f2c:	40005000 	.word	0x40005000
 8005f30:	2320      	movs	r3, #32
 8005f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f36:	e128      	b.n	800618a <UART_SetConfig+0x5a6>
 8005f38:	2340      	movs	r3, #64	; 0x40
 8005f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f3e:	e124      	b.n	800618a <UART_SetConfig+0x5a6>
 8005f40:	2380      	movs	r3, #128	; 0x80
 8005f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f46:	e120      	b.n	800618a <UART_SetConfig+0x5a6>
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4acb      	ldr	r2, [pc, #812]	; (800627c <UART_SetConfig+0x698>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d176      	bne.n	8006040 <UART_SetConfig+0x45c>
 8005f52:	4bcb      	ldr	r3, [pc, #812]	; (8006280 <UART_SetConfig+0x69c>)
 8005f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f5a:	2b28      	cmp	r3, #40	; 0x28
 8005f5c:	d86c      	bhi.n	8006038 <UART_SetConfig+0x454>
 8005f5e:	a201      	add	r2, pc, #4	; (adr r2, 8005f64 <UART_SetConfig+0x380>)
 8005f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f64:	08006009 	.word	0x08006009
 8005f68:	08006039 	.word	0x08006039
 8005f6c:	08006039 	.word	0x08006039
 8005f70:	08006039 	.word	0x08006039
 8005f74:	08006039 	.word	0x08006039
 8005f78:	08006039 	.word	0x08006039
 8005f7c:	08006039 	.word	0x08006039
 8005f80:	08006039 	.word	0x08006039
 8005f84:	08006011 	.word	0x08006011
 8005f88:	08006039 	.word	0x08006039
 8005f8c:	08006039 	.word	0x08006039
 8005f90:	08006039 	.word	0x08006039
 8005f94:	08006039 	.word	0x08006039
 8005f98:	08006039 	.word	0x08006039
 8005f9c:	08006039 	.word	0x08006039
 8005fa0:	08006039 	.word	0x08006039
 8005fa4:	08006019 	.word	0x08006019
 8005fa8:	08006039 	.word	0x08006039
 8005fac:	08006039 	.word	0x08006039
 8005fb0:	08006039 	.word	0x08006039
 8005fb4:	08006039 	.word	0x08006039
 8005fb8:	08006039 	.word	0x08006039
 8005fbc:	08006039 	.word	0x08006039
 8005fc0:	08006039 	.word	0x08006039
 8005fc4:	08006021 	.word	0x08006021
 8005fc8:	08006039 	.word	0x08006039
 8005fcc:	08006039 	.word	0x08006039
 8005fd0:	08006039 	.word	0x08006039
 8005fd4:	08006039 	.word	0x08006039
 8005fd8:	08006039 	.word	0x08006039
 8005fdc:	08006039 	.word	0x08006039
 8005fe0:	08006039 	.word	0x08006039
 8005fe4:	08006029 	.word	0x08006029
 8005fe8:	08006039 	.word	0x08006039
 8005fec:	08006039 	.word	0x08006039
 8005ff0:	08006039 	.word	0x08006039
 8005ff4:	08006039 	.word	0x08006039
 8005ff8:	08006039 	.word	0x08006039
 8005ffc:	08006039 	.word	0x08006039
 8006000:	08006039 	.word	0x08006039
 8006004:	08006031 	.word	0x08006031
 8006008:	2301      	movs	r3, #1
 800600a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800600e:	e0bc      	b.n	800618a <UART_SetConfig+0x5a6>
 8006010:	2304      	movs	r3, #4
 8006012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006016:	e0b8      	b.n	800618a <UART_SetConfig+0x5a6>
 8006018:	2308      	movs	r3, #8
 800601a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800601e:	e0b4      	b.n	800618a <UART_SetConfig+0x5a6>
 8006020:	2310      	movs	r3, #16
 8006022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006026:	e0b0      	b.n	800618a <UART_SetConfig+0x5a6>
 8006028:	2320      	movs	r3, #32
 800602a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800602e:	e0ac      	b.n	800618a <UART_SetConfig+0x5a6>
 8006030:	2340      	movs	r3, #64	; 0x40
 8006032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006036:	e0a8      	b.n	800618a <UART_SetConfig+0x5a6>
 8006038:	2380      	movs	r3, #128	; 0x80
 800603a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800603e:	e0a4      	b.n	800618a <UART_SetConfig+0x5a6>
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a8f      	ldr	r2, [pc, #572]	; (8006284 <UART_SetConfig+0x6a0>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d130      	bne.n	80060ac <UART_SetConfig+0x4c8>
 800604a:	4b8d      	ldr	r3, [pc, #564]	; (8006280 <UART_SetConfig+0x69c>)
 800604c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800604e:	f003 0307 	and.w	r3, r3, #7
 8006052:	2b05      	cmp	r3, #5
 8006054:	d826      	bhi.n	80060a4 <UART_SetConfig+0x4c0>
 8006056:	a201      	add	r2, pc, #4	; (adr r2, 800605c <UART_SetConfig+0x478>)
 8006058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605c:	08006075 	.word	0x08006075
 8006060:	0800607d 	.word	0x0800607d
 8006064:	08006085 	.word	0x08006085
 8006068:	0800608d 	.word	0x0800608d
 800606c:	08006095 	.word	0x08006095
 8006070:	0800609d 	.word	0x0800609d
 8006074:	2300      	movs	r3, #0
 8006076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800607a:	e086      	b.n	800618a <UART_SetConfig+0x5a6>
 800607c:	2304      	movs	r3, #4
 800607e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006082:	e082      	b.n	800618a <UART_SetConfig+0x5a6>
 8006084:	2308      	movs	r3, #8
 8006086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800608a:	e07e      	b.n	800618a <UART_SetConfig+0x5a6>
 800608c:	2310      	movs	r3, #16
 800608e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006092:	e07a      	b.n	800618a <UART_SetConfig+0x5a6>
 8006094:	2320      	movs	r3, #32
 8006096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800609a:	e076      	b.n	800618a <UART_SetConfig+0x5a6>
 800609c:	2340      	movs	r3, #64	; 0x40
 800609e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060a2:	e072      	b.n	800618a <UART_SetConfig+0x5a6>
 80060a4:	2380      	movs	r3, #128	; 0x80
 80060a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060aa:	e06e      	b.n	800618a <UART_SetConfig+0x5a6>
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a75      	ldr	r2, [pc, #468]	; (8006288 <UART_SetConfig+0x6a4>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d130      	bne.n	8006118 <UART_SetConfig+0x534>
 80060b6:	4b72      	ldr	r3, [pc, #456]	; (8006280 <UART_SetConfig+0x69c>)
 80060b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ba:	f003 0307 	and.w	r3, r3, #7
 80060be:	2b05      	cmp	r3, #5
 80060c0:	d826      	bhi.n	8006110 <UART_SetConfig+0x52c>
 80060c2:	a201      	add	r2, pc, #4	; (adr r2, 80060c8 <UART_SetConfig+0x4e4>)
 80060c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c8:	080060e1 	.word	0x080060e1
 80060cc:	080060e9 	.word	0x080060e9
 80060d0:	080060f1 	.word	0x080060f1
 80060d4:	080060f9 	.word	0x080060f9
 80060d8:	08006101 	.word	0x08006101
 80060dc:	08006109 	.word	0x08006109
 80060e0:	2300      	movs	r3, #0
 80060e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060e6:	e050      	b.n	800618a <UART_SetConfig+0x5a6>
 80060e8:	2304      	movs	r3, #4
 80060ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ee:	e04c      	b.n	800618a <UART_SetConfig+0x5a6>
 80060f0:	2308      	movs	r3, #8
 80060f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060f6:	e048      	b.n	800618a <UART_SetConfig+0x5a6>
 80060f8:	2310      	movs	r3, #16
 80060fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060fe:	e044      	b.n	800618a <UART_SetConfig+0x5a6>
 8006100:	2320      	movs	r3, #32
 8006102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006106:	e040      	b.n	800618a <UART_SetConfig+0x5a6>
 8006108:	2340      	movs	r3, #64	; 0x40
 800610a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800610e:	e03c      	b.n	800618a <UART_SetConfig+0x5a6>
 8006110:	2380      	movs	r3, #128	; 0x80
 8006112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006116:	e038      	b.n	800618a <UART_SetConfig+0x5a6>
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a5b      	ldr	r2, [pc, #364]	; (800628c <UART_SetConfig+0x6a8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d130      	bne.n	8006184 <UART_SetConfig+0x5a0>
 8006122:	4b57      	ldr	r3, [pc, #348]	; (8006280 <UART_SetConfig+0x69c>)
 8006124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006126:	f003 0307 	and.w	r3, r3, #7
 800612a:	2b05      	cmp	r3, #5
 800612c:	d826      	bhi.n	800617c <UART_SetConfig+0x598>
 800612e:	a201      	add	r2, pc, #4	; (adr r2, 8006134 <UART_SetConfig+0x550>)
 8006130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006134:	0800614d 	.word	0x0800614d
 8006138:	08006155 	.word	0x08006155
 800613c:	0800615d 	.word	0x0800615d
 8006140:	08006165 	.word	0x08006165
 8006144:	0800616d 	.word	0x0800616d
 8006148:	08006175 	.word	0x08006175
 800614c:	2302      	movs	r3, #2
 800614e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006152:	e01a      	b.n	800618a <UART_SetConfig+0x5a6>
 8006154:	2304      	movs	r3, #4
 8006156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800615a:	e016      	b.n	800618a <UART_SetConfig+0x5a6>
 800615c:	2308      	movs	r3, #8
 800615e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006162:	e012      	b.n	800618a <UART_SetConfig+0x5a6>
 8006164:	2310      	movs	r3, #16
 8006166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800616a:	e00e      	b.n	800618a <UART_SetConfig+0x5a6>
 800616c:	2320      	movs	r3, #32
 800616e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006172:	e00a      	b.n	800618a <UART_SetConfig+0x5a6>
 8006174:	2340      	movs	r3, #64	; 0x40
 8006176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800617a:	e006      	b.n	800618a <UART_SetConfig+0x5a6>
 800617c:	2380      	movs	r3, #128	; 0x80
 800617e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006182:	e002      	b.n	800618a <UART_SetConfig+0x5a6>
 8006184:	2380      	movs	r3, #128	; 0x80
 8006186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a3f      	ldr	r2, [pc, #252]	; (800628c <UART_SetConfig+0x6a8>)
 8006190:	4293      	cmp	r3, r2
 8006192:	f040 80f8 	bne.w	8006386 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006196:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800619a:	2b20      	cmp	r3, #32
 800619c:	dc46      	bgt.n	800622c <UART_SetConfig+0x648>
 800619e:	2b02      	cmp	r3, #2
 80061a0:	f2c0 8082 	blt.w	80062a8 <UART_SetConfig+0x6c4>
 80061a4:	3b02      	subs	r3, #2
 80061a6:	2b1e      	cmp	r3, #30
 80061a8:	d87e      	bhi.n	80062a8 <UART_SetConfig+0x6c4>
 80061aa:	a201      	add	r2, pc, #4	; (adr r2, 80061b0 <UART_SetConfig+0x5cc>)
 80061ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b0:	08006233 	.word	0x08006233
 80061b4:	080062a9 	.word	0x080062a9
 80061b8:	0800623b 	.word	0x0800623b
 80061bc:	080062a9 	.word	0x080062a9
 80061c0:	080062a9 	.word	0x080062a9
 80061c4:	080062a9 	.word	0x080062a9
 80061c8:	0800624b 	.word	0x0800624b
 80061cc:	080062a9 	.word	0x080062a9
 80061d0:	080062a9 	.word	0x080062a9
 80061d4:	080062a9 	.word	0x080062a9
 80061d8:	080062a9 	.word	0x080062a9
 80061dc:	080062a9 	.word	0x080062a9
 80061e0:	080062a9 	.word	0x080062a9
 80061e4:	080062a9 	.word	0x080062a9
 80061e8:	0800625b 	.word	0x0800625b
 80061ec:	080062a9 	.word	0x080062a9
 80061f0:	080062a9 	.word	0x080062a9
 80061f4:	080062a9 	.word	0x080062a9
 80061f8:	080062a9 	.word	0x080062a9
 80061fc:	080062a9 	.word	0x080062a9
 8006200:	080062a9 	.word	0x080062a9
 8006204:	080062a9 	.word	0x080062a9
 8006208:	080062a9 	.word	0x080062a9
 800620c:	080062a9 	.word	0x080062a9
 8006210:	080062a9 	.word	0x080062a9
 8006214:	080062a9 	.word	0x080062a9
 8006218:	080062a9 	.word	0x080062a9
 800621c:	080062a9 	.word	0x080062a9
 8006220:	080062a9 	.word	0x080062a9
 8006224:	080062a9 	.word	0x080062a9
 8006228:	0800629b 	.word	0x0800629b
 800622c:	2b40      	cmp	r3, #64	; 0x40
 800622e:	d037      	beq.n	80062a0 <UART_SetConfig+0x6bc>
 8006230:	e03a      	b.n	80062a8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006232:	f7ff f865 	bl	8005300 <HAL_RCCEx_GetD3PCLK1Freq>
 8006236:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006238:	e03c      	b.n	80062b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800623a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800623e:	4618      	mov	r0, r3
 8006240:	f7ff f874 	bl	800532c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006246:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006248:	e034      	b.n	80062b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800624a:	f107 0318 	add.w	r3, r7, #24
 800624e:	4618      	mov	r0, r3
 8006250:	f7ff f9c0 	bl	80055d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006258:	e02c      	b.n	80062b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800625a:	4b09      	ldr	r3, [pc, #36]	; (8006280 <UART_SetConfig+0x69c>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0320 	and.w	r3, r3, #32
 8006262:	2b00      	cmp	r3, #0
 8006264:	d016      	beq.n	8006294 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006266:	4b06      	ldr	r3, [pc, #24]	; (8006280 <UART_SetConfig+0x69c>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	08db      	lsrs	r3, r3, #3
 800626c:	f003 0303 	and.w	r3, r3, #3
 8006270:	4a07      	ldr	r2, [pc, #28]	; (8006290 <UART_SetConfig+0x6ac>)
 8006272:	fa22 f303 	lsr.w	r3, r2, r3
 8006276:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006278:	e01c      	b.n	80062b4 <UART_SetConfig+0x6d0>
 800627a:	bf00      	nop
 800627c:	40011400 	.word	0x40011400
 8006280:	58024400 	.word	0x58024400
 8006284:	40007800 	.word	0x40007800
 8006288:	40007c00 	.word	0x40007c00
 800628c:	58000c00 	.word	0x58000c00
 8006290:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006294:	4b9d      	ldr	r3, [pc, #628]	; (800650c <UART_SetConfig+0x928>)
 8006296:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006298:	e00c      	b.n	80062b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800629a:	4b9d      	ldr	r3, [pc, #628]	; (8006510 <UART_SetConfig+0x92c>)
 800629c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800629e:	e009      	b.n	80062b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062a6:	e005      	b.n	80062b4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80062a8:	2300      	movs	r3, #0
 80062aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80062b2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f000 81de 	beq.w	8006678 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c0:	4a94      	ldr	r2, [pc, #592]	; (8006514 <UART_SetConfig+0x930>)
 80062c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062c6:	461a      	mov	r2, r3
 80062c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80062ce:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	685a      	ldr	r2, [r3, #4]
 80062d4:	4613      	mov	r3, r2
 80062d6:	005b      	lsls	r3, r3, #1
 80062d8:	4413      	add	r3, r2
 80062da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062dc:	429a      	cmp	r2, r3
 80062de:	d305      	bcc.n	80062ec <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d903      	bls.n	80062f4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80062f2:	e1c1      	b.n	8006678 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f6:	2200      	movs	r2, #0
 80062f8:	60bb      	str	r3, [r7, #8]
 80062fa:	60fa      	str	r2, [r7, #12]
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006300:	4a84      	ldr	r2, [pc, #528]	; (8006514 <UART_SetConfig+0x930>)
 8006302:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006306:	b29b      	uxth	r3, r3
 8006308:	2200      	movs	r2, #0
 800630a:	603b      	str	r3, [r7, #0]
 800630c:	607a      	str	r2, [r7, #4]
 800630e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006312:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006316:	f7f9 ffdf 	bl	80002d8 <__aeabi_uldivmod>
 800631a:	4602      	mov	r2, r0
 800631c:	460b      	mov	r3, r1
 800631e:	4610      	mov	r0, r2
 8006320:	4619      	mov	r1, r3
 8006322:	f04f 0200 	mov.w	r2, #0
 8006326:	f04f 0300 	mov.w	r3, #0
 800632a:	020b      	lsls	r3, r1, #8
 800632c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006330:	0202      	lsls	r2, r0, #8
 8006332:	6979      	ldr	r1, [r7, #20]
 8006334:	6849      	ldr	r1, [r1, #4]
 8006336:	0849      	lsrs	r1, r1, #1
 8006338:	2000      	movs	r0, #0
 800633a:	460c      	mov	r4, r1
 800633c:	4605      	mov	r5, r0
 800633e:	eb12 0804 	adds.w	r8, r2, r4
 8006342:	eb43 0905 	adc.w	r9, r3, r5
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	469a      	mov	sl, r3
 800634e:	4693      	mov	fp, r2
 8006350:	4652      	mov	r2, sl
 8006352:	465b      	mov	r3, fp
 8006354:	4640      	mov	r0, r8
 8006356:	4649      	mov	r1, r9
 8006358:	f7f9 ffbe 	bl	80002d8 <__aeabi_uldivmod>
 800635c:	4602      	mov	r2, r0
 800635e:	460b      	mov	r3, r1
 8006360:	4613      	mov	r3, r2
 8006362:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006366:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800636a:	d308      	bcc.n	800637e <UART_SetConfig+0x79a>
 800636c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006372:	d204      	bcs.n	800637e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800637a:	60da      	str	r2, [r3, #12]
 800637c:	e17c      	b.n	8006678 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006384:	e178      	b.n	8006678 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	69db      	ldr	r3, [r3, #28]
 800638a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800638e:	f040 80c5 	bne.w	800651c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006392:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006396:	2b20      	cmp	r3, #32
 8006398:	dc48      	bgt.n	800642c <UART_SetConfig+0x848>
 800639a:	2b00      	cmp	r3, #0
 800639c:	db7b      	blt.n	8006496 <UART_SetConfig+0x8b2>
 800639e:	2b20      	cmp	r3, #32
 80063a0:	d879      	bhi.n	8006496 <UART_SetConfig+0x8b2>
 80063a2:	a201      	add	r2, pc, #4	; (adr r2, 80063a8 <UART_SetConfig+0x7c4>)
 80063a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a8:	08006433 	.word	0x08006433
 80063ac:	0800643b 	.word	0x0800643b
 80063b0:	08006497 	.word	0x08006497
 80063b4:	08006497 	.word	0x08006497
 80063b8:	08006443 	.word	0x08006443
 80063bc:	08006497 	.word	0x08006497
 80063c0:	08006497 	.word	0x08006497
 80063c4:	08006497 	.word	0x08006497
 80063c8:	08006453 	.word	0x08006453
 80063cc:	08006497 	.word	0x08006497
 80063d0:	08006497 	.word	0x08006497
 80063d4:	08006497 	.word	0x08006497
 80063d8:	08006497 	.word	0x08006497
 80063dc:	08006497 	.word	0x08006497
 80063e0:	08006497 	.word	0x08006497
 80063e4:	08006497 	.word	0x08006497
 80063e8:	08006463 	.word	0x08006463
 80063ec:	08006497 	.word	0x08006497
 80063f0:	08006497 	.word	0x08006497
 80063f4:	08006497 	.word	0x08006497
 80063f8:	08006497 	.word	0x08006497
 80063fc:	08006497 	.word	0x08006497
 8006400:	08006497 	.word	0x08006497
 8006404:	08006497 	.word	0x08006497
 8006408:	08006497 	.word	0x08006497
 800640c:	08006497 	.word	0x08006497
 8006410:	08006497 	.word	0x08006497
 8006414:	08006497 	.word	0x08006497
 8006418:	08006497 	.word	0x08006497
 800641c:	08006497 	.word	0x08006497
 8006420:	08006497 	.word	0x08006497
 8006424:	08006497 	.word	0x08006497
 8006428:	08006489 	.word	0x08006489
 800642c:	2b40      	cmp	r3, #64	; 0x40
 800642e:	d02e      	beq.n	800648e <UART_SetConfig+0x8aa>
 8006430:	e031      	b.n	8006496 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006432:	f7fd fff3 	bl	800441c <HAL_RCC_GetPCLK1Freq>
 8006436:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006438:	e033      	b.n	80064a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800643a:	f7fe f805 	bl	8004448 <HAL_RCC_GetPCLK2Freq>
 800643e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006440:	e02f      	b.n	80064a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006446:	4618      	mov	r0, r3
 8006448:	f7fe ff70 	bl	800532c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800644c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006450:	e027      	b.n	80064a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006452:	f107 0318 	add.w	r3, r7, #24
 8006456:	4618      	mov	r0, r3
 8006458:	f7ff f8bc 	bl	80055d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006460:	e01f      	b.n	80064a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006462:	4b2d      	ldr	r3, [pc, #180]	; (8006518 <UART_SetConfig+0x934>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 0320 	and.w	r3, r3, #32
 800646a:	2b00      	cmp	r3, #0
 800646c:	d009      	beq.n	8006482 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800646e:	4b2a      	ldr	r3, [pc, #168]	; (8006518 <UART_SetConfig+0x934>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	08db      	lsrs	r3, r3, #3
 8006474:	f003 0303 	and.w	r3, r3, #3
 8006478:	4a24      	ldr	r2, [pc, #144]	; (800650c <UART_SetConfig+0x928>)
 800647a:	fa22 f303 	lsr.w	r3, r2, r3
 800647e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006480:	e00f      	b.n	80064a2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006482:	4b22      	ldr	r3, [pc, #136]	; (800650c <UART_SetConfig+0x928>)
 8006484:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006486:	e00c      	b.n	80064a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006488:	4b21      	ldr	r3, [pc, #132]	; (8006510 <UART_SetConfig+0x92c>)
 800648a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800648c:	e009      	b.n	80064a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800648e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006492:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006494:	e005      	b.n	80064a2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006496:	2300      	movs	r3, #0
 8006498:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80064a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	f000 80e7 	beq.w	8006678 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ae:	4a19      	ldr	r2, [pc, #100]	; (8006514 <UART_SetConfig+0x930>)
 80064b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064b4:	461a      	mov	r2, r3
 80064b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80064bc:	005a      	lsls	r2, r3, #1
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	085b      	lsrs	r3, r3, #1
 80064c4:	441a      	add	r2, r3
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ce:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d2:	2b0f      	cmp	r3, #15
 80064d4:	d916      	bls.n	8006504 <UART_SetConfig+0x920>
 80064d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064dc:	d212      	bcs.n	8006504 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	f023 030f 	bic.w	r3, r3, #15
 80064e6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ea:	085b      	lsrs	r3, r3, #1
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	f003 0307 	and.w	r3, r3, #7
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80064f6:	4313      	orrs	r3, r2
 80064f8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006500:	60da      	str	r2, [r3, #12]
 8006502:	e0b9      	b.n	8006678 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800650a:	e0b5      	b.n	8006678 <UART_SetConfig+0xa94>
 800650c:	03d09000 	.word	0x03d09000
 8006510:	003d0900 	.word	0x003d0900
 8006514:	0800aff4 	.word	0x0800aff4
 8006518:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800651c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006520:	2b20      	cmp	r3, #32
 8006522:	dc49      	bgt.n	80065b8 <UART_SetConfig+0x9d4>
 8006524:	2b00      	cmp	r3, #0
 8006526:	db7c      	blt.n	8006622 <UART_SetConfig+0xa3e>
 8006528:	2b20      	cmp	r3, #32
 800652a:	d87a      	bhi.n	8006622 <UART_SetConfig+0xa3e>
 800652c:	a201      	add	r2, pc, #4	; (adr r2, 8006534 <UART_SetConfig+0x950>)
 800652e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006532:	bf00      	nop
 8006534:	080065bf 	.word	0x080065bf
 8006538:	080065c7 	.word	0x080065c7
 800653c:	08006623 	.word	0x08006623
 8006540:	08006623 	.word	0x08006623
 8006544:	080065cf 	.word	0x080065cf
 8006548:	08006623 	.word	0x08006623
 800654c:	08006623 	.word	0x08006623
 8006550:	08006623 	.word	0x08006623
 8006554:	080065df 	.word	0x080065df
 8006558:	08006623 	.word	0x08006623
 800655c:	08006623 	.word	0x08006623
 8006560:	08006623 	.word	0x08006623
 8006564:	08006623 	.word	0x08006623
 8006568:	08006623 	.word	0x08006623
 800656c:	08006623 	.word	0x08006623
 8006570:	08006623 	.word	0x08006623
 8006574:	080065ef 	.word	0x080065ef
 8006578:	08006623 	.word	0x08006623
 800657c:	08006623 	.word	0x08006623
 8006580:	08006623 	.word	0x08006623
 8006584:	08006623 	.word	0x08006623
 8006588:	08006623 	.word	0x08006623
 800658c:	08006623 	.word	0x08006623
 8006590:	08006623 	.word	0x08006623
 8006594:	08006623 	.word	0x08006623
 8006598:	08006623 	.word	0x08006623
 800659c:	08006623 	.word	0x08006623
 80065a0:	08006623 	.word	0x08006623
 80065a4:	08006623 	.word	0x08006623
 80065a8:	08006623 	.word	0x08006623
 80065ac:	08006623 	.word	0x08006623
 80065b0:	08006623 	.word	0x08006623
 80065b4:	08006615 	.word	0x08006615
 80065b8:	2b40      	cmp	r3, #64	; 0x40
 80065ba:	d02e      	beq.n	800661a <UART_SetConfig+0xa36>
 80065bc:	e031      	b.n	8006622 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065be:	f7fd ff2d 	bl	800441c <HAL_RCC_GetPCLK1Freq>
 80065c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80065c4:	e033      	b.n	800662e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065c6:	f7fd ff3f 	bl	8004448 <HAL_RCC_GetPCLK2Freq>
 80065ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80065cc:	e02f      	b.n	800662e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fe feaa 	bl	800532c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80065d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065dc:	e027      	b.n	800662e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065de:	f107 0318 	add.w	r3, r7, #24
 80065e2:	4618      	mov	r0, r3
 80065e4:	f7fe fff6 	bl	80055d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065ec:	e01f      	b.n	800662e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065ee:	4b2d      	ldr	r3, [pc, #180]	; (80066a4 <UART_SetConfig+0xac0>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 0320 	and.w	r3, r3, #32
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d009      	beq.n	800660e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80065fa:	4b2a      	ldr	r3, [pc, #168]	; (80066a4 <UART_SetConfig+0xac0>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	08db      	lsrs	r3, r3, #3
 8006600:	f003 0303 	and.w	r3, r3, #3
 8006604:	4a28      	ldr	r2, [pc, #160]	; (80066a8 <UART_SetConfig+0xac4>)
 8006606:	fa22 f303 	lsr.w	r3, r2, r3
 800660a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800660c:	e00f      	b.n	800662e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800660e:	4b26      	ldr	r3, [pc, #152]	; (80066a8 <UART_SetConfig+0xac4>)
 8006610:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006612:	e00c      	b.n	800662e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006614:	4b25      	ldr	r3, [pc, #148]	; (80066ac <UART_SetConfig+0xac8>)
 8006616:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006618:	e009      	b.n	800662e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800661a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800661e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006620:	e005      	b.n	800662e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006622:	2300      	movs	r3, #0
 8006624:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800662c:	bf00      	nop
    }

    if (pclk != 0U)
 800662e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006630:	2b00      	cmp	r3, #0
 8006632:	d021      	beq.n	8006678 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006638:	4a1d      	ldr	r2, [pc, #116]	; (80066b0 <UART_SetConfig+0xacc>)
 800663a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800663e:	461a      	mov	r2, r3
 8006640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006642:	fbb3 f2f2 	udiv	r2, r3, r2
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	085b      	lsrs	r3, r3, #1
 800664c:	441a      	add	r2, r3
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	fbb2 f3f3 	udiv	r3, r2, r3
 8006656:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665a:	2b0f      	cmp	r3, #15
 800665c:	d909      	bls.n	8006672 <UART_SetConfig+0xa8e>
 800665e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006664:	d205      	bcs.n	8006672 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006668:	b29a      	uxth	r2, r3
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	60da      	str	r2, [r3, #12]
 8006670:	e002      	b.n	8006678 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	2201      	movs	r2, #1
 800667c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	2201      	movs	r2, #1
 8006684:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	2200      	movs	r2, #0
 800668c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	2200      	movs	r2, #0
 8006692:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006694:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006698:	4618      	mov	r0, r3
 800669a:	3748      	adds	r7, #72	; 0x48
 800669c:	46bd      	mov	sp, r7
 800669e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066a2:	bf00      	nop
 80066a4:	58024400 	.word	0x58024400
 80066a8:	03d09000 	.word	0x03d09000
 80066ac:	003d0900 	.word	0x003d0900
 80066b0:	0800aff4 	.word	0x0800aff4

080066b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c0:	f003 0301 	and.w	r3, r3, #1
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00a      	beq.n	80066de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	430a      	orrs	r2, r1
 80066dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e2:	f003 0302 	and.w	r3, r3, #2
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00a      	beq.n	8006700 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	430a      	orrs	r2, r1
 80066fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006704:	f003 0304 	and.w	r3, r3, #4
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00a      	beq.n	8006722 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	430a      	orrs	r2, r1
 8006720:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006726:	f003 0308 	and.w	r3, r3, #8
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00a      	beq.n	8006744 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	430a      	orrs	r2, r1
 8006742:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006748:	f003 0310 	and.w	r3, r3, #16
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00a      	beq.n	8006766 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	430a      	orrs	r2, r1
 8006764:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676a:	f003 0320 	and.w	r3, r3, #32
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00a      	beq.n	8006788 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	430a      	orrs	r2, r1
 8006786:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006790:	2b00      	cmp	r3, #0
 8006792:	d01a      	beq.n	80067ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	430a      	orrs	r2, r1
 80067a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067b2:	d10a      	bne.n	80067ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00a      	beq.n	80067ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	430a      	orrs	r2, r1
 80067ea:	605a      	str	r2, [r3, #4]
  }
}
 80067ec:	bf00      	nop
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af02      	add	r7, sp, #8
 80067fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006808:	f7fa fba4 	bl	8000f54 <HAL_GetTick>
 800680c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0308 	and.w	r3, r3, #8
 8006818:	2b08      	cmp	r3, #8
 800681a:	d10e      	bne.n	800683a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800681c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f82f 	bl	800688e <UART_WaitOnFlagUntilTimeout>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d001      	beq.n	800683a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e025      	b.n	8006886 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0304 	and.w	r3, r3, #4
 8006844:	2b04      	cmp	r3, #4
 8006846:	d10e      	bne.n	8006866 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006848:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800684c:	9300      	str	r3, [sp, #0]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f819 	bl	800688e <UART_WaitOnFlagUntilTimeout>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d001      	beq.n	8006866 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e00f      	b.n	8006886 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2220      	movs	r2, #32
 800686a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2220      	movs	r2, #32
 8006872:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3710      	adds	r7, #16
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800688e:	b580      	push	{r7, lr}
 8006890:	b09c      	sub	sp, #112	; 0x70
 8006892:	af00      	add	r7, sp, #0
 8006894:	60f8      	str	r0, [r7, #12]
 8006896:	60b9      	str	r1, [r7, #8]
 8006898:	603b      	str	r3, [r7, #0]
 800689a:	4613      	mov	r3, r2
 800689c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800689e:	e0a9      	b.n	80069f4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a6:	f000 80a5 	beq.w	80069f4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068aa:	f7fa fb53 	bl	8000f54 <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d302      	bcc.n	80068c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80068ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d140      	bne.n	8006942 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068c8:	e853 3f00 	ldrex	r3, [r3]
 80068cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80068ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068d4:	667b      	str	r3, [r7, #100]	; 0x64
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	461a      	mov	r2, r3
 80068dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80068e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80068e6:	e841 2300 	strex	r3, r2, [r1]
 80068ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80068ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1e6      	bne.n	80068c0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	3308      	adds	r3, #8
 80068f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068fc:	e853 3f00 	ldrex	r3, [r3]
 8006900:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006904:	f023 0301 	bic.w	r3, r3, #1
 8006908:	663b      	str	r3, [r7, #96]	; 0x60
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	3308      	adds	r3, #8
 8006910:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006912:	64ba      	str	r2, [r7, #72]	; 0x48
 8006914:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006916:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006918:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800691a:	e841 2300 	strex	r3, r2, [r1]
 800691e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1e5      	bne.n	80068f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2220      	movs	r2, #32
 800692a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2220      	movs	r2, #32
 8006932:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e069      	b.n	8006a16 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0304 	and.w	r3, r3, #4
 800694c:	2b00      	cmp	r3, #0
 800694e:	d051      	beq.n	80069f4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800695a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800695e:	d149      	bne.n	80069f4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006968:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006972:	e853 3f00 	ldrex	r3, [r3]
 8006976:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800697e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	461a      	mov	r2, r3
 8006986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006988:	637b      	str	r3, [r7, #52]	; 0x34
 800698a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800698e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006990:	e841 2300 	strex	r3, r2, [r1]
 8006994:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1e6      	bne.n	800696a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	3308      	adds	r3, #8
 80069a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	e853 3f00 	ldrex	r3, [r3]
 80069aa:	613b      	str	r3, [r7, #16]
   return(result);
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	f023 0301 	bic.w	r3, r3, #1
 80069b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	3308      	adds	r3, #8
 80069ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80069bc:	623a      	str	r2, [r7, #32]
 80069be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c0:	69f9      	ldr	r1, [r7, #28]
 80069c2:	6a3a      	ldr	r2, [r7, #32]
 80069c4:	e841 2300 	strex	r3, r2, [r1]
 80069c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1e5      	bne.n	800699c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2220      	movs	r2, #32
 80069d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2220      	movs	r2, #32
 80069dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2220      	movs	r2, #32
 80069e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e010      	b.n	8006a16 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	69da      	ldr	r2, [r3, #28]
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	4013      	ands	r3, r2
 80069fe:	68ba      	ldr	r2, [r7, #8]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	bf0c      	ite	eq
 8006a04:	2301      	moveq	r3, #1
 8006a06:	2300      	movne	r3, #0
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	79fb      	ldrb	r3, [r7, #7]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	f43f af46 	beq.w	80068a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3770      	adds	r7, #112	; 0x70
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006a1e:	b480      	push	{r7}
 8006a20:	b085      	sub	sp, #20
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d101      	bne.n	8006a34 <HAL_UARTEx_DisableFifoMode+0x16>
 8006a30:	2302      	movs	r3, #2
 8006a32:	e027      	b.n	8006a84 <HAL_UARTEx_DisableFifoMode+0x66>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2224      	movs	r2, #36	; 0x24
 8006a40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f022 0201 	bic.w	r2, r2, #1
 8006a5a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006a62:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2220      	movs	r2, #32
 8006a76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3714      	adds	r7, #20
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d101      	bne.n	8006aa8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	e02d      	b.n	8006b04 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2224      	movs	r2, #36	; 0x24
 8006ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f022 0201 	bic.w	r2, r2, #1
 8006ace:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	683a      	ldr	r2, [r7, #0]
 8006ae0:	430a      	orrs	r2, r1
 8006ae2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 f84f 	bl	8006b88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2220      	movs	r2, #32
 8006af6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d101      	bne.n	8006b24 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006b20:	2302      	movs	r3, #2
 8006b22:	e02d      	b.n	8006b80 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2224      	movs	r2, #36	; 0x24
 8006b30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f022 0201 	bic.w	r2, r2, #1
 8006b4a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	683a      	ldr	r2, [r7, #0]
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 f811 	bl	8006b88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2220      	movs	r2, #32
 8006b72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d108      	bne.n	8006baa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ba8:	e031      	b.n	8006c0e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006baa:	2310      	movs	r3, #16
 8006bac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006bae:	2310      	movs	r3, #16
 8006bb0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	0e5b      	lsrs	r3, r3, #25
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	f003 0307 	and.w	r3, r3, #7
 8006bc0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	0f5b      	lsrs	r3, r3, #29
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	f003 0307 	and.w	r3, r3, #7
 8006bd0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006bd2:	7bbb      	ldrb	r3, [r7, #14]
 8006bd4:	7b3a      	ldrb	r2, [r7, #12]
 8006bd6:	4911      	ldr	r1, [pc, #68]	; (8006c1c <UARTEx_SetNbDataToProcess+0x94>)
 8006bd8:	5c8a      	ldrb	r2, [r1, r2]
 8006bda:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006bde:	7b3a      	ldrb	r2, [r7, #12]
 8006be0:	490f      	ldr	r1, [pc, #60]	; (8006c20 <UARTEx_SetNbDataToProcess+0x98>)
 8006be2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006be4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bf0:	7bfb      	ldrb	r3, [r7, #15]
 8006bf2:	7b7a      	ldrb	r2, [r7, #13]
 8006bf4:	4909      	ldr	r1, [pc, #36]	; (8006c1c <UARTEx_SetNbDataToProcess+0x94>)
 8006bf6:	5c8a      	ldrb	r2, [r1, r2]
 8006bf8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006bfc:	7b7a      	ldrb	r2, [r7, #13]
 8006bfe:	4908      	ldr	r1, [pc, #32]	; (8006c20 <UARTEx_SetNbDataToProcess+0x98>)
 8006c00:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c02:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006c0e:	bf00      	nop
 8006c10:	3714      	adds	r7, #20
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	0800b00c 	.word	0x0800b00c
 8006c20:	0800b014 	.word	0x0800b014

08006c24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c24:	b084      	sub	sp, #16
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b084      	sub	sp, #16
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
 8006c2e:	f107 001c 	add.w	r0, r7, #28
 8006c32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d120      	bne.n	8006c7e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	68da      	ldr	r2, [r3, #12]
 8006c4c:	4b2a      	ldr	r3, [pc, #168]	; (8006cf8 <USB_CoreInit+0xd4>)
 8006c4e:	4013      	ands	r3, r2
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d105      	bne.n	8006c72 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f001 fc04 	bl	8008480 <USB_CoreReset>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	73fb      	strb	r3, [r7, #15]
 8006c7c:	e01a      	b.n	8006cb4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f001 fbf8 	bl	8008480 <USB_CoreReset>
 8006c90:	4603      	mov	r3, r0
 8006c92:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006c94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d106      	bne.n	8006ca8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	639a      	str	r2, [r3, #56]	; 0x38
 8006ca6:	e005      	b.n	8006cb4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d116      	bne.n	8006ce8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006cc8:	4b0c      	ldr	r3, [pc, #48]	; (8006cfc <USB_CoreInit+0xd8>)
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f043 0206 	orr.w	r2, r3, #6
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f043 0220 	orr.w	r2, r3, #32
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cf4:	b004      	add	sp, #16
 8006cf6:	4770      	bx	lr
 8006cf8:	ffbdffbf 	.word	0xffbdffbf
 8006cfc:	03ee0000 	.word	0x03ee0000

08006d00 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b087      	sub	sp, #28
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006d0e:	79fb      	ldrb	r3, [r7, #7]
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	d165      	bne.n	8006de0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	4a41      	ldr	r2, [pc, #260]	; (8006e1c <USB_SetTurnaroundTime+0x11c>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d906      	bls.n	8006d2a <USB_SetTurnaroundTime+0x2a>
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	4a40      	ldr	r2, [pc, #256]	; (8006e20 <USB_SetTurnaroundTime+0x120>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d202      	bcs.n	8006d2a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006d24:	230f      	movs	r3, #15
 8006d26:	617b      	str	r3, [r7, #20]
 8006d28:	e062      	b.n	8006df0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	4a3c      	ldr	r2, [pc, #240]	; (8006e20 <USB_SetTurnaroundTime+0x120>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d306      	bcc.n	8006d40 <USB_SetTurnaroundTime+0x40>
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	4a3b      	ldr	r2, [pc, #236]	; (8006e24 <USB_SetTurnaroundTime+0x124>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d202      	bcs.n	8006d40 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006d3a:	230e      	movs	r3, #14
 8006d3c:	617b      	str	r3, [r7, #20]
 8006d3e:	e057      	b.n	8006df0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	4a38      	ldr	r2, [pc, #224]	; (8006e24 <USB_SetTurnaroundTime+0x124>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d306      	bcc.n	8006d56 <USB_SetTurnaroundTime+0x56>
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	4a37      	ldr	r2, [pc, #220]	; (8006e28 <USB_SetTurnaroundTime+0x128>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d202      	bcs.n	8006d56 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006d50:	230d      	movs	r3, #13
 8006d52:	617b      	str	r3, [r7, #20]
 8006d54:	e04c      	b.n	8006df0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	4a33      	ldr	r2, [pc, #204]	; (8006e28 <USB_SetTurnaroundTime+0x128>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d306      	bcc.n	8006d6c <USB_SetTurnaroundTime+0x6c>
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	4a32      	ldr	r2, [pc, #200]	; (8006e2c <USB_SetTurnaroundTime+0x12c>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d802      	bhi.n	8006d6c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006d66:	230c      	movs	r3, #12
 8006d68:	617b      	str	r3, [r7, #20]
 8006d6a:	e041      	b.n	8006df0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	4a2f      	ldr	r2, [pc, #188]	; (8006e2c <USB_SetTurnaroundTime+0x12c>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d906      	bls.n	8006d82 <USB_SetTurnaroundTime+0x82>
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	4a2e      	ldr	r2, [pc, #184]	; (8006e30 <USB_SetTurnaroundTime+0x130>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d802      	bhi.n	8006d82 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006d7c:	230b      	movs	r3, #11
 8006d7e:	617b      	str	r3, [r7, #20]
 8006d80:	e036      	b.n	8006df0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	4a2a      	ldr	r2, [pc, #168]	; (8006e30 <USB_SetTurnaroundTime+0x130>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d906      	bls.n	8006d98 <USB_SetTurnaroundTime+0x98>
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	4a29      	ldr	r2, [pc, #164]	; (8006e34 <USB_SetTurnaroundTime+0x134>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d802      	bhi.n	8006d98 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006d92:	230a      	movs	r3, #10
 8006d94:	617b      	str	r3, [r7, #20]
 8006d96:	e02b      	b.n	8006df0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	4a26      	ldr	r2, [pc, #152]	; (8006e34 <USB_SetTurnaroundTime+0x134>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d906      	bls.n	8006dae <USB_SetTurnaroundTime+0xae>
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	4a25      	ldr	r2, [pc, #148]	; (8006e38 <USB_SetTurnaroundTime+0x138>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d202      	bcs.n	8006dae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006da8:	2309      	movs	r3, #9
 8006daa:	617b      	str	r3, [r7, #20]
 8006dac:	e020      	b.n	8006df0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	4a21      	ldr	r2, [pc, #132]	; (8006e38 <USB_SetTurnaroundTime+0x138>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d306      	bcc.n	8006dc4 <USB_SetTurnaroundTime+0xc4>
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	4a20      	ldr	r2, [pc, #128]	; (8006e3c <USB_SetTurnaroundTime+0x13c>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d802      	bhi.n	8006dc4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006dbe:	2308      	movs	r3, #8
 8006dc0:	617b      	str	r3, [r7, #20]
 8006dc2:	e015      	b.n	8006df0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	4a1d      	ldr	r2, [pc, #116]	; (8006e3c <USB_SetTurnaroundTime+0x13c>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d906      	bls.n	8006dda <USB_SetTurnaroundTime+0xda>
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	4a1c      	ldr	r2, [pc, #112]	; (8006e40 <USB_SetTurnaroundTime+0x140>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d202      	bcs.n	8006dda <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006dd4:	2307      	movs	r3, #7
 8006dd6:	617b      	str	r3, [r7, #20]
 8006dd8:	e00a      	b.n	8006df0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006dda:	2306      	movs	r3, #6
 8006ddc:	617b      	str	r3, [r7, #20]
 8006dde:	e007      	b.n	8006df0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006de0:	79fb      	ldrb	r3, [r7, #7]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d102      	bne.n	8006dec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006de6:	2309      	movs	r3, #9
 8006de8:	617b      	str	r3, [r7, #20]
 8006dea:	e001      	b.n	8006df0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006dec:	2309      	movs	r3, #9
 8006dee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	68da      	ldr	r2, [r3, #12]
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	029b      	lsls	r3, r3, #10
 8006e04:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006e08:	431a      	orrs	r2, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	371c      	adds	r7, #28
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	00d8acbf 	.word	0x00d8acbf
 8006e20:	00e4e1c0 	.word	0x00e4e1c0
 8006e24:	00f42400 	.word	0x00f42400
 8006e28:	01067380 	.word	0x01067380
 8006e2c:	011a499f 	.word	0x011a499f
 8006e30:	01312cff 	.word	0x01312cff
 8006e34:	014ca43f 	.word	0x014ca43f
 8006e38:	016e3600 	.word	0x016e3600
 8006e3c:	01a6ab1f 	.word	0x01a6ab1f
 8006e40:	01e84800 	.word	0x01e84800

08006e44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f043 0201 	orr.w	r2, r3, #1
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	370c      	adds	r7, #12
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e66:	b480      	push	{r7}
 8006e68:	b083      	sub	sp, #12
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	f023 0201 	bic.w	r2, r3, #1
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	460b      	mov	r3, r1
 8006e92:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006e94:	2300      	movs	r3, #0
 8006e96:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ea4:	78fb      	ldrb	r3, [r7, #3]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d115      	bne.n	8006ed6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006eb6:	2001      	movs	r0, #1
 8006eb8:	f7fa f858 	bl	8000f6c <HAL_Delay>
      ms++;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f001 fa4b 	bl	800835e <USB_GetMode>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d01e      	beq.n	8006f0c <USB_SetCurrentMode+0x84>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2b31      	cmp	r3, #49	; 0x31
 8006ed2:	d9f0      	bls.n	8006eb6 <USB_SetCurrentMode+0x2e>
 8006ed4:	e01a      	b.n	8006f0c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ed6:	78fb      	ldrb	r3, [r7, #3]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d115      	bne.n	8006f08 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ee8:	2001      	movs	r0, #1
 8006eea:	f7fa f83f 	bl	8000f6c <HAL_Delay>
      ms++;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f001 fa32 	bl	800835e <USB_GetMode>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d005      	beq.n	8006f0c <USB_SetCurrentMode+0x84>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2b31      	cmp	r3, #49	; 0x31
 8006f04:	d9f0      	bls.n	8006ee8 <USB_SetCurrentMode+0x60>
 8006f06:	e001      	b.n	8006f0c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e005      	b.n	8006f18 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2b32      	cmp	r3, #50	; 0x32
 8006f10:	d101      	bne.n	8006f16 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e000      	b.n	8006f18 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f20:	b084      	sub	sp, #16
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b086      	sub	sp, #24
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
 8006f2a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006f2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f32:	2300      	movs	r3, #0
 8006f34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	613b      	str	r3, [r7, #16]
 8006f3e:	e009      	b.n	8006f54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	3340      	adds	r3, #64	; 0x40
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	4413      	add	r3, r2
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	3301      	adds	r3, #1
 8006f52:	613b      	str	r3, [r7, #16]
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	2b0e      	cmp	r3, #14
 8006f58:	d9f2      	bls.n	8006f40 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d11c      	bne.n	8006f9a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f6e:	f043 0302 	orr.w	r3, r3, #2
 8006f72:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f78:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	601a      	str	r2, [r3, #0]
 8006f98:	e005      	b.n	8006fa6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006fac:	461a      	mov	r2, r3
 8006fae:	2300      	movs	r3, #0
 8006fb0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fb8:	4619      	mov	r1, r3
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	680b      	ldr	r3, [r1, #0]
 8006fc4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d10c      	bne.n	8006fe6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d104      	bne.n	8006fdc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 f965 	bl	80072a4 <USB_SetDevSpeed>
 8006fda:	e008      	b.n	8006fee <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006fdc:	2101      	movs	r1, #1
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f960 	bl	80072a4 <USB_SetDevSpeed>
 8006fe4:	e003      	b.n	8006fee <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006fe6:	2103      	movs	r1, #3
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 f95b 	bl	80072a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006fee:	2110      	movs	r1, #16
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f8f3 	bl	80071dc <USB_FlushTxFifo>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d001      	beq.n	8007000 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 f91f 	bl	8007244 <USB_FlushRxFifo>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d001      	beq.n	8007010 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007016:	461a      	mov	r2, r3
 8007018:	2300      	movs	r3, #0
 800701a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007022:	461a      	mov	r2, r3
 8007024:	2300      	movs	r3, #0
 8007026:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800702e:	461a      	mov	r2, r3
 8007030:	2300      	movs	r3, #0
 8007032:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007034:	2300      	movs	r3, #0
 8007036:	613b      	str	r3, [r7, #16]
 8007038:	e043      	b.n	80070c2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	015a      	lsls	r2, r3, #5
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	4413      	add	r3, r2
 8007042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800704c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007050:	d118      	bne.n	8007084 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d10a      	bne.n	800706e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	015a      	lsls	r2, r3, #5
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	4413      	add	r3, r2
 8007060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007064:	461a      	mov	r2, r3
 8007066:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800706a:	6013      	str	r3, [r2, #0]
 800706c:	e013      	b.n	8007096 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	015a      	lsls	r2, r3, #5
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	4413      	add	r3, r2
 8007076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800707a:	461a      	mov	r2, r3
 800707c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007080:	6013      	str	r3, [r2, #0]
 8007082:	e008      	b.n	8007096 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	015a      	lsls	r2, r3, #5
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	4413      	add	r3, r2
 800708c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007090:	461a      	mov	r2, r3
 8007092:	2300      	movs	r3, #0
 8007094:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	015a      	lsls	r2, r3, #5
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	4413      	add	r3, r2
 800709e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a2:	461a      	mov	r2, r3
 80070a4:	2300      	movs	r3, #0
 80070a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	015a      	lsls	r2, r3, #5
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	4413      	add	r3, r2
 80070b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b4:	461a      	mov	r2, r3
 80070b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80070ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	3301      	adds	r3, #1
 80070c0:	613b      	str	r3, [r7, #16]
 80070c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d3b7      	bcc.n	800703a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070ca:	2300      	movs	r3, #0
 80070cc:	613b      	str	r3, [r7, #16]
 80070ce:	e043      	b.n	8007158 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	015a      	lsls	r2, r3, #5
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	4413      	add	r3, r2
 80070d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070e6:	d118      	bne.n	800711a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10a      	bne.n	8007104 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	015a      	lsls	r2, r3, #5
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	4413      	add	r3, r2
 80070f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070fa:	461a      	mov	r2, r3
 80070fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007100:	6013      	str	r3, [r2, #0]
 8007102:	e013      	b.n	800712c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	015a      	lsls	r2, r3, #5
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	4413      	add	r3, r2
 800710c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007110:	461a      	mov	r2, r3
 8007112:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007116:	6013      	str	r3, [r2, #0]
 8007118:	e008      	b.n	800712c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	015a      	lsls	r2, r3, #5
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	4413      	add	r3, r2
 8007122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007126:	461a      	mov	r2, r3
 8007128:	2300      	movs	r3, #0
 800712a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	015a      	lsls	r2, r3, #5
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	4413      	add	r3, r2
 8007134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007138:	461a      	mov	r2, r3
 800713a:	2300      	movs	r3, #0
 800713c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	015a      	lsls	r2, r3, #5
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	4413      	add	r3, r2
 8007146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800714a:	461a      	mov	r2, r3
 800714c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007150:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	3301      	adds	r3, #1
 8007156:	613b      	str	r3, [r7, #16]
 8007158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715a:	693a      	ldr	r2, [r7, #16]
 800715c:	429a      	cmp	r2, r3
 800715e:	d3b7      	bcc.n	80070d0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800716e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007172:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007180:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007184:	2b00      	cmp	r3, #0
 8007186:	d105      	bne.n	8007194 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	699b      	ldr	r3, [r3, #24]
 800718c:	f043 0210 	orr.w	r2, r3, #16
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	699a      	ldr	r2, [r3, #24]
 8007198:	4b0e      	ldr	r3, [pc, #56]	; (80071d4 <USB_DevInit+0x2b4>)
 800719a:	4313      	orrs	r3, r2
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80071a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d005      	beq.n	80071b2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	f043 0208 	orr.w	r2, r3, #8
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80071b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d105      	bne.n	80071c4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	699a      	ldr	r2, [r3, #24]
 80071bc:	4b06      	ldr	r3, [pc, #24]	; (80071d8 <USB_DevInit+0x2b8>)
 80071be:	4313      	orrs	r3, r2
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80071c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3718      	adds	r7, #24
 80071ca:	46bd      	mov	sp, r7
 80071cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071d0:	b004      	add	sp, #16
 80071d2:	4770      	bx	lr
 80071d4:	803c3800 	.word	0x803c3800
 80071d8:	40000004 	.word	0x40000004

080071dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80071e6:	2300      	movs	r3, #0
 80071e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	3301      	adds	r3, #1
 80071ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	4a13      	ldr	r2, [pc, #76]	; (8007240 <USB_FlushTxFifo+0x64>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d901      	bls.n	80071fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80071f8:	2303      	movs	r3, #3
 80071fa:	e01b      	b.n	8007234 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	2b00      	cmp	r3, #0
 8007202:	daf2      	bge.n	80071ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007204:	2300      	movs	r3, #0
 8007206:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	019b      	lsls	r3, r3, #6
 800720c:	f043 0220 	orr.w	r2, r3, #32
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	3301      	adds	r3, #1
 8007218:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	4a08      	ldr	r2, [pc, #32]	; (8007240 <USB_FlushTxFifo+0x64>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d901      	bls.n	8007226 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007222:	2303      	movs	r3, #3
 8007224:	e006      	b.n	8007234 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	f003 0320 	and.w	r3, r3, #32
 800722e:	2b20      	cmp	r3, #32
 8007230:	d0f0      	beq.n	8007214 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3714      	adds	r7, #20
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr
 8007240:	00030d40 	.word	0x00030d40

08007244 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800724c:	2300      	movs	r3, #0
 800724e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	3301      	adds	r3, #1
 8007254:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	4a11      	ldr	r2, [pc, #68]	; (80072a0 <USB_FlushRxFifo+0x5c>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d901      	bls.n	8007262 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e018      	b.n	8007294 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	2b00      	cmp	r3, #0
 8007268:	daf2      	bge.n	8007250 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800726a:	2300      	movs	r3, #0
 800726c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2210      	movs	r2, #16
 8007272:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	3301      	adds	r3, #1
 8007278:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	4a08      	ldr	r2, [pc, #32]	; (80072a0 <USB_FlushRxFifo+0x5c>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d901      	bls.n	8007286 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007282:	2303      	movs	r3, #3
 8007284:	e006      	b.n	8007294 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	f003 0310 	and.w	r3, r3, #16
 800728e:	2b10      	cmp	r3, #16
 8007290:	d0f0      	beq.n	8007274 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3714      	adds	r7, #20
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr
 80072a0:	00030d40 	.word	0x00030d40

080072a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	460b      	mov	r3, r1
 80072ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	78fb      	ldrb	r3, [r7, #3]
 80072be:	68f9      	ldr	r1, [r7, #12]
 80072c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072c4:	4313      	orrs	r3, r2
 80072c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3714      	adds	r7, #20
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr

080072d6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80072d6:	b480      	push	{r7}
 80072d8:	b087      	sub	sp, #28
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	f003 0306 	and.w	r3, r3, #6
 80072ee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d102      	bne.n	80072fc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80072f6:	2300      	movs	r3, #0
 80072f8:	75fb      	strb	r3, [r7, #23]
 80072fa:	e00a      	b.n	8007312 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d002      	beq.n	8007308 <USB_GetDevSpeed+0x32>
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2b06      	cmp	r3, #6
 8007306:	d102      	bne.n	800730e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007308:	2302      	movs	r3, #2
 800730a:	75fb      	strb	r3, [r7, #23]
 800730c:	e001      	b.n	8007312 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800730e:	230f      	movs	r3, #15
 8007310:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007312:	7dfb      	ldrb	r3, [r7, #23]
}
 8007314:	4618      	mov	r0, r3
 8007316:	371c      	adds	r7, #28
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007320:	b480      	push	{r7}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	785b      	ldrb	r3, [r3, #1]
 8007338:	2b01      	cmp	r3, #1
 800733a:	d139      	bne.n	80073b0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007342:	69da      	ldr	r2, [r3, #28]
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	f003 030f 	and.w	r3, r3, #15
 800734c:	2101      	movs	r1, #1
 800734e:	fa01 f303 	lsl.w	r3, r1, r3
 8007352:	b29b      	uxth	r3, r3
 8007354:	68f9      	ldr	r1, [r7, #12]
 8007356:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800735a:	4313      	orrs	r3, r2
 800735c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	015a      	lsls	r2, r3, #5
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	4413      	add	r3, r2
 8007366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007370:	2b00      	cmp	r3, #0
 8007372:	d153      	bne.n	800741c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	015a      	lsls	r2, r3, #5
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	4413      	add	r3, r2
 800737c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	791b      	ldrb	r3, [r3, #4]
 800738e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007390:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	059b      	lsls	r3, r3, #22
 8007396:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007398:	431a      	orrs	r2, r3
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	0159      	lsls	r1, r3, #5
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	440b      	add	r3, r1
 80073a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a6:	4619      	mov	r1, r3
 80073a8:	4b20      	ldr	r3, [pc, #128]	; (800742c <USB_ActivateEndpoint+0x10c>)
 80073aa:	4313      	orrs	r3, r2
 80073ac:	600b      	str	r3, [r1, #0]
 80073ae:	e035      	b.n	800741c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073b6:	69da      	ldr	r2, [r3, #28]
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	f003 030f 	and.w	r3, r3, #15
 80073c0:	2101      	movs	r1, #1
 80073c2:	fa01 f303 	lsl.w	r3, r1, r3
 80073c6:	041b      	lsls	r3, r3, #16
 80073c8:	68f9      	ldr	r1, [r7, #12]
 80073ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073ce:	4313      	orrs	r3, r2
 80073d0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	015a      	lsls	r2, r3, #5
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	4413      	add	r3, r2
 80073da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d119      	bne.n	800741c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	015a      	lsls	r2, r3, #5
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	4413      	add	r3, r2
 80073f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	791b      	ldrb	r3, [r3, #4]
 8007402:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007404:	430b      	orrs	r3, r1
 8007406:	431a      	orrs	r2, r3
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	0159      	lsls	r1, r3, #5
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	440b      	add	r3, r1
 8007410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007414:	4619      	mov	r1, r3
 8007416:	4b05      	ldr	r3, [pc, #20]	; (800742c <USB_ActivateEndpoint+0x10c>)
 8007418:	4313      	orrs	r3, r2
 800741a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3714      	adds	r7, #20
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	10008000 	.word	0x10008000

08007430 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	785b      	ldrb	r3, [r3, #1]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d161      	bne.n	8007510 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	015a      	lsls	r2, r3, #5
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	4413      	add	r3, r2
 8007454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800745e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007462:	d11f      	bne.n	80074a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	015a      	lsls	r2, r3, #5
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	4413      	add	r3, r2
 800746c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68ba      	ldr	r2, [r7, #8]
 8007474:	0151      	lsls	r1, r2, #5
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	440a      	add	r2, r1
 800747a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800747e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007482:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	015a      	lsls	r2, r3, #5
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	4413      	add	r3, r2
 800748c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	0151      	lsls	r1, r2, #5
 8007496:	68fa      	ldr	r2, [r7, #12]
 8007498:	440a      	add	r2, r1
 800749a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800749e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	f003 030f 	and.w	r3, r3, #15
 80074b4:	2101      	movs	r1, #1
 80074b6:	fa01 f303 	lsl.w	r3, r1, r3
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	43db      	mvns	r3, r3
 80074be:	68f9      	ldr	r1, [r7, #12]
 80074c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074c4:	4013      	ands	r3, r2
 80074c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ce:	69da      	ldr	r2, [r3, #28]
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	f003 030f 	and.w	r3, r3, #15
 80074d8:	2101      	movs	r1, #1
 80074da:	fa01 f303 	lsl.w	r3, r1, r3
 80074de:	b29b      	uxth	r3, r3
 80074e0:	43db      	mvns	r3, r3
 80074e2:	68f9      	ldr	r1, [r7, #12]
 80074e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074e8:	4013      	ands	r3, r2
 80074ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	015a      	lsls	r2, r3, #5
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	4413      	add	r3, r2
 80074f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	0159      	lsls	r1, r3, #5
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	440b      	add	r3, r1
 8007502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007506:	4619      	mov	r1, r3
 8007508:	4b35      	ldr	r3, [pc, #212]	; (80075e0 <USB_DeactivateEndpoint+0x1b0>)
 800750a:	4013      	ands	r3, r2
 800750c:	600b      	str	r3, [r1, #0]
 800750e:	e060      	b.n	80075d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	015a      	lsls	r2, r3, #5
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	4413      	add	r3, r2
 8007518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007522:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007526:	d11f      	bne.n	8007568 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	015a      	lsls	r2, r3, #5
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	4413      	add	r3, r2
 8007530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	0151      	lsls	r1, r2, #5
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	440a      	add	r2, r1
 800753e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007542:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007546:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	015a      	lsls	r2, r3, #5
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	4413      	add	r3, r2
 8007550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68ba      	ldr	r2, [r7, #8]
 8007558:	0151      	lsls	r1, r2, #5
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	440a      	add	r2, r1
 800755e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007562:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007566:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800756e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	f003 030f 	and.w	r3, r3, #15
 8007578:	2101      	movs	r1, #1
 800757a:	fa01 f303 	lsl.w	r3, r1, r3
 800757e:	041b      	lsls	r3, r3, #16
 8007580:	43db      	mvns	r3, r3
 8007582:	68f9      	ldr	r1, [r7, #12]
 8007584:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007588:	4013      	ands	r3, r2
 800758a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007592:	69da      	ldr	r2, [r3, #28]
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	f003 030f 	and.w	r3, r3, #15
 800759c:	2101      	movs	r1, #1
 800759e:	fa01 f303 	lsl.w	r3, r1, r3
 80075a2:	041b      	lsls	r3, r3, #16
 80075a4:	43db      	mvns	r3, r3
 80075a6:	68f9      	ldr	r1, [r7, #12]
 80075a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075ac:	4013      	ands	r3, r2
 80075ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	015a      	lsls	r2, r3, #5
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	4413      	add	r3, r2
 80075b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	0159      	lsls	r1, r3, #5
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	440b      	add	r3, r1
 80075c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ca:	4619      	mov	r1, r3
 80075cc:	4b05      	ldr	r3, [pc, #20]	; (80075e4 <USB_DeactivateEndpoint+0x1b4>)
 80075ce:	4013      	ands	r3, r2
 80075d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3714      	adds	r7, #20
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr
 80075e0:	ec337800 	.word	0xec337800
 80075e4:	eff37800 	.word	0xeff37800

080075e8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b08a      	sub	sp, #40	; 0x28
 80075ec:	af02      	add	r7, sp, #8
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	4613      	mov	r3, r2
 80075f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	785b      	ldrb	r3, [r3, #1]
 8007604:	2b01      	cmp	r3, #1
 8007606:	f040 8163 	bne.w	80078d0 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	699b      	ldr	r3, [r3, #24]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d132      	bne.n	8007678 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	015a      	lsls	r2, r3, #5
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	4413      	add	r3, r2
 800761a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800761e:	691a      	ldr	r2, [r3, #16]
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	0159      	lsls	r1, r3, #5
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	440b      	add	r3, r1
 8007628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800762c:	4619      	mov	r1, r3
 800762e:	4ba5      	ldr	r3, [pc, #660]	; (80078c4 <USB_EPStartXfer+0x2dc>)
 8007630:	4013      	ands	r3, r2
 8007632:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	015a      	lsls	r2, r3, #5
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	4413      	add	r3, r2
 800763c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	69ba      	ldr	r2, [r7, #24]
 8007644:	0151      	lsls	r1, r2, #5
 8007646:	69fa      	ldr	r2, [r7, #28]
 8007648:	440a      	add	r2, r1
 800764a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800764e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007652:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	015a      	lsls	r2, r3, #5
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	4413      	add	r3, r2
 800765c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007660:	691a      	ldr	r2, [r3, #16]
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	0159      	lsls	r1, r3, #5
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	440b      	add	r3, r1
 800766a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800766e:	4619      	mov	r1, r3
 8007670:	4b95      	ldr	r3, [pc, #596]	; (80078c8 <USB_EPStartXfer+0x2e0>)
 8007672:	4013      	ands	r3, r2
 8007674:	610b      	str	r3, [r1, #16]
 8007676:	e074      	b.n	8007762 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	015a      	lsls	r2, r3, #5
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	4413      	add	r3, r2
 8007680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007684:	691a      	ldr	r2, [r3, #16]
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	0159      	lsls	r1, r3, #5
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	440b      	add	r3, r1
 800768e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007692:	4619      	mov	r1, r3
 8007694:	4b8c      	ldr	r3, [pc, #560]	; (80078c8 <USB_EPStartXfer+0x2e0>)
 8007696:	4013      	ands	r3, r2
 8007698:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	015a      	lsls	r2, r3, #5
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	4413      	add	r3, r2
 80076a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076a6:	691a      	ldr	r2, [r3, #16]
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	0159      	lsls	r1, r3, #5
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	440b      	add	r3, r1
 80076b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076b4:	4619      	mov	r1, r3
 80076b6:	4b83      	ldr	r3, [pc, #524]	; (80078c4 <USB_EPStartXfer+0x2dc>)
 80076b8:	4013      	ands	r3, r2
 80076ba:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	015a      	lsls	r2, r3, #5
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	4413      	add	r3, r2
 80076c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	6999      	ldr	r1, [r3, #24]
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	440b      	add	r3, r1
 80076d4:	1e59      	subs	r1, r3, #1
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	fbb1 f3f3 	udiv	r3, r1, r3
 80076de:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80076e0:	4b7a      	ldr	r3, [pc, #488]	; (80078cc <USB_EPStartXfer+0x2e4>)
 80076e2:	400b      	ands	r3, r1
 80076e4:	69b9      	ldr	r1, [r7, #24]
 80076e6:	0148      	lsls	r0, r1, #5
 80076e8:	69f9      	ldr	r1, [r7, #28]
 80076ea:	4401      	add	r1, r0
 80076ec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80076f0:	4313      	orrs	r3, r2
 80076f2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	015a      	lsls	r2, r3, #5
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	4413      	add	r3, r2
 80076fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007700:	691a      	ldr	r2, [r3, #16]
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800770a:	69b9      	ldr	r1, [r7, #24]
 800770c:	0148      	lsls	r0, r1, #5
 800770e:	69f9      	ldr	r1, [r7, #28]
 8007710:	4401      	add	r1, r0
 8007712:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007716:	4313      	orrs	r3, r2
 8007718:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	791b      	ldrb	r3, [r3, #4]
 800771e:	2b01      	cmp	r3, #1
 8007720:	d11f      	bne.n	8007762 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	015a      	lsls	r2, r3, #5
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	4413      	add	r3, r2
 800772a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800772e:	691b      	ldr	r3, [r3, #16]
 8007730:	69ba      	ldr	r2, [r7, #24]
 8007732:	0151      	lsls	r1, r2, #5
 8007734:	69fa      	ldr	r2, [r7, #28]
 8007736:	440a      	add	r2, r1
 8007738:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800773c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007740:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	015a      	lsls	r2, r3, #5
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	4413      	add	r3, r2
 800774a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	69ba      	ldr	r2, [r7, #24]
 8007752:	0151      	lsls	r1, r2, #5
 8007754:	69fa      	ldr	r2, [r7, #28]
 8007756:	440a      	add	r2, r1
 8007758:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800775c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007760:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007762:	79fb      	ldrb	r3, [r7, #7]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d14b      	bne.n	8007800 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	695b      	ldr	r3, [r3, #20]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d009      	beq.n	8007784 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	015a      	lsls	r2, r3, #5
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	4413      	add	r3, r2
 8007778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800777c:	461a      	mov	r2, r3
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	695b      	ldr	r3, [r3, #20]
 8007782:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	791b      	ldrb	r3, [r3, #4]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d128      	bne.n	80077de <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007798:	2b00      	cmp	r3, #0
 800779a:	d110      	bne.n	80077be <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	015a      	lsls	r2, r3, #5
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	4413      	add	r3, r2
 80077a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	69ba      	ldr	r2, [r7, #24]
 80077ac:	0151      	lsls	r1, r2, #5
 80077ae:	69fa      	ldr	r2, [r7, #28]
 80077b0:	440a      	add	r2, r1
 80077b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80077ba:	6013      	str	r3, [r2, #0]
 80077bc:	e00f      	b.n	80077de <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	015a      	lsls	r2, r3, #5
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	4413      	add	r3, r2
 80077c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	69ba      	ldr	r2, [r7, #24]
 80077ce:	0151      	lsls	r1, r2, #5
 80077d0:	69fa      	ldr	r2, [r7, #28]
 80077d2:	440a      	add	r2, r1
 80077d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077dc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	015a      	lsls	r2, r3, #5
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	4413      	add	r3, r2
 80077e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	69ba      	ldr	r2, [r7, #24]
 80077ee:	0151      	lsls	r1, r2, #5
 80077f0:	69fa      	ldr	r2, [r7, #28]
 80077f2:	440a      	add	r2, r1
 80077f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077fc:	6013      	str	r3, [r2, #0]
 80077fe:	e137      	b.n	8007a70 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	015a      	lsls	r2, r3, #5
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	4413      	add	r3, r2
 8007808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	69ba      	ldr	r2, [r7, #24]
 8007810:	0151      	lsls	r1, r2, #5
 8007812:	69fa      	ldr	r2, [r7, #28]
 8007814:	440a      	add	r2, r1
 8007816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800781a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800781e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	791b      	ldrb	r3, [r3, #4]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d015      	beq.n	8007854 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	699b      	ldr	r3, [r3, #24]
 800782c:	2b00      	cmp	r3, #0
 800782e:	f000 811f 	beq.w	8007a70 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	f003 030f 	and.w	r3, r3, #15
 8007842:	2101      	movs	r1, #1
 8007844:	fa01 f303 	lsl.w	r3, r1, r3
 8007848:	69f9      	ldr	r1, [r7, #28]
 800784a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800784e:	4313      	orrs	r3, r2
 8007850:	634b      	str	r3, [r1, #52]	; 0x34
 8007852:	e10d      	b.n	8007a70 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007860:	2b00      	cmp	r3, #0
 8007862:	d110      	bne.n	8007886 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	015a      	lsls	r2, r3, #5
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	4413      	add	r3, r2
 800786c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	69ba      	ldr	r2, [r7, #24]
 8007874:	0151      	lsls	r1, r2, #5
 8007876:	69fa      	ldr	r2, [r7, #28]
 8007878:	440a      	add	r2, r1
 800787a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800787e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007882:	6013      	str	r3, [r2, #0]
 8007884:	e00f      	b.n	80078a6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	015a      	lsls	r2, r3, #5
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	4413      	add	r3, r2
 800788e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	69ba      	ldr	r2, [r7, #24]
 8007896:	0151      	lsls	r1, r2, #5
 8007898:	69fa      	ldr	r2, [r7, #28]
 800789a:	440a      	add	r2, r1
 800789c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078a4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	6919      	ldr	r1, [r3, #16]
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	781a      	ldrb	r2, [r3, #0]
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	699b      	ldr	r3, [r3, #24]
 80078b2:	b298      	uxth	r0, r3
 80078b4:	79fb      	ldrb	r3, [r7, #7]
 80078b6:	9300      	str	r3, [sp, #0]
 80078b8:	4603      	mov	r3, r0
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f000 faea 	bl	8007e94 <USB_WritePacket>
 80078c0:	e0d6      	b.n	8007a70 <USB_EPStartXfer+0x488>
 80078c2:	bf00      	nop
 80078c4:	e007ffff 	.word	0xe007ffff
 80078c8:	fff80000 	.word	0xfff80000
 80078cc:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	015a      	lsls	r2, r3, #5
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	4413      	add	r3, r2
 80078d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078dc:	691a      	ldr	r2, [r3, #16]
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	0159      	lsls	r1, r3, #5
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	440b      	add	r3, r1
 80078e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ea:	4619      	mov	r1, r3
 80078ec:	4b63      	ldr	r3, [pc, #396]	; (8007a7c <USB_EPStartXfer+0x494>)
 80078ee:	4013      	ands	r3, r2
 80078f0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	015a      	lsls	r2, r3, #5
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	4413      	add	r3, r2
 80078fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078fe:	691a      	ldr	r2, [r3, #16]
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	0159      	lsls	r1, r3, #5
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	440b      	add	r3, r1
 8007908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800790c:	4619      	mov	r1, r3
 800790e:	4b5c      	ldr	r3, [pc, #368]	; (8007a80 <USB_EPStartXfer+0x498>)
 8007910:	4013      	ands	r3, r2
 8007912:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	699b      	ldr	r3, [r3, #24]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d123      	bne.n	8007964 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	015a      	lsls	r2, r3, #5
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	4413      	add	r3, r2
 8007924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007928:	691a      	ldr	r2, [r3, #16]
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007932:	69b9      	ldr	r1, [r7, #24]
 8007934:	0148      	lsls	r0, r1, #5
 8007936:	69f9      	ldr	r1, [r7, #28]
 8007938:	4401      	add	r1, r0
 800793a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800793e:	4313      	orrs	r3, r2
 8007940:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	015a      	lsls	r2, r3, #5
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	4413      	add	r3, r2
 800794a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	69ba      	ldr	r2, [r7, #24]
 8007952:	0151      	lsls	r1, r2, #5
 8007954:	69fa      	ldr	r2, [r7, #28]
 8007956:	440a      	add	r2, r1
 8007958:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800795c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007960:	6113      	str	r3, [r2, #16]
 8007962:	e037      	b.n	80079d4 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	699a      	ldr	r2, [r3, #24]
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	4413      	add	r3, r2
 800796e:	1e5a      	subs	r2, r3, #1
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	fbb2 f3f3 	udiv	r3, r2, r3
 8007978:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	8afa      	ldrh	r2, [r7, #22]
 8007980:	fb03 f202 	mul.w	r2, r3, r2
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	015a      	lsls	r2, r3, #5
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	4413      	add	r3, r2
 8007990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007994:	691a      	ldr	r2, [r3, #16]
 8007996:	8afb      	ldrh	r3, [r7, #22]
 8007998:	04d9      	lsls	r1, r3, #19
 800799a:	4b3a      	ldr	r3, [pc, #232]	; (8007a84 <USB_EPStartXfer+0x49c>)
 800799c:	400b      	ands	r3, r1
 800799e:	69b9      	ldr	r1, [r7, #24]
 80079a0:	0148      	lsls	r0, r1, #5
 80079a2:	69f9      	ldr	r1, [r7, #28]
 80079a4:	4401      	add	r1, r0
 80079a6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80079aa:	4313      	orrs	r3, r2
 80079ac:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	015a      	lsls	r2, r3, #5
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	4413      	add	r3, r2
 80079b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ba:	691a      	ldr	r2, [r3, #16]
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	69db      	ldr	r3, [r3, #28]
 80079c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079c4:	69b9      	ldr	r1, [r7, #24]
 80079c6:	0148      	lsls	r0, r1, #5
 80079c8:	69f9      	ldr	r1, [r7, #28]
 80079ca:	4401      	add	r1, r0
 80079cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80079d0:	4313      	orrs	r3, r2
 80079d2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80079d4:	79fb      	ldrb	r3, [r7, #7]
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d10d      	bne.n	80079f6 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d009      	beq.n	80079f6 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	6919      	ldr	r1, [r3, #16]
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	015a      	lsls	r2, r3, #5
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	4413      	add	r3, r2
 80079ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079f2:	460a      	mov	r2, r1
 80079f4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	791b      	ldrb	r3, [r3, #4]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d128      	bne.n	8007a50 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d110      	bne.n	8007a30 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	015a      	lsls	r2, r3, #5
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	4413      	add	r3, r2
 8007a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	69ba      	ldr	r2, [r7, #24]
 8007a1e:	0151      	lsls	r1, r2, #5
 8007a20:	69fa      	ldr	r2, [r7, #28]
 8007a22:	440a      	add	r2, r1
 8007a24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a2c:	6013      	str	r3, [r2, #0]
 8007a2e:	e00f      	b.n	8007a50 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	015a      	lsls	r2, r3, #5
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	4413      	add	r3, r2
 8007a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	0151      	lsls	r1, r2, #5
 8007a42:	69fa      	ldr	r2, [r7, #28]
 8007a44:	440a      	add	r2, r1
 8007a46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a4e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	015a      	lsls	r2, r3, #5
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	4413      	add	r3, r2
 8007a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	69ba      	ldr	r2, [r7, #24]
 8007a60:	0151      	lsls	r1, r2, #5
 8007a62:	69fa      	ldr	r2, [r7, #28]
 8007a64:	440a      	add	r2, r1
 8007a66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3720      	adds	r7, #32
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	fff80000 	.word	0xfff80000
 8007a80:	e007ffff 	.word	0xe007ffff
 8007a84:	1ff80000 	.word	0x1ff80000

08007a88 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b087      	sub	sp, #28
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	4613      	mov	r3, r2
 8007a94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	785b      	ldrb	r3, [r3, #1]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	f040 80ce 	bne.w	8007c46 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	699b      	ldr	r3, [r3, #24]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d132      	bne.n	8007b18 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	015a      	lsls	r2, r3, #5
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	4413      	add	r3, r2
 8007aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007abe:	691a      	ldr	r2, [r3, #16]
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	0159      	lsls	r1, r3, #5
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	440b      	add	r3, r1
 8007ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007acc:	4619      	mov	r1, r3
 8007ace:	4b9a      	ldr	r3, [pc, #616]	; (8007d38 <USB_EP0StartXfer+0x2b0>)
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	015a      	lsls	r2, r3, #5
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	4413      	add	r3, r2
 8007adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	693a      	ldr	r2, [r7, #16]
 8007ae4:	0151      	lsls	r1, r2, #5
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	440a      	add	r2, r1
 8007aea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007aee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007af2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	015a      	lsls	r2, r3, #5
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	4413      	add	r3, r2
 8007afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b00:	691a      	ldr	r2, [r3, #16]
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	0159      	lsls	r1, r3, #5
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	440b      	add	r3, r1
 8007b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b0e:	4619      	mov	r1, r3
 8007b10:	4b8a      	ldr	r3, [pc, #552]	; (8007d3c <USB_EP0StartXfer+0x2b4>)
 8007b12:	4013      	ands	r3, r2
 8007b14:	610b      	str	r3, [r1, #16]
 8007b16:	e04e      	b.n	8007bb6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	015a      	lsls	r2, r3, #5
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	4413      	add	r3, r2
 8007b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b24:	691a      	ldr	r2, [r3, #16]
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	0159      	lsls	r1, r3, #5
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	440b      	add	r3, r1
 8007b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b32:	4619      	mov	r1, r3
 8007b34:	4b81      	ldr	r3, [pc, #516]	; (8007d3c <USB_EP0StartXfer+0x2b4>)
 8007b36:	4013      	ands	r3, r2
 8007b38:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	015a      	lsls	r2, r3, #5
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	4413      	add	r3, r2
 8007b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b46:	691a      	ldr	r2, [r3, #16]
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	0159      	lsls	r1, r3, #5
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	440b      	add	r3, r1
 8007b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b54:	4619      	mov	r1, r3
 8007b56:	4b78      	ldr	r3, [pc, #480]	; (8007d38 <USB_EP0StartXfer+0x2b0>)
 8007b58:	4013      	ands	r3, r2
 8007b5a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	699a      	ldr	r2, [r3, #24]
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d903      	bls.n	8007b70 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	68da      	ldr	r2, [r3, #12]
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	015a      	lsls	r2, r3, #5
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	4413      	add	r3, r2
 8007b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	693a      	ldr	r2, [r7, #16]
 8007b80:	0151      	lsls	r1, r2, #5
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	440a      	add	r2, r1
 8007b86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	015a      	lsls	r2, r3, #5
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	4413      	add	r3, r2
 8007b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b9c:	691a      	ldr	r2, [r3, #16]
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	699b      	ldr	r3, [r3, #24]
 8007ba2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ba6:	6939      	ldr	r1, [r7, #16]
 8007ba8:	0148      	lsls	r0, r1, #5
 8007baa:	6979      	ldr	r1, [r7, #20]
 8007bac:	4401      	add	r1, r0
 8007bae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007bb6:	79fb      	ldrb	r3, [r7, #7]
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d11e      	bne.n	8007bfa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	695b      	ldr	r3, [r3, #20]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d009      	beq.n	8007bd8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	015a      	lsls	r2, r3, #5
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	4413      	add	r3, r2
 8007bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	695b      	ldr	r3, [r3, #20]
 8007bd6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	015a      	lsls	r2, r3, #5
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	4413      	add	r3, r2
 8007be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	693a      	ldr	r2, [r7, #16]
 8007be8:	0151      	lsls	r1, r2, #5
 8007bea:	697a      	ldr	r2, [r7, #20]
 8007bec:	440a      	add	r2, r1
 8007bee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bf2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007bf6:	6013      	str	r3, [r2, #0]
 8007bf8:	e097      	b.n	8007d2a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	015a      	lsls	r2, r3, #5
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	4413      	add	r3, r2
 8007c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	693a      	ldr	r2, [r7, #16]
 8007c0a:	0151      	lsls	r1, r2, #5
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	440a      	add	r2, r1
 8007c10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c18:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	699b      	ldr	r3, [r3, #24]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	f000 8083 	beq.w	8007d2a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	f003 030f 	and.w	r3, r3, #15
 8007c34:	2101      	movs	r1, #1
 8007c36:	fa01 f303 	lsl.w	r3, r1, r3
 8007c3a:	6979      	ldr	r1, [r7, #20]
 8007c3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c40:	4313      	orrs	r3, r2
 8007c42:	634b      	str	r3, [r1, #52]	; 0x34
 8007c44:	e071      	b.n	8007d2a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	015a      	lsls	r2, r3, #5
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c52:	691a      	ldr	r2, [r3, #16]
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	0159      	lsls	r1, r3, #5
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	440b      	add	r3, r1
 8007c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c60:	4619      	mov	r1, r3
 8007c62:	4b36      	ldr	r3, [pc, #216]	; (8007d3c <USB_EP0StartXfer+0x2b4>)
 8007c64:	4013      	ands	r3, r2
 8007c66:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	015a      	lsls	r2, r3, #5
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	4413      	add	r3, r2
 8007c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c74:	691a      	ldr	r2, [r3, #16]
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	0159      	lsls	r1, r3, #5
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	440b      	add	r3, r1
 8007c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c82:	4619      	mov	r1, r3
 8007c84:	4b2c      	ldr	r3, [pc, #176]	; (8007d38 <USB_EP0StartXfer+0x2b0>)
 8007c86:	4013      	ands	r3, r2
 8007c88:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d003      	beq.n	8007c9a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	68da      	ldr	r2, [r3, #12]
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	68da      	ldr	r2, [r3, #12]
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	015a      	lsls	r2, r3, #5
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	4413      	add	r3, r2
 8007caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cae:	691b      	ldr	r3, [r3, #16]
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	0151      	lsls	r1, r2, #5
 8007cb4:	697a      	ldr	r2, [r7, #20]
 8007cb6:	440a      	add	r2, r1
 8007cb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007cc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	015a      	lsls	r2, r3, #5
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	4413      	add	r3, r2
 8007cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cce:	691a      	ldr	r2, [r3, #16]
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	69db      	ldr	r3, [r3, #28]
 8007cd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cd8:	6939      	ldr	r1, [r7, #16]
 8007cda:	0148      	lsls	r0, r1, #5
 8007cdc:	6979      	ldr	r1, [r7, #20]
 8007cde:	4401      	add	r1, r0
 8007ce0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007ce8:	79fb      	ldrb	r3, [r7, #7]
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d10d      	bne.n	8007d0a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d009      	beq.n	8007d0a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	6919      	ldr	r1, [r3, #16]
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	015a      	lsls	r2, r3, #5
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	4413      	add	r3, r2
 8007d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d06:	460a      	mov	r2, r1
 8007d08:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	015a      	lsls	r2, r3, #5
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	4413      	add	r3, r2
 8007d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	693a      	ldr	r2, [r7, #16]
 8007d1a:	0151      	lsls	r1, r2, #5
 8007d1c:	697a      	ldr	r2, [r7, #20]
 8007d1e:	440a      	add	r2, r1
 8007d20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d24:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d28:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	371c      	adds	r7, #28
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr
 8007d38:	e007ffff 	.word	0xe007ffff
 8007d3c:	fff80000 	.word	0xfff80000

08007d40 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b087      	sub	sp, #28
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	785b      	ldrb	r3, [r3, #1]
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d14a      	bne.n	8007df4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	015a      	lsls	r2, r3, #5
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	4413      	add	r3, r2
 8007d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d76:	f040 8086 	bne.w	8007e86 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	015a      	lsls	r2, r3, #5
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	4413      	add	r3, r2
 8007d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	683a      	ldr	r2, [r7, #0]
 8007d8c:	7812      	ldrb	r2, [r2, #0]
 8007d8e:	0151      	lsls	r1, r2, #5
 8007d90:	693a      	ldr	r2, [r7, #16]
 8007d92:	440a      	add	r2, r1
 8007d94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d98:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007d9c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	015a      	lsls	r2, r3, #5
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	4413      	add	r3, r2
 8007da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	683a      	ldr	r2, [r7, #0]
 8007db0:	7812      	ldrb	r2, [r2, #0]
 8007db2:	0151      	lsls	r1, r2, #5
 8007db4:	693a      	ldr	r2, [r7, #16]
 8007db6:	440a      	add	r2, r1
 8007db8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007dc0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f242 7210 	movw	r2, #10000	; 0x2710
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d902      	bls.n	8007dd8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	75fb      	strb	r3, [r7, #23]
          break;
 8007dd6:	e056      	b.n	8007e86 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	015a      	lsls	r2, r3, #5
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	4413      	add	r3, r2
 8007de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007dec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007df0:	d0e7      	beq.n	8007dc2 <USB_EPStopXfer+0x82>
 8007df2:	e048      	b.n	8007e86 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	015a      	lsls	r2, r3, #5
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e0c:	d13b      	bne.n	8007e86 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	015a      	lsls	r2, r3, #5
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	4413      	add	r3, r2
 8007e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	683a      	ldr	r2, [r7, #0]
 8007e20:	7812      	ldrb	r2, [r2, #0]
 8007e22:	0151      	lsls	r1, r2, #5
 8007e24:	693a      	ldr	r2, [r7, #16]
 8007e26:	440a      	add	r2, r1
 8007e28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e2c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007e30:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	015a      	lsls	r2, r3, #5
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	683a      	ldr	r2, [r7, #0]
 8007e44:	7812      	ldrb	r2, [r2, #0]
 8007e46:	0151      	lsls	r1, r2, #5
 8007e48:	693a      	ldr	r2, [r7, #16]
 8007e4a:	440a      	add	r2, r1
 8007e4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e54:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d902      	bls.n	8007e6c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	75fb      	strb	r3, [r7, #23]
          break;
 8007e6a:	e00c      	b.n	8007e86 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	015a      	lsls	r2, r3, #5
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	4413      	add	r3, r2
 8007e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e84:	d0e7      	beq.n	8007e56 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	371c      	adds	r7, #28
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b089      	sub	sp, #36	; 0x24
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	4611      	mov	r1, r2
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	71fb      	strb	r3, [r7, #7]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007eb2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d123      	bne.n	8007f02 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007eba:	88bb      	ldrh	r3, [r7, #4]
 8007ebc:	3303      	adds	r3, #3
 8007ebe:	089b      	lsrs	r3, r3, #2
 8007ec0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	61bb      	str	r3, [r7, #24]
 8007ec6:	e018      	b.n	8007efa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007ec8:	79fb      	ldrb	r3, [r7, #7]
 8007eca:	031a      	lsls	r2, r3, #12
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	4413      	add	r3, r2
 8007ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	3301      	adds	r3, #1
 8007ee0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	3301      	adds	r3, #1
 8007eec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	61bb      	str	r3, [r7, #24]
 8007efa:	69ba      	ldr	r2, [r7, #24]
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d3e2      	bcc.n	8007ec8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007f02:	2300      	movs	r3, #0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3724      	adds	r7, #36	; 0x24
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b08b      	sub	sp, #44	; 0x2c
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007f26:	88fb      	ldrh	r3, [r7, #6]
 8007f28:	089b      	lsrs	r3, r3, #2
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007f2e:	88fb      	ldrh	r3, [r7, #6]
 8007f30:	f003 0303 	and.w	r3, r3, #3
 8007f34:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007f36:	2300      	movs	r3, #0
 8007f38:	623b      	str	r3, [r7, #32]
 8007f3a:	e014      	b.n	8007f66 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f46:	601a      	str	r2, [r3, #0]
    pDest++;
 8007f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f50:	3301      	adds	r3, #1
 8007f52:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f56:	3301      	adds	r3, #1
 8007f58:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007f60:	6a3b      	ldr	r3, [r7, #32]
 8007f62:	3301      	adds	r3, #1
 8007f64:	623b      	str	r3, [r7, #32]
 8007f66:	6a3a      	ldr	r2, [r7, #32]
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d3e6      	bcc.n	8007f3c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007f6e:	8bfb      	ldrh	r3, [r7, #30]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d01e      	beq.n	8007fb2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007f74:	2300      	movs	r3, #0
 8007f76:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f7e:	461a      	mov	r2, r3
 8007f80:	f107 0310 	add.w	r3, r7, #16
 8007f84:	6812      	ldr	r2, [r2, #0]
 8007f86:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007f88:	693a      	ldr	r2, [r7, #16]
 8007f8a:	6a3b      	ldr	r3, [r7, #32]
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	00db      	lsls	r3, r3, #3
 8007f90:	fa22 f303 	lsr.w	r3, r2, r3
 8007f94:	b2da      	uxtb	r2, r3
 8007f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f98:	701a      	strb	r2, [r3, #0]
      i++;
 8007f9a:	6a3b      	ldr	r3, [r7, #32]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007fa6:	8bfb      	ldrh	r3, [r7, #30]
 8007fa8:	3b01      	subs	r3, #1
 8007faa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007fac:	8bfb      	ldrh	r3, [r7, #30]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d1ea      	bne.n	8007f88 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	372c      	adds	r7, #44	; 0x2c
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b085      	sub	sp, #20
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	785b      	ldrb	r3, [r3, #1]
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d12c      	bne.n	8008036 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	015a      	lsls	r2, r3, #5
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	db12      	blt.n	8008014 <USB_EPSetStall+0x54>
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00f      	beq.n	8008014 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	015a      	lsls	r2, r3, #5
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	68ba      	ldr	r2, [r7, #8]
 8008004:	0151      	lsls	r1, r2, #5
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	440a      	add	r2, r1
 800800a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800800e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008012:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	015a      	lsls	r2, r3, #5
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	4413      	add	r3, r2
 800801c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	68ba      	ldr	r2, [r7, #8]
 8008024:	0151      	lsls	r1, r2, #5
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	440a      	add	r2, r1
 800802a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800802e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008032:	6013      	str	r3, [r2, #0]
 8008034:	e02b      	b.n	800808e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	015a      	lsls	r2, r3, #5
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	4413      	add	r3, r2
 800803e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	db12      	blt.n	800806e <USB_EPSetStall+0xae>
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d00f      	beq.n	800806e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	015a      	lsls	r2, r3, #5
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	4413      	add	r3, r2
 8008056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	68ba      	ldr	r2, [r7, #8]
 800805e:	0151      	lsls	r1, r2, #5
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	440a      	add	r2, r1
 8008064:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008068:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800806c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	015a      	lsls	r2, r3, #5
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	4413      	add	r3, r2
 8008076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	68ba      	ldr	r2, [r7, #8]
 800807e:	0151      	lsls	r1, r2, #5
 8008080:	68fa      	ldr	r2, [r7, #12]
 8008082:	440a      	add	r2, r1
 8008084:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008088:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800808c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800808e:	2300      	movs	r3, #0
}
 8008090:	4618      	mov	r0, r3
 8008092:	3714      	adds	r7, #20
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	785b      	ldrb	r3, [r3, #1]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d128      	bne.n	800810a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	015a      	lsls	r2, r3, #5
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	4413      	add	r3, r2
 80080c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	68ba      	ldr	r2, [r7, #8]
 80080c8:	0151      	lsls	r1, r2, #5
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	440a      	add	r2, r1
 80080ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80080d6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	791b      	ldrb	r3, [r3, #4]
 80080dc:	2b03      	cmp	r3, #3
 80080de:	d003      	beq.n	80080e8 <USB_EPClearStall+0x4c>
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	791b      	ldrb	r3, [r3, #4]
 80080e4:	2b02      	cmp	r3, #2
 80080e6:	d138      	bne.n	800815a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	015a      	lsls	r2, r3, #5
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	4413      	add	r3, r2
 80080f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	68ba      	ldr	r2, [r7, #8]
 80080f8:	0151      	lsls	r1, r2, #5
 80080fa:	68fa      	ldr	r2, [r7, #12]
 80080fc:	440a      	add	r2, r1
 80080fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008106:	6013      	str	r3, [r2, #0]
 8008108:	e027      	b.n	800815a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	015a      	lsls	r2, r3, #5
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	4413      	add	r3, r2
 8008112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	68ba      	ldr	r2, [r7, #8]
 800811a:	0151      	lsls	r1, r2, #5
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	440a      	add	r2, r1
 8008120:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008124:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008128:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	791b      	ldrb	r3, [r3, #4]
 800812e:	2b03      	cmp	r3, #3
 8008130:	d003      	beq.n	800813a <USB_EPClearStall+0x9e>
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	791b      	ldrb	r3, [r3, #4]
 8008136:	2b02      	cmp	r3, #2
 8008138:	d10f      	bne.n	800815a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	015a      	lsls	r2, r3, #5
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	4413      	add	r3, r2
 8008142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	68ba      	ldr	r2, [r7, #8]
 800814a:	0151      	lsls	r1, r2, #5
 800814c:	68fa      	ldr	r2, [r7, #12]
 800814e:	440a      	add	r2, r1
 8008150:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008158:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	3714      	adds	r7, #20
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	460b      	mov	r3, r1
 8008172:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008186:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800818a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	78fb      	ldrb	r3, [r7, #3]
 8008196:	011b      	lsls	r3, r3, #4
 8008198:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800819c:	68f9      	ldr	r1, [r7, #12]
 800819e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081a2:	4313      	orrs	r3, r2
 80081a4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3714      	adds	r7, #20
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b085      	sub	sp, #20
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80081ce:	f023 0303 	bic.w	r3, r3, #3
 80081d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081e2:	f023 0302 	bic.w	r3, r3, #2
 80081e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3714      	adds	r7, #20
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr

080081f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80081f6:	b480      	push	{r7}
 80081f8:	b085      	sub	sp, #20
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	68fa      	ldr	r2, [r7, #12]
 800820c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008210:	f023 0303 	bic.w	r3, r3, #3
 8008214:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008224:	f043 0302 	orr.w	r3, r3, #2
 8008228:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800822a:	2300      	movs	r3, #0
}
 800822c:	4618      	mov	r0, r3
 800822e:	3714      	adds	r7, #20
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008238:	b480      	push	{r7}
 800823a:	b085      	sub	sp, #20
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	695b      	ldr	r3, [r3, #20]
 8008244:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	699b      	ldr	r3, [r3, #24]
 800824a:	68fa      	ldr	r2, [r7, #12]
 800824c:	4013      	ands	r3, r2
 800824e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008250:	68fb      	ldr	r3, [r7, #12]
}
 8008252:	4618      	mov	r0, r3
 8008254:	3714      	adds	r7, #20
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr

0800825e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800825e:	b480      	push	{r7}
 8008260:	b085      	sub	sp, #20
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008270:	699b      	ldr	r3, [r3, #24]
 8008272:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800827a:	69db      	ldr	r3, [r3, #28]
 800827c:	68ba      	ldr	r2, [r7, #8]
 800827e:	4013      	ands	r3, r2
 8008280:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	0c1b      	lsrs	r3, r3, #16
}
 8008286:	4618      	mov	r0, r3
 8008288:	3714      	adds	r7, #20
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr

08008292 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008292:	b480      	push	{r7}
 8008294:	b085      	sub	sp, #20
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082a4:	699b      	ldr	r3, [r3, #24]
 80082a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082ae:	69db      	ldr	r3, [r3, #28]
 80082b0:	68ba      	ldr	r2, [r7, #8]
 80082b2:	4013      	ands	r3, r2
 80082b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	b29b      	uxth	r3, r3
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3714      	adds	r7, #20
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr

080082c6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80082c6:	b480      	push	{r7}
 80082c8:	b085      	sub	sp, #20
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
 80082ce:	460b      	mov	r3, r1
 80082d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80082d6:	78fb      	ldrb	r3, [r7, #3]
 80082d8:	015a      	lsls	r2, r3, #5
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	4413      	add	r3, r2
 80082de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082ec:	695b      	ldr	r3, [r3, #20]
 80082ee:	68ba      	ldr	r2, [r7, #8]
 80082f0:	4013      	ands	r3, r2
 80082f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80082f4:	68bb      	ldr	r3, [r7, #8]
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3714      	adds	r7, #20
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr

08008302 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008302:	b480      	push	{r7}
 8008304:	b087      	sub	sp, #28
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
 800830a:	460b      	mov	r3, r1
 800830c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008318:	691b      	ldr	r3, [r3, #16]
 800831a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008324:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008326:	78fb      	ldrb	r3, [r7, #3]
 8008328:	f003 030f 	and.w	r3, r3, #15
 800832c:	68fa      	ldr	r2, [r7, #12]
 800832e:	fa22 f303 	lsr.w	r3, r2, r3
 8008332:	01db      	lsls	r3, r3, #7
 8008334:	b2db      	uxtb	r3, r3
 8008336:	693a      	ldr	r2, [r7, #16]
 8008338:	4313      	orrs	r3, r2
 800833a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800833c:	78fb      	ldrb	r3, [r7, #3]
 800833e:	015a      	lsls	r2, r3, #5
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	4413      	add	r3, r2
 8008344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	693a      	ldr	r2, [r7, #16]
 800834c:	4013      	ands	r3, r2
 800834e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008350:	68bb      	ldr	r3, [r7, #8]
}
 8008352:	4618      	mov	r0, r3
 8008354:	371c      	adds	r7, #28
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr

0800835e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800835e:	b480      	push	{r7}
 8008360:	b083      	sub	sp, #12
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	695b      	ldr	r3, [r3, #20]
 800836a:	f003 0301 	and.w	r3, r3, #1
}
 800836e:	4618      	mov	r0, r3
 8008370:	370c      	adds	r7, #12
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr
	...

0800837c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008396:	4619      	mov	r1, r3
 8008398:	4b09      	ldr	r3, [pc, #36]	; (80083c0 <USB_ActivateSetup+0x44>)
 800839a:	4013      	ands	r3, r2
 800839c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	68fa      	ldr	r2, [r7, #12]
 80083a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3714      	adds	r7, #20
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr
 80083c0:	fffff800 	.word	0xfffff800

080083c4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b087      	sub	sp, #28
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	460b      	mov	r3, r1
 80083ce:	607a      	str	r2, [r7, #4]
 80083d0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	333c      	adds	r3, #60	; 0x3c
 80083da:	3304      	adds	r3, #4
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	4a26      	ldr	r2, [pc, #152]	; (800847c <USB_EP0_OutStart+0xb8>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d90a      	bls.n	80083fe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083f8:	d101      	bne.n	80083fe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80083fa:	2300      	movs	r3, #0
 80083fc:	e037      	b.n	800846e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008404:	461a      	mov	r2, r3
 8008406:	2300      	movs	r3, #0
 8008408:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	697a      	ldr	r2, [r7, #20]
 8008414:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008418:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800841c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	697a      	ldr	r2, [r7, #20]
 8008428:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800842c:	f043 0318 	orr.w	r3, r3, #24
 8008430:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	697a      	ldr	r2, [r7, #20]
 800843c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008440:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008444:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008446:	7afb      	ldrb	r3, [r7, #11]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d10f      	bne.n	800846c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008452:	461a      	mov	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	697a      	ldr	r2, [r7, #20]
 8008462:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008466:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800846a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	371c      	adds	r7, #28
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop
 800847c:	4f54300a 	.word	0x4f54300a

08008480 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008480:	b480      	push	{r7}
 8008482:	b085      	sub	sp, #20
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008488:	2300      	movs	r3, #0
 800848a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	3301      	adds	r3, #1
 8008490:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	4a13      	ldr	r2, [pc, #76]	; (80084e4 <USB_CoreReset+0x64>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d901      	bls.n	800849e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800849a:	2303      	movs	r3, #3
 800849c:	e01b      	b.n	80084d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	691b      	ldr	r3, [r3, #16]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	daf2      	bge.n	800848c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80084a6:	2300      	movs	r3, #0
 80084a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	f043 0201 	orr.w	r2, r3, #1
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	3301      	adds	r3, #1
 80084ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	4a09      	ldr	r2, [pc, #36]	; (80084e4 <USB_CoreReset+0x64>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d901      	bls.n	80084c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80084c4:	2303      	movs	r3, #3
 80084c6:	e006      	b.n	80084d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	691b      	ldr	r3, [r3, #16]
 80084cc:	f003 0301 	and.w	r3, r3, #1
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d0f0      	beq.n	80084b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3714      	adds	r7, #20
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
 80084e2:	bf00      	nop
 80084e4:	00030d40 	.word	0x00030d40

080084e8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	460b      	mov	r3, r1
 80084f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80084f4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80084f8:	f002 fcd4 	bl	800aea4 <USBD_static_malloc>
 80084fc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d109      	bne.n	8008518 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	32b0      	adds	r2, #176	; 0xb0
 800850e:	2100      	movs	r1, #0
 8008510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008514:	2302      	movs	r3, #2
 8008516:	e0d4      	b.n	80086c2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008518:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800851c:	2100      	movs	r1, #0
 800851e:	68f8      	ldr	r0, [r7, #12]
 8008520:	f002 fd28 	bl	800af74 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	32b0      	adds	r2, #176	; 0xb0
 800852e:	68f9      	ldr	r1, [r7, #12]
 8008530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	32b0      	adds	r2, #176	; 0xb0
 800853e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	7c1b      	ldrb	r3, [r3, #16]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d138      	bne.n	80085c2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008550:	4b5e      	ldr	r3, [pc, #376]	; (80086cc <USBD_CDC_Init+0x1e4>)
 8008552:	7819      	ldrb	r1, [r3, #0]
 8008554:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008558:	2202      	movs	r2, #2
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f002 fb7f 	bl	800ac5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008560:	4b5a      	ldr	r3, [pc, #360]	; (80086cc <USBD_CDC_Init+0x1e4>)
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	f003 020f 	and.w	r2, r3, #15
 8008568:	6879      	ldr	r1, [r7, #4]
 800856a:	4613      	mov	r3, r2
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	4413      	add	r3, r2
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	440b      	add	r3, r1
 8008574:	3324      	adds	r3, #36	; 0x24
 8008576:	2201      	movs	r2, #1
 8008578:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800857a:	4b55      	ldr	r3, [pc, #340]	; (80086d0 <USBD_CDC_Init+0x1e8>)
 800857c:	7819      	ldrb	r1, [r3, #0]
 800857e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008582:	2202      	movs	r2, #2
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f002 fb6a 	bl	800ac5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800858a:	4b51      	ldr	r3, [pc, #324]	; (80086d0 <USBD_CDC_Init+0x1e8>)
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	f003 020f 	and.w	r2, r3, #15
 8008592:	6879      	ldr	r1, [r7, #4]
 8008594:	4613      	mov	r3, r2
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	4413      	add	r3, r2
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	440b      	add	r3, r1
 800859e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80085a2:	2201      	movs	r2, #1
 80085a4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80085a6:	4b4b      	ldr	r3, [pc, #300]	; (80086d4 <USBD_CDC_Init+0x1ec>)
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	f003 020f 	and.w	r2, r3, #15
 80085ae:	6879      	ldr	r1, [r7, #4]
 80085b0:	4613      	mov	r3, r2
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	4413      	add	r3, r2
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	440b      	add	r3, r1
 80085ba:	3326      	adds	r3, #38	; 0x26
 80085bc:	2210      	movs	r2, #16
 80085be:	801a      	strh	r2, [r3, #0]
 80085c0:	e035      	b.n	800862e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80085c2:	4b42      	ldr	r3, [pc, #264]	; (80086cc <USBD_CDC_Init+0x1e4>)
 80085c4:	7819      	ldrb	r1, [r3, #0]
 80085c6:	2340      	movs	r3, #64	; 0x40
 80085c8:	2202      	movs	r2, #2
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f002 fb47 	bl	800ac5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80085d0:	4b3e      	ldr	r3, [pc, #248]	; (80086cc <USBD_CDC_Init+0x1e4>)
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	f003 020f 	and.w	r2, r3, #15
 80085d8:	6879      	ldr	r1, [r7, #4]
 80085da:	4613      	mov	r3, r2
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	4413      	add	r3, r2
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	440b      	add	r3, r1
 80085e4:	3324      	adds	r3, #36	; 0x24
 80085e6:	2201      	movs	r2, #1
 80085e8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80085ea:	4b39      	ldr	r3, [pc, #228]	; (80086d0 <USBD_CDC_Init+0x1e8>)
 80085ec:	7819      	ldrb	r1, [r3, #0]
 80085ee:	2340      	movs	r3, #64	; 0x40
 80085f0:	2202      	movs	r2, #2
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f002 fb33 	bl	800ac5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80085f8:	4b35      	ldr	r3, [pc, #212]	; (80086d0 <USBD_CDC_Init+0x1e8>)
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	f003 020f 	and.w	r2, r3, #15
 8008600:	6879      	ldr	r1, [r7, #4]
 8008602:	4613      	mov	r3, r2
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	4413      	add	r3, r2
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	440b      	add	r3, r1
 800860c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008610:	2201      	movs	r2, #1
 8008612:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008614:	4b2f      	ldr	r3, [pc, #188]	; (80086d4 <USBD_CDC_Init+0x1ec>)
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	f003 020f 	and.w	r2, r3, #15
 800861c:	6879      	ldr	r1, [r7, #4]
 800861e:	4613      	mov	r3, r2
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	4413      	add	r3, r2
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	440b      	add	r3, r1
 8008628:	3326      	adds	r3, #38	; 0x26
 800862a:	2210      	movs	r2, #16
 800862c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800862e:	4b29      	ldr	r3, [pc, #164]	; (80086d4 <USBD_CDC_Init+0x1ec>)
 8008630:	7819      	ldrb	r1, [r3, #0]
 8008632:	2308      	movs	r3, #8
 8008634:	2203      	movs	r2, #3
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f002 fb11 	bl	800ac5e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800863c:	4b25      	ldr	r3, [pc, #148]	; (80086d4 <USBD_CDC_Init+0x1ec>)
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	f003 020f 	and.w	r2, r3, #15
 8008644:	6879      	ldr	r1, [r7, #4]
 8008646:	4613      	mov	r3, r2
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	4413      	add	r3, r2
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	440b      	add	r3, r1
 8008650:	3324      	adds	r3, #36	; 0x24
 8008652:	2201      	movs	r2, #1
 8008654:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2200      	movs	r2, #0
 800865a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	33b0      	adds	r3, #176	; 0xb0
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	4413      	add	r3, r2
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2200      	movs	r2, #0
 8008676:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2200      	movs	r2, #0
 800867e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008688:	2b00      	cmp	r3, #0
 800868a:	d101      	bne.n	8008690 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800868c:	2302      	movs	r3, #2
 800868e:	e018      	b.n	80086c2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	7c1b      	ldrb	r3, [r3, #16]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d10a      	bne.n	80086ae <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008698:	4b0d      	ldr	r3, [pc, #52]	; (80086d0 <USBD_CDC_Init+0x1e8>)
 800869a:	7819      	ldrb	r1, [r3, #0]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80086a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f002 fbc8 	bl	800ae3c <USBD_LL_PrepareReceive>
 80086ac:	e008      	b.n	80086c0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80086ae:	4b08      	ldr	r3, [pc, #32]	; (80086d0 <USBD_CDC_Init+0x1e8>)
 80086b0:	7819      	ldrb	r1, [r3, #0]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80086b8:	2340      	movs	r3, #64	; 0x40
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f002 fbbe 	bl	800ae3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	24000097 	.word	0x24000097
 80086d0:	24000098 	.word	0x24000098
 80086d4:	24000099 	.word	0x24000099

080086d8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	460b      	mov	r3, r1
 80086e2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80086e4:	4b3a      	ldr	r3, [pc, #232]	; (80087d0 <USBD_CDC_DeInit+0xf8>)
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	4619      	mov	r1, r3
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f002 fadd 	bl	800acaa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80086f0:	4b37      	ldr	r3, [pc, #220]	; (80087d0 <USBD_CDC_DeInit+0xf8>)
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	f003 020f 	and.w	r2, r3, #15
 80086f8:	6879      	ldr	r1, [r7, #4]
 80086fa:	4613      	mov	r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	4413      	add	r3, r2
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	440b      	add	r3, r1
 8008704:	3324      	adds	r3, #36	; 0x24
 8008706:	2200      	movs	r2, #0
 8008708:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800870a:	4b32      	ldr	r3, [pc, #200]	; (80087d4 <USBD_CDC_DeInit+0xfc>)
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	4619      	mov	r1, r3
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f002 faca 	bl	800acaa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008716:	4b2f      	ldr	r3, [pc, #188]	; (80087d4 <USBD_CDC_DeInit+0xfc>)
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	f003 020f 	and.w	r2, r3, #15
 800871e:	6879      	ldr	r1, [r7, #4]
 8008720:	4613      	mov	r3, r2
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	4413      	add	r3, r2
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	440b      	add	r3, r1
 800872a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800872e:	2200      	movs	r2, #0
 8008730:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008732:	4b29      	ldr	r3, [pc, #164]	; (80087d8 <USBD_CDC_DeInit+0x100>)
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	4619      	mov	r1, r3
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f002 fab6 	bl	800acaa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800873e:	4b26      	ldr	r3, [pc, #152]	; (80087d8 <USBD_CDC_DeInit+0x100>)
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	f003 020f 	and.w	r2, r3, #15
 8008746:	6879      	ldr	r1, [r7, #4]
 8008748:	4613      	mov	r3, r2
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	4413      	add	r3, r2
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	440b      	add	r3, r1
 8008752:	3324      	adds	r3, #36	; 0x24
 8008754:	2200      	movs	r2, #0
 8008756:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008758:	4b1f      	ldr	r3, [pc, #124]	; (80087d8 <USBD_CDC_DeInit+0x100>)
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	f003 020f 	and.w	r2, r3, #15
 8008760:	6879      	ldr	r1, [r7, #4]
 8008762:	4613      	mov	r3, r2
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	4413      	add	r3, r2
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	440b      	add	r3, r1
 800876c:	3326      	adds	r3, #38	; 0x26
 800876e:	2200      	movs	r2, #0
 8008770:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	32b0      	adds	r2, #176	; 0xb0
 800877c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d01f      	beq.n	80087c4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	33b0      	adds	r3, #176	; 0xb0
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	4413      	add	r3, r2
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	32b0      	adds	r2, #176	; 0xb0
 80087a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087a6:	4618      	mov	r0, r3
 80087a8:	f002 fb8a 	bl	800aec0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	32b0      	adds	r2, #176	; 0xb0
 80087b6:	2100      	movs	r1, #0
 80087b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3708      	adds	r7, #8
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	24000097 	.word	0x24000097
 80087d4:	24000098 	.word	0x24000098
 80087d8:	24000099 	.word	0x24000099

080087dc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b086      	sub	sp, #24
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	32b0      	adds	r2, #176	; 0xb0
 80087f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087f4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80087f6:	2300      	movs	r3, #0
 80087f8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80087fa:	2300      	movs	r3, #0
 80087fc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80087fe:	2300      	movs	r3, #0
 8008800:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d101      	bne.n	800880c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008808:	2303      	movs	r3, #3
 800880a:	e0bf      	b.n	800898c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008814:	2b00      	cmp	r3, #0
 8008816:	d050      	beq.n	80088ba <USBD_CDC_Setup+0xde>
 8008818:	2b20      	cmp	r3, #32
 800881a:	f040 80af 	bne.w	800897c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	88db      	ldrh	r3, [r3, #6]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d03a      	beq.n	800889c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	b25b      	sxtb	r3, r3
 800882c:	2b00      	cmp	r3, #0
 800882e:	da1b      	bge.n	8008868 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	33b0      	adds	r3, #176	; 0xb0
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	4413      	add	r3, r2
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	683a      	ldr	r2, [r7, #0]
 8008844:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008846:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008848:	683a      	ldr	r2, [r7, #0]
 800884a:	88d2      	ldrh	r2, [r2, #6]
 800884c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	88db      	ldrh	r3, [r3, #6]
 8008852:	2b07      	cmp	r3, #7
 8008854:	bf28      	it	cs
 8008856:	2307      	movcs	r3, #7
 8008858:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	89fa      	ldrh	r2, [r7, #14]
 800885e:	4619      	mov	r1, r3
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f001 fd89 	bl	800a378 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008866:	e090      	b.n	800898a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	785a      	ldrb	r2, [r3, #1]
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	88db      	ldrh	r3, [r3, #6]
 8008876:	2b3f      	cmp	r3, #63	; 0x3f
 8008878:	d803      	bhi.n	8008882 <USBD_CDC_Setup+0xa6>
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	88db      	ldrh	r3, [r3, #6]
 800887e:	b2da      	uxtb	r2, r3
 8008880:	e000      	b.n	8008884 <USBD_CDC_Setup+0xa8>
 8008882:	2240      	movs	r2, #64	; 0x40
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800888a:	6939      	ldr	r1, [r7, #16]
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008892:	461a      	mov	r2, r3
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f001 fd9b 	bl	800a3d0 <USBD_CtlPrepareRx>
      break;
 800889a:	e076      	b.n	800898a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	33b0      	adds	r3, #176	; 0xb0
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	4413      	add	r3, r2
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	683a      	ldr	r2, [r7, #0]
 80088b0:	7850      	ldrb	r0, [r2, #1]
 80088b2:	2200      	movs	r2, #0
 80088b4:	6839      	ldr	r1, [r7, #0]
 80088b6:	4798      	blx	r3
      break;
 80088b8:	e067      	b.n	800898a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	785b      	ldrb	r3, [r3, #1]
 80088be:	2b0b      	cmp	r3, #11
 80088c0:	d851      	bhi.n	8008966 <USBD_CDC_Setup+0x18a>
 80088c2:	a201      	add	r2, pc, #4	; (adr r2, 80088c8 <USBD_CDC_Setup+0xec>)
 80088c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c8:	080088f9 	.word	0x080088f9
 80088cc:	08008975 	.word	0x08008975
 80088d0:	08008967 	.word	0x08008967
 80088d4:	08008967 	.word	0x08008967
 80088d8:	08008967 	.word	0x08008967
 80088dc:	08008967 	.word	0x08008967
 80088e0:	08008967 	.word	0x08008967
 80088e4:	08008967 	.word	0x08008967
 80088e8:	08008967 	.word	0x08008967
 80088ec:	08008967 	.word	0x08008967
 80088f0:	08008923 	.word	0x08008923
 80088f4:	0800894d 	.word	0x0800894d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	2b03      	cmp	r3, #3
 8008902:	d107      	bne.n	8008914 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008904:	f107 030a 	add.w	r3, r7, #10
 8008908:	2202      	movs	r2, #2
 800890a:	4619      	mov	r1, r3
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f001 fd33 	bl	800a378 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008912:	e032      	b.n	800897a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008914:	6839      	ldr	r1, [r7, #0]
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f001 fcbd 	bl	800a296 <USBD_CtlError>
            ret = USBD_FAIL;
 800891c:	2303      	movs	r3, #3
 800891e:	75fb      	strb	r3, [r7, #23]
          break;
 8008920:	e02b      	b.n	800897a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008928:	b2db      	uxtb	r3, r3
 800892a:	2b03      	cmp	r3, #3
 800892c:	d107      	bne.n	800893e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800892e:	f107 030d 	add.w	r3, r7, #13
 8008932:	2201      	movs	r2, #1
 8008934:	4619      	mov	r1, r3
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f001 fd1e 	bl	800a378 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800893c:	e01d      	b.n	800897a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800893e:	6839      	ldr	r1, [r7, #0]
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f001 fca8 	bl	800a296 <USBD_CtlError>
            ret = USBD_FAIL;
 8008946:	2303      	movs	r3, #3
 8008948:	75fb      	strb	r3, [r7, #23]
          break;
 800894a:	e016      	b.n	800897a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008952:	b2db      	uxtb	r3, r3
 8008954:	2b03      	cmp	r3, #3
 8008956:	d00f      	beq.n	8008978 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008958:	6839      	ldr	r1, [r7, #0]
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f001 fc9b 	bl	800a296 <USBD_CtlError>
            ret = USBD_FAIL;
 8008960:	2303      	movs	r3, #3
 8008962:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008964:	e008      	b.n	8008978 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008966:	6839      	ldr	r1, [r7, #0]
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f001 fc94 	bl	800a296 <USBD_CtlError>
          ret = USBD_FAIL;
 800896e:	2303      	movs	r3, #3
 8008970:	75fb      	strb	r3, [r7, #23]
          break;
 8008972:	e002      	b.n	800897a <USBD_CDC_Setup+0x19e>
          break;
 8008974:	bf00      	nop
 8008976:	e008      	b.n	800898a <USBD_CDC_Setup+0x1ae>
          break;
 8008978:	bf00      	nop
      }
      break;
 800897a:	e006      	b.n	800898a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800897c:	6839      	ldr	r1, [r7, #0]
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f001 fc89 	bl	800a296 <USBD_CtlError>
      ret = USBD_FAIL;
 8008984:	2303      	movs	r3, #3
 8008986:	75fb      	strb	r3, [r7, #23]
      break;
 8008988:	bf00      	nop
  }

  return (uint8_t)ret;
 800898a:	7dfb      	ldrb	r3, [r7, #23]
}
 800898c:	4618      	mov	r0, r3
 800898e:	3718      	adds	r7, #24
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	460b      	mov	r3, r1
 800899e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80089a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	32b0      	adds	r2, #176	; 0xb0
 80089b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d101      	bne.n	80089be <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80089ba:	2303      	movs	r3, #3
 80089bc:	e065      	b.n	8008a8a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	32b0      	adds	r2, #176	; 0xb0
 80089c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089cc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80089ce:	78fb      	ldrb	r3, [r7, #3]
 80089d0:	f003 020f 	and.w	r2, r3, #15
 80089d4:	6879      	ldr	r1, [r7, #4]
 80089d6:	4613      	mov	r3, r2
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	4413      	add	r3, r2
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	440b      	add	r3, r1
 80089e0:	3318      	adds	r3, #24
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d02f      	beq.n	8008a48 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80089e8:	78fb      	ldrb	r3, [r7, #3]
 80089ea:	f003 020f 	and.w	r2, r3, #15
 80089ee:	6879      	ldr	r1, [r7, #4]
 80089f0:	4613      	mov	r3, r2
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	4413      	add	r3, r2
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	440b      	add	r3, r1
 80089fa:	3318      	adds	r3, #24
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	78fb      	ldrb	r3, [r7, #3]
 8008a00:	f003 010f 	and.w	r1, r3, #15
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	460b      	mov	r3, r1
 8008a08:	00db      	lsls	r3, r3, #3
 8008a0a:	440b      	add	r3, r1
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	4403      	add	r3, r0
 8008a10:	3348      	adds	r3, #72	; 0x48
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	fbb2 f1f3 	udiv	r1, r2, r3
 8008a18:	fb01 f303 	mul.w	r3, r1, r3
 8008a1c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d112      	bne.n	8008a48 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008a22:	78fb      	ldrb	r3, [r7, #3]
 8008a24:	f003 020f 	and.w	r2, r3, #15
 8008a28:	6879      	ldr	r1, [r7, #4]
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	4413      	add	r3, r2
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	440b      	add	r3, r1
 8008a34:	3318      	adds	r3, #24
 8008a36:	2200      	movs	r2, #0
 8008a38:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008a3a:	78f9      	ldrb	r1, [r7, #3]
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	2200      	movs	r2, #0
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f002 f9da 	bl	800adfa <USBD_LL_Transmit>
 8008a46:	e01f      	b.n	8008a88 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	33b0      	adds	r3, #176	; 0xb0
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	4413      	add	r3, r2
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	691b      	ldr	r3, [r3, #16]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d010      	beq.n	8008a88 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	33b0      	adds	r3, #176	; 0xb0
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	4413      	add	r3, r2
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	68ba      	ldr	r2, [r7, #8]
 8008a7a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008a7e:	68ba      	ldr	r2, [r7, #8]
 8008a80:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008a84:	78fa      	ldrb	r2, [r7, #3]
 8008a86:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3710      	adds	r7, #16
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b084      	sub	sp, #16
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	32b0      	adds	r2, #176	; 0xb0
 8008aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	32b0      	adds	r2, #176	; 0xb0
 8008ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d101      	bne.n	8008ac4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008ac0:	2303      	movs	r3, #3
 8008ac2:	e01a      	b.n	8008afa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008ac4:	78fb      	ldrb	r3, [r7, #3]
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f002 f9d8 	bl	800ae7e <USBD_LL_GetRxDataSize>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	33b0      	adds	r3, #176	; 0xb0
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	4413      	add	r3, r2
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008af4:	4611      	mov	r1, r2
 8008af6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b084      	sub	sp, #16
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	32b0      	adds	r2, #176	; 0xb0
 8008b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b18:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d101      	bne.n	8008b24 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008b20:	2303      	movs	r3, #3
 8008b22:	e025      	b.n	8008b70 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	33b0      	adds	r3, #176	; 0xb0
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	4413      	add	r3, r2
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d01a      	beq.n	8008b6e <USBD_CDC_EP0_RxReady+0x6c>
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008b3e:	2bff      	cmp	r3, #255	; 0xff
 8008b40:	d015      	beq.n	8008b6e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	33b0      	adds	r3, #176	; 0xb0
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	4413      	add	r3, r2
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008b5a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008b62:	b292      	uxth	r2, r2
 8008b64:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	22ff      	movs	r2, #255	; 0xff
 8008b6a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3710      	adds	r7, #16
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b086      	sub	sp, #24
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008b80:	2182      	movs	r1, #130	; 0x82
 8008b82:	4818      	ldr	r0, [pc, #96]	; (8008be4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008b84:	f000 fd4f 	bl	8009626 <USBD_GetEpDesc>
 8008b88:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008b8a:	2101      	movs	r1, #1
 8008b8c:	4815      	ldr	r0, [pc, #84]	; (8008be4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008b8e:	f000 fd4a 	bl	8009626 <USBD_GetEpDesc>
 8008b92:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008b94:	2181      	movs	r1, #129	; 0x81
 8008b96:	4813      	ldr	r0, [pc, #76]	; (8008be4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008b98:	f000 fd45 	bl	8009626 <USBD_GetEpDesc>
 8008b9c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d002      	beq.n	8008baa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	2210      	movs	r2, #16
 8008ba8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d006      	beq.n	8008bbe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bb8:	711a      	strb	r2, [r3, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d006      	beq.n	8008bd2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bcc:	711a      	strb	r2, [r3, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2243      	movs	r2, #67	; 0x43
 8008bd6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008bd8:	4b02      	ldr	r3, [pc, #8]	; (8008be4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3718      	adds	r7, #24
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	24000054 	.word	0x24000054

08008be8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b086      	sub	sp, #24
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008bf0:	2182      	movs	r1, #130	; 0x82
 8008bf2:	4818      	ldr	r0, [pc, #96]	; (8008c54 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008bf4:	f000 fd17 	bl	8009626 <USBD_GetEpDesc>
 8008bf8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008bfa:	2101      	movs	r1, #1
 8008bfc:	4815      	ldr	r0, [pc, #84]	; (8008c54 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008bfe:	f000 fd12 	bl	8009626 <USBD_GetEpDesc>
 8008c02:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008c04:	2181      	movs	r1, #129	; 0x81
 8008c06:	4813      	ldr	r0, [pc, #76]	; (8008c54 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008c08:	f000 fd0d 	bl	8009626 <USBD_GetEpDesc>
 8008c0c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d002      	beq.n	8008c1a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	2210      	movs	r2, #16
 8008c18:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d006      	beq.n	8008c2e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	2200      	movs	r2, #0
 8008c24:	711a      	strb	r2, [r3, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f042 0202 	orr.w	r2, r2, #2
 8008c2c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d006      	beq.n	8008c42 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2200      	movs	r2, #0
 8008c38:	711a      	strb	r2, [r3, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f042 0202 	orr.w	r2, r2, #2
 8008c40:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2243      	movs	r2, #67	; 0x43
 8008c46:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008c48:	4b02      	ldr	r3, [pc, #8]	; (8008c54 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3718      	adds	r7, #24
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	24000054 	.word	0x24000054

08008c58 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b086      	sub	sp, #24
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008c60:	2182      	movs	r1, #130	; 0x82
 8008c62:	4818      	ldr	r0, [pc, #96]	; (8008cc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008c64:	f000 fcdf 	bl	8009626 <USBD_GetEpDesc>
 8008c68:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008c6a:	2101      	movs	r1, #1
 8008c6c:	4815      	ldr	r0, [pc, #84]	; (8008cc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008c6e:	f000 fcda 	bl	8009626 <USBD_GetEpDesc>
 8008c72:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008c74:	2181      	movs	r1, #129	; 0x81
 8008c76:	4813      	ldr	r0, [pc, #76]	; (8008cc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008c78:	f000 fcd5 	bl	8009626 <USBD_GetEpDesc>
 8008c7c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d002      	beq.n	8008c8a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	2210      	movs	r2, #16
 8008c88:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d006      	beq.n	8008c9e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c98:	711a      	strb	r2, [r3, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d006      	beq.n	8008cb2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cac:	711a      	strb	r2, [r3, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2243      	movs	r2, #67	; 0x43
 8008cb6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008cb8:	4b02      	ldr	r3, [pc, #8]	; (8008cc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3718      	adds	r7, #24
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	24000054 	.word	0x24000054

08008cc8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b083      	sub	sp, #12
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	220a      	movs	r2, #10
 8008cd4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008cd6:	4b03      	ldr	r3, [pc, #12]	; (8008ce4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	370c      	adds	r7, #12
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr
 8008ce4:	24000010 	.word	0x24000010

08008ce8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d101      	bne.n	8008cfc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008cf8:	2303      	movs	r3, #3
 8008cfa:	e009      	b.n	8008d10 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	33b0      	adds	r3, #176	; 0xb0
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	4413      	add	r3, r2
 8008d0a:	683a      	ldr	r2, [r7, #0]
 8008d0c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008d0e:	2300      	movs	r3, #0
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	370c      	adds	r7, #12
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr

08008d1c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b087      	sub	sp, #28
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	32b0      	adds	r2, #176	; 0xb0
 8008d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d36:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d101      	bne.n	8008d42 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008d3e:	2303      	movs	r3, #3
 8008d40:	e008      	b.n	8008d54 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	68ba      	ldr	r2, [r7, #8]
 8008d46:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	371c      	adds	r7, #28
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr

08008d60 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b085      	sub	sp, #20
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	32b0      	adds	r2, #176	; 0xb0
 8008d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d78:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d101      	bne.n	8008d84 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008d80:	2303      	movs	r3, #3
 8008d82:	e004      	b.n	8008d8e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	683a      	ldr	r2, [r7, #0]
 8008d88:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008d8c:	2300      	movs	r3, #0
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3714      	adds	r7, #20
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr
	...

08008d9c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	32b0      	adds	r2, #176	; 0xb0
 8008dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008db2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008db4:	2301      	movs	r3, #1
 8008db6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	32b0      	adds	r2, #176	; 0xb0
 8008dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d101      	bne.n	8008dce <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008dca:	2303      	movs	r3, #3
 8008dcc:	e025      	b.n	8008e1a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d11f      	bne.n	8008e18 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008de0:	4b10      	ldr	r3, [pc, #64]	; (8008e24 <USBD_CDC_TransmitPacket+0x88>)
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	f003 020f 	and.w	r2, r3, #15
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	4613      	mov	r3, r2
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	4413      	add	r3, r2
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	4403      	add	r3, r0
 8008dfa:	3318      	adds	r3, #24
 8008dfc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008dfe:	4b09      	ldr	r3, [pc, #36]	; (8008e24 <USBD_CDC_TransmitPacket+0x88>)
 8008e00:	7819      	ldrb	r1, [r3, #0]
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f001 fff3 	bl	800adfa <USBD_LL_Transmit>

    ret = USBD_OK;
 8008e14:	2300      	movs	r3, #0
 8008e16:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	24000097 	.word	0x24000097

08008e28 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	32b0      	adds	r2, #176	; 0xb0
 8008e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e3e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	32b0      	adds	r2, #176	; 0xb0
 8008e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d101      	bne.n	8008e56 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008e52:	2303      	movs	r3, #3
 8008e54:	e018      	b.n	8008e88 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	7c1b      	ldrb	r3, [r3, #16]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d10a      	bne.n	8008e74 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008e5e:	4b0c      	ldr	r3, [pc, #48]	; (8008e90 <USBD_CDC_ReceivePacket+0x68>)
 8008e60:	7819      	ldrb	r1, [r3, #0]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f001 ffe5 	bl	800ae3c <USBD_LL_PrepareReceive>
 8008e72:	e008      	b.n	8008e86 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008e74:	4b06      	ldr	r3, [pc, #24]	; (8008e90 <USBD_CDC_ReceivePacket+0x68>)
 8008e76:	7819      	ldrb	r1, [r3, #0]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e7e:	2340      	movs	r3, #64	; 0x40
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f001 ffdb 	bl	800ae3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3710      	adds	r7, #16
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	24000098 	.word	0x24000098

08008e94 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b086      	sub	sp, #24
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d101      	bne.n	8008eac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008ea8:	2303      	movs	r3, #3
 8008eaa:	e01f      	b.n	8008eec <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d003      	beq.n	8008ed2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	68ba      	ldr	r2, [r7, #8]
 8008ece:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	79fa      	ldrb	r2, [r7, #7]
 8008ede:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f001 fe51 	bl	800ab88 <USBD_LL_Init>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3718      	adds	r7, #24
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008efe:	2300      	movs	r3, #0
 8008f00:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d101      	bne.n	8008f0c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008f08:	2303      	movs	r3, #3
 8008f0a:	e025      	b.n	8008f58 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	683a      	ldr	r2, [r7, #0]
 8008f10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	32ae      	adds	r2, #174	; 0xae
 8008f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d00f      	beq.n	8008f48 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	32ae      	adds	r2, #174	; 0xae
 8008f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f38:	f107 020e 	add.w	r2, r7, #14
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	4798      	blx	r3
 8008f40:	4602      	mov	r2, r0
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008f4e:	1c5a      	adds	r2, r3, #1
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008f56:	2300      	movs	r3, #0
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f001 fe5d 	bl	800ac28 <USBD_LL_Start>
 8008f6e:	4603      	mov	r3, r0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3708      	adds	r7, #8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f80:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	370c      	adds	r7, #12
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr

08008f8e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b084      	sub	sp, #16
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
 8008f96:	460b      	mov	r3, r1
 8008f98:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d009      	beq.n	8008fbc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	78fa      	ldrb	r2, [r7, #3]
 8008fb2:	4611      	mov	r1, r2
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	4798      	blx	r3
 8008fb8:	4603      	mov	r3, r0
 8008fba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b084      	sub	sp, #16
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
 8008fce:	460b      	mov	r3, r1
 8008fd0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	78fa      	ldrb	r2, [r7, #3]
 8008fe0:	4611      	mov	r1, r2
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	4798      	blx	r3
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d001      	beq.n	8008ff0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008fec:	2303      	movs	r3, #3
 8008fee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3710      	adds	r7, #16
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b084      	sub	sp, #16
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
 8009002:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800900a:	6839      	ldr	r1, [r7, #0]
 800900c:	4618      	mov	r0, r3
 800900e:	f001 f908 	bl	800a222 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2201      	movs	r2, #1
 8009016:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009020:	461a      	mov	r2, r3
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800902e:	f003 031f 	and.w	r3, r3, #31
 8009032:	2b02      	cmp	r3, #2
 8009034:	d01a      	beq.n	800906c <USBD_LL_SetupStage+0x72>
 8009036:	2b02      	cmp	r3, #2
 8009038:	d822      	bhi.n	8009080 <USBD_LL_SetupStage+0x86>
 800903a:	2b00      	cmp	r3, #0
 800903c:	d002      	beq.n	8009044 <USBD_LL_SetupStage+0x4a>
 800903e:	2b01      	cmp	r3, #1
 8009040:	d00a      	beq.n	8009058 <USBD_LL_SetupStage+0x5e>
 8009042:	e01d      	b.n	8009080 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800904a:	4619      	mov	r1, r3
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 fb5f 	bl	8009710 <USBD_StdDevReq>
 8009052:	4603      	mov	r3, r0
 8009054:	73fb      	strb	r3, [r7, #15]
      break;
 8009056:	e020      	b.n	800909a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800905e:	4619      	mov	r1, r3
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 fbc7 	bl	80097f4 <USBD_StdItfReq>
 8009066:	4603      	mov	r3, r0
 8009068:	73fb      	strb	r3, [r7, #15]
      break;
 800906a:	e016      	b.n	800909a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009072:	4619      	mov	r1, r3
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 fc29 	bl	80098cc <USBD_StdEPReq>
 800907a:	4603      	mov	r3, r0
 800907c:	73fb      	strb	r3, [r7, #15]
      break;
 800907e:	e00c      	b.n	800909a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009086:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800908a:	b2db      	uxtb	r3, r3
 800908c:	4619      	mov	r1, r3
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f001 fe2a 	bl	800ace8 <USBD_LL_StallEP>
 8009094:	4603      	mov	r3, r0
 8009096:	73fb      	strb	r3, [r7, #15]
      break;
 8009098:	bf00      	nop
  }

  return ret;
 800909a:	7bfb      	ldrb	r3, [r7, #15]
}
 800909c:	4618      	mov	r0, r3
 800909e:	3710      	adds	r7, #16
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b086      	sub	sp, #24
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	460b      	mov	r3, r1
 80090ae:	607a      	str	r2, [r7, #4]
 80090b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80090b2:	2300      	movs	r3, #0
 80090b4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80090b6:	7afb      	ldrb	r3, [r7, #11]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d16e      	bne.n	800919a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80090c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80090ca:	2b03      	cmp	r3, #3
 80090cc:	f040 8098 	bne.w	8009200 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	689a      	ldr	r2, [r3, #8]
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d913      	bls.n	8009104 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	689a      	ldr	r2, [r3, #8]
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	1ad2      	subs	r2, r2, r3
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	68da      	ldr	r2, [r3, #12]
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	689b      	ldr	r3, [r3, #8]
 80090f2:	4293      	cmp	r3, r2
 80090f4:	bf28      	it	cs
 80090f6:	4613      	movcs	r3, r2
 80090f8:	461a      	mov	r2, r3
 80090fa:	6879      	ldr	r1, [r7, #4]
 80090fc:	68f8      	ldr	r0, [r7, #12]
 80090fe:	f001 f984 	bl	800a40a <USBD_CtlContinueRx>
 8009102:	e07d      	b.n	8009200 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800910a:	f003 031f 	and.w	r3, r3, #31
 800910e:	2b02      	cmp	r3, #2
 8009110:	d014      	beq.n	800913c <USBD_LL_DataOutStage+0x98>
 8009112:	2b02      	cmp	r3, #2
 8009114:	d81d      	bhi.n	8009152 <USBD_LL_DataOutStage+0xae>
 8009116:	2b00      	cmp	r3, #0
 8009118:	d002      	beq.n	8009120 <USBD_LL_DataOutStage+0x7c>
 800911a:	2b01      	cmp	r3, #1
 800911c:	d003      	beq.n	8009126 <USBD_LL_DataOutStage+0x82>
 800911e:	e018      	b.n	8009152 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009120:	2300      	movs	r3, #0
 8009122:	75bb      	strb	r3, [r7, #22]
            break;
 8009124:	e018      	b.n	8009158 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800912c:	b2db      	uxtb	r3, r3
 800912e:	4619      	mov	r1, r3
 8009130:	68f8      	ldr	r0, [r7, #12]
 8009132:	f000 fa5e 	bl	80095f2 <USBD_CoreFindIF>
 8009136:	4603      	mov	r3, r0
 8009138:	75bb      	strb	r3, [r7, #22]
            break;
 800913a:	e00d      	b.n	8009158 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009142:	b2db      	uxtb	r3, r3
 8009144:	4619      	mov	r1, r3
 8009146:	68f8      	ldr	r0, [r7, #12]
 8009148:	f000 fa60 	bl	800960c <USBD_CoreFindEP>
 800914c:	4603      	mov	r3, r0
 800914e:	75bb      	strb	r3, [r7, #22]
            break;
 8009150:	e002      	b.n	8009158 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009152:	2300      	movs	r3, #0
 8009154:	75bb      	strb	r3, [r7, #22]
            break;
 8009156:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009158:	7dbb      	ldrb	r3, [r7, #22]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d119      	bne.n	8009192 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009164:	b2db      	uxtb	r3, r3
 8009166:	2b03      	cmp	r3, #3
 8009168:	d113      	bne.n	8009192 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800916a:	7dba      	ldrb	r2, [r7, #22]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	32ae      	adds	r2, #174	; 0xae
 8009170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00b      	beq.n	8009192 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800917a:	7dba      	ldrb	r2, [r7, #22]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009182:	7dba      	ldrb	r2, [r7, #22]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	32ae      	adds	r2, #174	; 0xae
 8009188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800918c:	691b      	ldr	r3, [r3, #16]
 800918e:	68f8      	ldr	r0, [r7, #12]
 8009190:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009192:	68f8      	ldr	r0, [r7, #12]
 8009194:	f001 f94a 	bl	800a42c <USBD_CtlSendStatus>
 8009198:	e032      	b.n	8009200 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800919a:	7afb      	ldrb	r3, [r7, #11]
 800919c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	4619      	mov	r1, r3
 80091a4:	68f8      	ldr	r0, [r7, #12]
 80091a6:	f000 fa31 	bl	800960c <USBD_CoreFindEP>
 80091aa:	4603      	mov	r3, r0
 80091ac:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80091ae:	7dbb      	ldrb	r3, [r7, #22]
 80091b0:	2bff      	cmp	r3, #255	; 0xff
 80091b2:	d025      	beq.n	8009200 <USBD_LL_DataOutStage+0x15c>
 80091b4:	7dbb      	ldrb	r3, [r7, #22]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d122      	bne.n	8009200 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	2b03      	cmp	r3, #3
 80091c4:	d117      	bne.n	80091f6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80091c6:	7dba      	ldrb	r2, [r7, #22]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	32ae      	adds	r2, #174	; 0xae
 80091cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091d0:	699b      	ldr	r3, [r3, #24]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d00f      	beq.n	80091f6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80091d6:	7dba      	ldrb	r2, [r7, #22]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80091de:	7dba      	ldrb	r2, [r7, #22]
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	32ae      	adds	r2, #174	; 0xae
 80091e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091e8:	699b      	ldr	r3, [r3, #24]
 80091ea:	7afa      	ldrb	r2, [r7, #11]
 80091ec:	4611      	mov	r1, r2
 80091ee:	68f8      	ldr	r0, [r7, #12]
 80091f0:	4798      	blx	r3
 80091f2:	4603      	mov	r3, r0
 80091f4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80091f6:	7dfb      	ldrb	r3, [r7, #23]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d001      	beq.n	8009200 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80091fc:	7dfb      	ldrb	r3, [r7, #23]
 80091fe:	e000      	b.n	8009202 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	3718      	adds	r7, #24
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b086      	sub	sp, #24
 800920e:	af00      	add	r7, sp, #0
 8009210:	60f8      	str	r0, [r7, #12]
 8009212:	460b      	mov	r3, r1
 8009214:	607a      	str	r2, [r7, #4]
 8009216:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009218:	7afb      	ldrb	r3, [r7, #11]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d16f      	bne.n	80092fe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	3314      	adds	r3, #20
 8009222:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800922a:	2b02      	cmp	r3, #2
 800922c:	d15a      	bne.n	80092e4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	689a      	ldr	r2, [r3, #8]
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	429a      	cmp	r2, r3
 8009238:	d914      	bls.n	8009264 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	689a      	ldr	r2, [r3, #8]
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	68db      	ldr	r3, [r3, #12]
 8009242:	1ad2      	subs	r2, r2, r3
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	461a      	mov	r2, r3
 800924e:	6879      	ldr	r1, [r7, #4]
 8009250:	68f8      	ldr	r0, [r7, #12]
 8009252:	f001 f8ac 	bl	800a3ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009256:	2300      	movs	r3, #0
 8009258:	2200      	movs	r2, #0
 800925a:	2100      	movs	r1, #0
 800925c:	68f8      	ldr	r0, [r7, #12]
 800925e:	f001 fded 	bl	800ae3c <USBD_LL_PrepareReceive>
 8009262:	e03f      	b.n	80092e4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	68da      	ldr	r2, [r3, #12]
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	429a      	cmp	r2, r3
 800926e:	d11c      	bne.n	80092aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	685a      	ldr	r2, [r3, #4]
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009278:	429a      	cmp	r2, r3
 800927a:	d316      	bcc.n	80092aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	685a      	ldr	r2, [r3, #4]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009286:	429a      	cmp	r2, r3
 8009288:	d20f      	bcs.n	80092aa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800928a:	2200      	movs	r2, #0
 800928c:	2100      	movs	r1, #0
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	f001 f88d 	bl	800a3ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2200      	movs	r2, #0
 8009298:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800929c:	2300      	movs	r3, #0
 800929e:	2200      	movs	r2, #0
 80092a0:	2100      	movs	r1, #0
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	f001 fdca 	bl	800ae3c <USBD_LL_PrepareReceive>
 80092a8:	e01c      	b.n	80092e4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	2b03      	cmp	r3, #3
 80092b4:	d10f      	bne.n	80092d6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d009      	beq.n	80092d6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092d0:	68db      	ldr	r3, [r3, #12]
 80092d2:	68f8      	ldr	r0, [r7, #12]
 80092d4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80092d6:	2180      	movs	r1, #128	; 0x80
 80092d8:	68f8      	ldr	r0, [r7, #12]
 80092da:	f001 fd05 	bl	800ace8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f001 f8b7 	bl	800a452 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d03a      	beq.n	8009364 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80092ee:	68f8      	ldr	r0, [r7, #12]
 80092f0:	f7ff fe42 	bl	8008f78 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2200      	movs	r2, #0
 80092f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80092fc:	e032      	b.n	8009364 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80092fe:	7afb      	ldrb	r3, [r7, #11]
 8009300:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009304:	b2db      	uxtb	r3, r3
 8009306:	4619      	mov	r1, r3
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f000 f97f 	bl	800960c <USBD_CoreFindEP>
 800930e:	4603      	mov	r3, r0
 8009310:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009312:	7dfb      	ldrb	r3, [r7, #23]
 8009314:	2bff      	cmp	r3, #255	; 0xff
 8009316:	d025      	beq.n	8009364 <USBD_LL_DataInStage+0x15a>
 8009318:	7dfb      	ldrb	r3, [r7, #23]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d122      	bne.n	8009364 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009324:	b2db      	uxtb	r3, r3
 8009326:	2b03      	cmp	r3, #3
 8009328:	d11c      	bne.n	8009364 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800932a:	7dfa      	ldrb	r2, [r7, #23]
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	32ae      	adds	r2, #174	; 0xae
 8009330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009334:	695b      	ldr	r3, [r3, #20]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d014      	beq.n	8009364 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800933a:	7dfa      	ldrb	r2, [r7, #23]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009342:	7dfa      	ldrb	r2, [r7, #23]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	32ae      	adds	r2, #174	; 0xae
 8009348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800934c:	695b      	ldr	r3, [r3, #20]
 800934e:	7afa      	ldrb	r2, [r7, #11]
 8009350:	4611      	mov	r1, r2
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	4798      	blx	r3
 8009356:	4603      	mov	r3, r0
 8009358:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800935a:	7dbb      	ldrb	r3, [r7, #22]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d001      	beq.n	8009364 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009360:	7dbb      	ldrb	r3, [r7, #22]
 8009362:	e000      	b.n	8009366 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009364:	2300      	movs	r3, #0
}
 8009366:	4618      	mov	r0, r3
 8009368:	3718      	adds	r7, #24
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b084      	sub	sp, #16
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009376:	2300      	movs	r3, #0
 8009378:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2201      	movs	r2, #1
 800937e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2200      	movs	r2, #0
 800939c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d014      	beq.n	80093d4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00e      	beq.n	80093d4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	6852      	ldr	r2, [r2, #4]
 80093c2:	b2d2      	uxtb	r2, r2
 80093c4:	4611      	mov	r1, r2
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	4798      	blx	r3
 80093ca:	4603      	mov	r3, r0
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d001      	beq.n	80093d4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80093d0:	2303      	movs	r3, #3
 80093d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80093d4:	2340      	movs	r3, #64	; 0x40
 80093d6:	2200      	movs	r2, #0
 80093d8:	2100      	movs	r1, #0
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f001 fc3f 	bl	800ac5e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2201      	movs	r2, #1
 80093e4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2240      	movs	r2, #64	; 0x40
 80093ec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80093f0:	2340      	movs	r3, #64	; 0x40
 80093f2:	2200      	movs	r2, #0
 80093f4:	2180      	movs	r1, #128	; 0x80
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f001 fc31 	bl	800ac5e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2201      	movs	r2, #1
 8009400:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2240      	movs	r2, #64	; 0x40
 8009406:	621a      	str	r2, [r3, #32]

  return ret;
 8009408:	7bfb      	ldrb	r3, [r7, #15]
}
 800940a:	4618      	mov	r0, r3
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}

08009412 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009412:	b480      	push	{r7}
 8009414:	b083      	sub	sp, #12
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
 800941a:	460b      	mov	r3, r1
 800941c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	78fa      	ldrb	r2, [r7, #3]
 8009422:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009424:	2300      	movs	r3, #0
}
 8009426:	4618      	mov	r0, r3
 8009428:	370c      	adds	r7, #12
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr

08009432 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009432:	b480      	push	{r7}
 8009434:	b083      	sub	sp, #12
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009440:	b2da      	uxtb	r2, r3
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2204      	movs	r2, #4
 800944c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009450:	2300      	movs	r3, #0
}
 8009452:	4618      	mov	r0, r3
 8009454:	370c      	adds	r7, #12
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr

0800945e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800945e:	b480      	push	{r7}
 8009460:	b083      	sub	sp, #12
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800946c:	b2db      	uxtb	r3, r3
 800946e:	2b04      	cmp	r3, #4
 8009470:	d106      	bne.n	8009480 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009478:	b2da      	uxtb	r2, r3
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009480:	2300      	movs	r3, #0
}
 8009482:	4618      	mov	r0, r3
 8009484:	370c      	adds	r7, #12
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr

0800948e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800948e:	b580      	push	{r7, lr}
 8009490:	b082      	sub	sp, #8
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800949c:	b2db      	uxtb	r3, r3
 800949e:	2b03      	cmp	r3, #3
 80094a0:	d110      	bne.n	80094c4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d00b      	beq.n	80094c4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094b2:	69db      	ldr	r3, [r3, #28]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d005      	beq.n	80094c4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094be:	69db      	ldr	r3, [r3, #28]
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3708      	adds	r7, #8
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}

080094ce <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80094ce:	b580      	push	{r7, lr}
 80094d0:	b082      	sub	sp, #8
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
 80094d6:	460b      	mov	r3, r1
 80094d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	32ae      	adds	r2, #174	; 0xae
 80094e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d101      	bne.n	80094f0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80094ec:	2303      	movs	r3, #3
 80094ee:	e01c      	b.n	800952a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	2b03      	cmp	r3, #3
 80094fa:	d115      	bne.n	8009528 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	32ae      	adds	r2, #174	; 0xae
 8009506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800950a:	6a1b      	ldr	r3, [r3, #32]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d00b      	beq.n	8009528 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	32ae      	adds	r2, #174	; 0xae
 800951a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800951e:	6a1b      	ldr	r3, [r3, #32]
 8009520:	78fa      	ldrb	r2, [r7, #3]
 8009522:	4611      	mov	r1, r2
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	3708      	adds	r7, #8
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b082      	sub	sp, #8
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
 800953a:	460b      	mov	r3, r1
 800953c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	32ae      	adds	r2, #174	; 0xae
 8009548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d101      	bne.n	8009554 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009550:	2303      	movs	r3, #3
 8009552:	e01c      	b.n	800958e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800955a:	b2db      	uxtb	r3, r3
 800955c:	2b03      	cmp	r3, #3
 800955e:	d115      	bne.n	800958c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	32ae      	adds	r2, #174	; 0xae
 800956a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800956e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009570:	2b00      	cmp	r3, #0
 8009572:	d00b      	beq.n	800958c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	32ae      	adds	r2, #174	; 0xae
 800957e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009584:	78fa      	ldrb	r2, [r7, #3]
 8009586:	4611      	mov	r1, r2
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800958c:	2300      	movs	r3, #0
}
 800958e:	4618      	mov	r0, r3
 8009590:	3708      	adds	r7, #8
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009596:	b480      	push	{r7}
 8009598:	b083      	sub	sp, #12
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800959e:	2300      	movs	r3, #0
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	370c      	adds	r7, #12
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80095b4:	2300      	movs	r3, #0
 80095b6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2201      	movs	r2, #1
 80095bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d00e      	beq.n	80095e8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	6852      	ldr	r2, [r2, #4]
 80095d6:	b2d2      	uxtb	r2, r2
 80095d8:	4611      	mov	r1, r2
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	4798      	blx	r3
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d001      	beq.n	80095e8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80095e4:	2303      	movs	r3, #3
 80095e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80095e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3710      	adds	r7, #16
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}

080095f2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80095f2:	b480      	push	{r7}
 80095f4:	b083      	sub	sp, #12
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
 80095fa:	460b      	mov	r3, r1
 80095fc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80095fe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009600:	4618      	mov	r0, r3
 8009602:	370c      	adds	r7, #12
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr

0800960c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	460b      	mov	r3, r1
 8009616:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009618:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800961a:	4618      	mov	r0, r3
 800961c:	370c      	adds	r7, #12
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr

08009626 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009626:	b580      	push	{r7, lr}
 8009628:	b086      	sub	sp, #24
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
 800962e:	460b      	mov	r3, r1
 8009630:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800963a:	2300      	movs	r3, #0
 800963c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	885b      	ldrh	r3, [r3, #2]
 8009642:	b29a      	uxth	r2, r3
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	b29b      	uxth	r3, r3
 800964a:	429a      	cmp	r2, r3
 800964c:	d920      	bls.n	8009690 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	b29b      	uxth	r3, r3
 8009654:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009656:	e013      	b.n	8009680 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009658:	f107 030a 	add.w	r3, r7, #10
 800965c:	4619      	mov	r1, r3
 800965e:	6978      	ldr	r0, [r7, #20]
 8009660:	f000 f81b 	bl	800969a <USBD_GetNextDesc>
 8009664:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	785b      	ldrb	r3, [r3, #1]
 800966a:	2b05      	cmp	r3, #5
 800966c:	d108      	bne.n	8009680 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	789b      	ldrb	r3, [r3, #2]
 8009676:	78fa      	ldrb	r2, [r7, #3]
 8009678:	429a      	cmp	r2, r3
 800967a:	d008      	beq.n	800968e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800967c:	2300      	movs	r3, #0
 800967e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	885b      	ldrh	r3, [r3, #2]
 8009684:	b29a      	uxth	r2, r3
 8009686:	897b      	ldrh	r3, [r7, #10]
 8009688:	429a      	cmp	r2, r3
 800968a:	d8e5      	bhi.n	8009658 <USBD_GetEpDesc+0x32>
 800968c:	e000      	b.n	8009690 <USBD_GetEpDesc+0x6a>
          break;
 800968e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009690:	693b      	ldr	r3, [r7, #16]
}
 8009692:	4618      	mov	r0, r3
 8009694:	3718      	adds	r7, #24
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800969a:	b480      	push	{r7}
 800969c:	b085      	sub	sp, #20
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
 80096a2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	881a      	ldrh	r2, [r3, #0]
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	4413      	add	r3, r2
 80096b4:	b29a      	uxth	r2, r3
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	781b      	ldrb	r3, [r3, #0]
 80096be:	461a      	mov	r2, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	4413      	add	r3, r2
 80096c4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80096c6:	68fb      	ldr	r3, [r7, #12]
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3714      	adds	r7, #20
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr

080096d4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b087      	sub	sp, #28
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	3301      	adds	r3, #1
 80096ea:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80096f2:	8a3b      	ldrh	r3, [r7, #16]
 80096f4:	021b      	lsls	r3, r3, #8
 80096f6:	b21a      	sxth	r2, r3
 80096f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80096fc:	4313      	orrs	r3, r2
 80096fe:	b21b      	sxth	r3, r3
 8009700:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009702:	89fb      	ldrh	r3, [r7, #14]
}
 8009704:	4618      	mov	r0, r3
 8009706:	371c      	adds	r7, #28
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800971a:	2300      	movs	r3, #0
 800971c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009726:	2b40      	cmp	r3, #64	; 0x40
 8009728:	d005      	beq.n	8009736 <USBD_StdDevReq+0x26>
 800972a:	2b40      	cmp	r3, #64	; 0x40
 800972c:	d857      	bhi.n	80097de <USBD_StdDevReq+0xce>
 800972e:	2b00      	cmp	r3, #0
 8009730:	d00f      	beq.n	8009752 <USBD_StdDevReq+0x42>
 8009732:	2b20      	cmp	r3, #32
 8009734:	d153      	bne.n	80097de <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	32ae      	adds	r2, #174	; 0xae
 8009740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	6839      	ldr	r1, [r7, #0]
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	4798      	blx	r3
 800974c:	4603      	mov	r3, r0
 800974e:	73fb      	strb	r3, [r7, #15]
      break;
 8009750:	e04a      	b.n	80097e8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	785b      	ldrb	r3, [r3, #1]
 8009756:	2b09      	cmp	r3, #9
 8009758:	d83b      	bhi.n	80097d2 <USBD_StdDevReq+0xc2>
 800975a:	a201      	add	r2, pc, #4	; (adr r2, 8009760 <USBD_StdDevReq+0x50>)
 800975c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009760:	080097b5 	.word	0x080097b5
 8009764:	080097c9 	.word	0x080097c9
 8009768:	080097d3 	.word	0x080097d3
 800976c:	080097bf 	.word	0x080097bf
 8009770:	080097d3 	.word	0x080097d3
 8009774:	08009793 	.word	0x08009793
 8009778:	08009789 	.word	0x08009789
 800977c:	080097d3 	.word	0x080097d3
 8009780:	080097ab 	.word	0x080097ab
 8009784:	0800979d 	.word	0x0800979d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009788:	6839      	ldr	r1, [r7, #0]
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 fa3c 	bl	8009c08 <USBD_GetDescriptor>
          break;
 8009790:	e024      	b.n	80097dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009792:	6839      	ldr	r1, [r7, #0]
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 fba1 	bl	8009edc <USBD_SetAddress>
          break;
 800979a:	e01f      	b.n	80097dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800979c:	6839      	ldr	r1, [r7, #0]
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 fbe0 	bl	8009f64 <USBD_SetConfig>
 80097a4:	4603      	mov	r3, r0
 80097a6:	73fb      	strb	r3, [r7, #15]
          break;
 80097a8:	e018      	b.n	80097dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80097aa:	6839      	ldr	r1, [r7, #0]
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f000 fc83 	bl	800a0b8 <USBD_GetConfig>
          break;
 80097b2:	e013      	b.n	80097dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80097b4:	6839      	ldr	r1, [r7, #0]
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 fcb4 	bl	800a124 <USBD_GetStatus>
          break;
 80097bc:	e00e      	b.n	80097dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80097be:	6839      	ldr	r1, [r7, #0]
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 fce3 	bl	800a18c <USBD_SetFeature>
          break;
 80097c6:	e009      	b.n	80097dc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80097c8:	6839      	ldr	r1, [r7, #0]
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 fd07 	bl	800a1de <USBD_ClrFeature>
          break;
 80097d0:	e004      	b.n	80097dc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80097d2:	6839      	ldr	r1, [r7, #0]
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 fd5e 	bl	800a296 <USBD_CtlError>
          break;
 80097da:	bf00      	nop
      }
      break;
 80097dc:	e004      	b.n	80097e8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80097de:	6839      	ldr	r1, [r7, #0]
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f000 fd58 	bl	800a296 <USBD_CtlError>
      break;
 80097e6:	bf00      	nop
  }

  return ret;
 80097e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop

080097f4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b084      	sub	sp, #16
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80097fe:	2300      	movs	r3, #0
 8009800:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800980a:	2b40      	cmp	r3, #64	; 0x40
 800980c:	d005      	beq.n	800981a <USBD_StdItfReq+0x26>
 800980e:	2b40      	cmp	r3, #64	; 0x40
 8009810:	d852      	bhi.n	80098b8 <USBD_StdItfReq+0xc4>
 8009812:	2b00      	cmp	r3, #0
 8009814:	d001      	beq.n	800981a <USBD_StdItfReq+0x26>
 8009816:	2b20      	cmp	r3, #32
 8009818:	d14e      	bne.n	80098b8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009820:	b2db      	uxtb	r3, r3
 8009822:	3b01      	subs	r3, #1
 8009824:	2b02      	cmp	r3, #2
 8009826:	d840      	bhi.n	80098aa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	889b      	ldrh	r3, [r3, #4]
 800982c:	b2db      	uxtb	r3, r3
 800982e:	2b01      	cmp	r3, #1
 8009830:	d836      	bhi.n	80098a0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	889b      	ldrh	r3, [r3, #4]
 8009836:	b2db      	uxtb	r3, r3
 8009838:	4619      	mov	r1, r3
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f7ff fed9 	bl	80095f2 <USBD_CoreFindIF>
 8009840:	4603      	mov	r3, r0
 8009842:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009844:	7bbb      	ldrb	r3, [r7, #14]
 8009846:	2bff      	cmp	r3, #255	; 0xff
 8009848:	d01d      	beq.n	8009886 <USBD_StdItfReq+0x92>
 800984a:	7bbb      	ldrb	r3, [r7, #14]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d11a      	bne.n	8009886 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009850:	7bba      	ldrb	r2, [r7, #14]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	32ae      	adds	r2, #174	; 0xae
 8009856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00f      	beq.n	8009880 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009860:	7bba      	ldrb	r2, [r7, #14]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009868:	7bba      	ldrb	r2, [r7, #14]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	32ae      	adds	r2, #174	; 0xae
 800986e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	6839      	ldr	r1, [r7, #0]
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	4798      	blx	r3
 800987a:	4603      	mov	r3, r0
 800987c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800987e:	e004      	b.n	800988a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009880:	2303      	movs	r3, #3
 8009882:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009884:	e001      	b.n	800988a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009886:	2303      	movs	r3, #3
 8009888:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	88db      	ldrh	r3, [r3, #6]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d110      	bne.n	80098b4 <USBD_StdItfReq+0xc0>
 8009892:	7bfb      	ldrb	r3, [r7, #15]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d10d      	bne.n	80098b4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 fdc7 	bl	800a42c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800989e:	e009      	b.n	80098b4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80098a0:	6839      	ldr	r1, [r7, #0]
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 fcf7 	bl	800a296 <USBD_CtlError>
          break;
 80098a8:	e004      	b.n	80098b4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80098aa:	6839      	ldr	r1, [r7, #0]
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 fcf2 	bl	800a296 <USBD_CtlError>
          break;
 80098b2:	e000      	b.n	80098b6 <USBD_StdItfReq+0xc2>
          break;
 80098b4:	bf00      	nop
      }
      break;
 80098b6:	e004      	b.n	80098c2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80098b8:	6839      	ldr	r1, [r7, #0]
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 fceb 	bl	800a296 <USBD_CtlError>
      break;
 80098c0:	bf00      	nop
  }

  return ret;
 80098c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3710      	adds	r7, #16
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80098d6:	2300      	movs	r3, #0
 80098d8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	889b      	ldrh	r3, [r3, #4]
 80098de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098e8:	2b40      	cmp	r3, #64	; 0x40
 80098ea:	d007      	beq.n	80098fc <USBD_StdEPReq+0x30>
 80098ec:	2b40      	cmp	r3, #64	; 0x40
 80098ee:	f200 817f 	bhi.w	8009bf0 <USBD_StdEPReq+0x324>
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d02a      	beq.n	800994c <USBD_StdEPReq+0x80>
 80098f6:	2b20      	cmp	r3, #32
 80098f8:	f040 817a 	bne.w	8009bf0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80098fc:	7bbb      	ldrb	r3, [r7, #14]
 80098fe:	4619      	mov	r1, r3
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f7ff fe83 	bl	800960c <USBD_CoreFindEP>
 8009906:	4603      	mov	r3, r0
 8009908:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800990a:	7b7b      	ldrb	r3, [r7, #13]
 800990c:	2bff      	cmp	r3, #255	; 0xff
 800990e:	f000 8174 	beq.w	8009bfa <USBD_StdEPReq+0x32e>
 8009912:	7b7b      	ldrb	r3, [r7, #13]
 8009914:	2b00      	cmp	r3, #0
 8009916:	f040 8170 	bne.w	8009bfa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800991a:	7b7a      	ldrb	r2, [r7, #13]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009922:	7b7a      	ldrb	r2, [r7, #13]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	32ae      	adds	r2, #174	; 0xae
 8009928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800992c:	689b      	ldr	r3, [r3, #8]
 800992e:	2b00      	cmp	r3, #0
 8009930:	f000 8163 	beq.w	8009bfa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009934:	7b7a      	ldrb	r2, [r7, #13]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	32ae      	adds	r2, #174	; 0xae
 800993a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	6839      	ldr	r1, [r7, #0]
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	4798      	blx	r3
 8009946:	4603      	mov	r3, r0
 8009948:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800994a:	e156      	b.n	8009bfa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	785b      	ldrb	r3, [r3, #1]
 8009950:	2b03      	cmp	r3, #3
 8009952:	d008      	beq.n	8009966 <USBD_StdEPReq+0x9a>
 8009954:	2b03      	cmp	r3, #3
 8009956:	f300 8145 	bgt.w	8009be4 <USBD_StdEPReq+0x318>
 800995a:	2b00      	cmp	r3, #0
 800995c:	f000 809b 	beq.w	8009a96 <USBD_StdEPReq+0x1ca>
 8009960:	2b01      	cmp	r3, #1
 8009962:	d03c      	beq.n	80099de <USBD_StdEPReq+0x112>
 8009964:	e13e      	b.n	8009be4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800996c:	b2db      	uxtb	r3, r3
 800996e:	2b02      	cmp	r3, #2
 8009970:	d002      	beq.n	8009978 <USBD_StdEPReq+0xac>
 8009972:	2b03      	cmp	r3, #3
 8009974:	d016      	beq.n	80099a4 <USBD_StdEPReq+0xd8>
 8009976:	e02c      	b.n	80099d2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009978:	7bbb      	ldrb	r3, [r7, #14]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d00d      	beq.n	800999a <USBD_StdEPReq+0xce>
 800997e:	7bbb      	ldrb	r3, [r7, #14]
 8009980:	2b80      	cmp	r3, #128	; 0x80
 8009982:	d00a      	beq.n	800999a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009984:	7bbb      	ldrb	r3, [r7, #14]
 8009986:	4619      	mov	r1, r3
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f001 f9ad 	bl	800ace8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800998e:	2180      	movs	r1, #128	; 0x80
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f001 f9a9 	bl	800ace8 <USBD_LL_StallEP>
 8009996:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009998:	e020      	b.n	80099dc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800999a:	6839      	ldr	r1, [r7, #0]
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 fc7a 	bl	800a296 <USBD_CtlError>
              break;
 80099a2:	e01b      	b.n	80099dc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	885b      	ldrh	r3, [r3, #2]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d10e      	bne.n	80099ca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80099ac:	7bbb      	ldrb	r3, [r7, #14]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00b      	beq.n	80099ca <USBD_StdEPReq+0xfe>
 80099b2:	7bbb      	ldrb	r3, [r7, #14]
 80099b4:	2b80      	cmp	r3, #128	; 0x80
 80099b6:	d008      	beq.n	80099ca <USBD_StdEPReq+0xfe>
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	88db      	ldrh	r3, [r3, #6]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d104      	bne.n	80099ca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80099c0:	7bbb      	ldrb	r3, [r7, #14]
 80099c2:	4619      	mov	r1, r3
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f001 f98f 	bl	800ace8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 fd2e 	bl	800a42c <USBD_CtlSendStatus>

              break;
 80099d0:	e004      	b.n	80099dc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80099d2:	6839      	ldr	r1, [r7, #0]
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 fc5e 	bl	800a296 <USBD_CtlError>
              break;
 80099da:	bf00      	nop
          }
          break;
 80099dc:	e107      	b.n	8009bee <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	2b02      	cmp	r3, #2
 80099e8:	d002      	beq.n	80099f0 <USBD_StdEPReq+0x124>
 80099ea:	2b03      	cmp	r3, #3
 80099ec:	d016      	beq.n	8009a1c <USBD_StdEPReq+0x150>
 80099ee:	e04b      	b.n	8009a88 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80099f0:	7bbb      	ldrb	r3, [r7, #14]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d00d      	beq.n	8009a12 <USBD_StdEPReq+0x146>
 80099f6:	7bbb      	ldrb	r3, [r7, #14]
 80099f8:	2b80      	cmp	r3, #128	; 0x80
 80099fa:	d00a      	beq.n	8009a12 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80099fc:	7bbb      	ldrb	r3, [r7, #14]
 80099fe:	4619      	mov	r1, r3
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f001 f971 	bl	800ace8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a06:	2180      	movs	r1, #128	; 0x80
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f001 f96d 	bl	800ace8 <USBD_LL_StallEP>
 8009a0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a10:	e040      	b.n	8009a94 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009a12:	6839      	ldr	r1, [r7, #0]
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 fc3e 	bl	800a296 <USBD_CtlError>
              break;
 8009a1a:	e03b      	b.n	8009a94 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	885b      	ldrh	r3, [r3, #2]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d136      	bne.n	8009a92 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009a24:	7bbb      	ldrb	r3, [r7, #14]
 8009a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d004      	beq.n	8009a38 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009a2e:	7bbb      	ldrb	r3, [r7, #14]
 8009a30:	4619      	mov	r1, r3
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f001 f977 	bl	800ad26 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 fcf7 	bl	800a42c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009a3e:	7bbb      	ldrb	r3, [r7, #14]
 8009a40:	4619      	mov	r1, r3
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f7ff fde2 	bl	800960c <USBD_CoreFindEP>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009a4c:	7b7b      	ldrb	r3, [r7, #13]
 8009a4e:	2bff      	cmp	r3, #255	; 0xff
 8009a50:	d01f      	beq.n	8009a92 <USBD_StdEPReq+0x1c6>
 8009a52:	7b7b      	ldrb	r3, [r7, #13]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d11c      	bne.n	8009a92 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009a58:	7b7a      	ldrb	r2, [r7, #13]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009a60:	7b7a      	ldrb	r2, [r7, #13]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	32ae      	adds	r2, #174	; 0xae
 8009a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d010      	beq.n	8009a92 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009a70:	7b7a      	ldrb	r2, [r7, #13]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	32ae      	adds	r2, #174	; 0xae
 8009a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	6839      	ldr	r1, [r7, #0]
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	4798      	blx	r3
 8009a82:	4603      	mov	r3, r0
 8009a84:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009a86:	e004      	b.n	8009a92 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009a88:	6839      	ldr	r1, [r7, #0]
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 fc03 	bl	800a296 <USBD_CtlError>
              break;
 8009a90:	e000      	b.n	8009a94 <USBD_StdEPReq+0x1c8>
              break;
 8009a92:	bf00      	nop
          }
          break;
 8009a94:	e0ab      	b.n	8009bee <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	d002      	beq.n	8009aa8 <USBD_StdEPReq+0x1dc>
 8009aa2:	2b03      	cmp	r3, #3
 8009aa4:	d032      	beq.n	8009b0c <USBD_StdEPReq+0x240>
 8009aa6:	e097      	b.n	8009bd8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009aa8:	7bbb      	ldrb	r3, [r7, #14]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d007      	beq.n	8009abe <USBD_StdEPReq+0x1f2>
 8009aae:	7bbb      	ldrb	r3, [r7, #14]
 8009ab0:	2b80      	cmp	r3, #128	; 0x80
 8009ab2:	d004      	beq.n	8009abe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009ab4:	6839      	ldr	r1, [r7, #0]
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 fbed 	bl	800a296 <USBD_CtlError>
                break;
 8009abc:	e091      	b.n	8009be2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009abe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	da0b      	bge.n	8009ade <USBD_StdEPReq+0x212>
 8009ac6:	7bbb      	ldrb	r3, [r7, #14]
 8009ac8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009acc:	4613      	mov	r3, r2
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	4413      	add	r3, r2
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	3310      	adds	r3, #16
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	4413      	add	r3, r2
 8009ada:	3304      	adds	r3, #4
 8009adc:	e00b      	b.n	8009af6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ade:	7bbb      	ldrb	r3, [r7, #14]
 8009ae0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ae4:	4613      	mov	r3, r2
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	4413      	add	r3, r2
 8009aea:	009b      	lsls	r3, r3, #2
 8009aec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	4413      	add	r3, r2
 8009af4:	3304      	adds	r3, #4
 8009af6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	2200      	movs	r2, #0
 8009afc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	2202      	movs	r2, #2
 8009b02:	4619      	mov	r1, r3
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 fc37 	bl	800a378 <USBD_CtlSendData>
              break;
 8009b0a:	e06a      	b.n	8009be2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009b0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	da11      	bge.n	8009b38 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009b14:	7bbb      	ldrb	r3, [r7, #14]
 8009b16:	f003 020f 	and.w	r2, r3, #15
 8009b1a:	6879      	ldr	r1, [r7, #4]
 8009b1c:	4613      	mov	r3, r2
 8009b1e:	009b      	lsls	r3, r3, #2
 8009b20:	4413      	add	r3, r2
 8009b22:	009b      	lsls	r3, r3, #2
 8009b24:	440b      	add	r3, r1
 8009b26:	3324      	adds	r3, #36	; 0x24
 8009b28:	881b      	ldrh	r3, [r3, #0]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d117      	bne.n	8009b5e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009b2e:	6839      	ldr	r1, [r7, #0]
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 fbb0 	bl	800a296 <USBD_CtlError>
                  break;
 8009b36:	e054      	b.n	8009be2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009b38:	7bbb      	ldrb	r3, [r7, #14]
 8009b3a:	f003 020f 	and.w	r2, r3, #15
 8009b3e:	6879      	ldr	r1, [r7, #4]
 8009b40:	4613      	mov	r3, r2
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	4413      	add	r3, r2
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	440b      	add	r3, r1
 8009b4a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009b4e:	881b      	ldrh	r3, [r3, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d104      	bne.n	8009b5e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009b54:	6839      	ldr	r1, [r7, #0]
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 fb9d 	bl	800a296 <USBD_CtlError>
                  break;
 8009b5c:	e041      	b.n	8009be2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	da0b      	bge.n	8009b7e <USBD_StdEPReq+0x2b2>
 8009b66:	7bbb      	ldrb	r3, [r7, #14]
 8009b68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	4413      	add	r3, r2
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	3310      	adds	r3, #16
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	4413      	add	r3, r2
 8009b7a:	3304      	adds	r3, #4
 8009b7c:	e00b      	b.n	8009b96 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b7e:	7bbb      	ldrb	r3, [r7, #14]
 8009b80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b84:	4613      	mov	r3, r2
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	4413      	add	r3, r2
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	4413      	add	r3, r2
 8009b94:	3304      	adds	r3, #4
 8009b96:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009b98:	7bbb      	ldrb	r3, [r7, #14]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d002      	beq.n	8009ba4 <USBD_StdEPReq+0x2d8>
 8009b9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ba0:	2b80      	cmp	r3, #128	; 0x80
 8009ba2:	d103      	bne.n	8009bac <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	601a      	str	r2, [r3, #0]
 8009baa:	e00e      	b.n	8009bca <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009bac:	7bbb      	ldrb	r3, [r7, #14]
 8009bae:	4619      	mov	r1, r3
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f001 f8d7 	bl	800ad64 <USBD_LL_IsStallEP>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d003      	beq.n	8009bc4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	601a      	str	r2, [r3, #0]
 8009bc2:	e002      	b.n	8009bca <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	2202      	movs	r2, #2
 8009bce:	4619      	mov	r1, r3
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 fbd1 	bl	800a378 <USBD_CtlSendData>
              break;
 8009bd6:	e004      	b.n	8009be2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009bd8:	6839      	ldr	r1, [r7, #0]
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 fb5b 	bl	800a296 <USBD_CtlError>
              break;
 8009be0:	bf00      	nop
          }
          break;
 8009be2:	e004      	b.n	8009bee <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009be4:	6839      	ldr	r1, [r7, #0]
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 fb55 	bl	800a296 <USBD_CtlError>
          break;
 8009bec:	bf00      	nop
      }
      break;
 8009bee:	e005      	b.n	8009bfc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009bf0:	6839      	ldr	r1, [r7, #0]
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 fb4f 	bl	800a296 <USBD_CtlError>
      break;
 8009bf8:	e000      	b.n	8009bfc <USBD_StdEPReq+0x330>
      break;
 8009bfa:	bf00      	nop
  }

  return ret;
 8009bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3710      	adds	r7, #16
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
	...

08009c08 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009c12:	2300      	movs	r3, #0
 8009c14:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009c16:	2300      	movs	r3, #0
 8009c18:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	885b      	ldrh	r3, [r3, #2]
 8009c22:	0a1b      	lsrs	r3, r3, #8
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	3b01      	subs	r3, #1
 8009c28:	2b06      	cmp	r3, #6
 8009c2a:	f200 8128 	bhi.w	8009e7e <USBD_GetDescriptor+0x276>
 8009c2e:	a201      	add	r2, pc, #4	; (adr r2, 8009c34 <USBD_GetDescriptor+0x2c>)
 8009c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c34:	08009c51 	.word	0x08009c51
 8009c38:	08009c69 	.word	0x08009c69
 8009c3c:	08009ca9 	.word	0x08009ca9
 8009c40:	08009e7f 	.word	0x08009e7f
 8009c44:	08009e7f 	.word	0x08009e7f
 8009c48:	08009e1f 	.word	0x08009e1f
 8009c4c:	08009e4b 	.word	0x08009e4b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	7c12      	ldrb	r2, [r2, #16]
 8009c5c:	f107 0108 	add.w	r1, r7, #8
 8009c60:	4610      	mov	r0, r2
 8009c62:	4798      	blx	r3
 8009c64:	60f8      	str	r0, [r7, #12]
      break;
 8009c66:	e112      	b.n	8009e8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	7c1b      	ldrb	r3, [r3, #16]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d10d      	bne.n	8009c8c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c78:	f107 0208 	add.w	r2, r7, #8
 8009c7c:	4610      	mov	r0, r2
 8009c7e:	4798      	blx	r3
 8009c80:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	3301      	adds	r3, #1
 8009c86:	2202      	movs	r2, #2
 8009c88:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009c8a:	e100      	b.n	8009e8e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c94:	f107 0208 	add.w	r2, r7, #8
 8009c98:	4610      	mov	r0, r2
 8009c9a:	4798      	blx	r3
 8009c9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	2202      	movs	r2, #2
 8009ca4:	701a      	strb	r2, [r3, #0]
      break;
 8009ca6:	e0f2      	b.n	8009e8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	885b      	ldrh	r3, [r3, #2]
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	2b05      	cmp	r3, #5
 8009cb0:	f200 80ac 	bhi.w	8009e0c <USBD_GetDescriptor+0x204>
 8009cb4:	a201      	add	r2, pc, #4	; (adr r2, 8009cbc <USBD_GetDescriptor+0xb4>)
 8009cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cba:	bf00      	nop
 8009cbc:	08009cd5 	.word	0x08009cd5
 8009cc0:	08009d09 	.word	0x08009d09
 8009cc4:	08009d3d 	.word	0x08009d3d
 8009cc8:	08009d71 	.word	0x08009d71
 8009ccc:	08009da5 	.word	0x08009da5
 8009cd0:	08009dd9 	.word	0x08009dd9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d00b      	beq.n	8009cf8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	7c12      	ldrb	r2, [r2, #16]
 8009cec:	f107 0108 	add.w	r1, r7, #8
 8009cf0:	4610      	mov	r0, r2
 8009cf2:	4798      	blx	r3
 8009cf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cf6:	e091      	b.n	8009e1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cf8:	6839      	ldr	r1, [r7, #0]
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 facb 	bl	800a296 <USBD_CtlError>
            err++;
 8009d00:	7afb      	ldrb	r3, [r7, #11]
 8009d02:	3301      	adds	r3, #1
 8009d04:	72fb      	strb	r3, [r7, #11]
          break;
 8009d06:	e089      	b.n	8009e1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d0e:	689b      	ldr	r3, [r3, #8]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d00b      	beq.n	8009d2c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d1a:	689b      	ldr	r3, [r3, #8]
 8009d1c:	687a      	ldr	r2, [r7, #4]
 8009d1e:	7c12      	ldrb	r2, [r2, #16]
 8009d20:	f107 0108 	add.w	r1, r7, #8
 8009d24:	4610      	mov	r0, r2
 8009d26:	4798      	blx	r3
 8009d28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d2a:	e077      	b.n	8009e1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d2c:	6839      	ldr	r1, [r7, #0]
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 fab1 	bl	800a296 <USBD_CtlError>
            err++;
 8009d34:	7afb      	ldrb	r3, [r7, #11]
 8009d36:	3301      	adds	r3, #1
 8009d38:	72fb      	strb	r3, [r7, #11]
          break;
 8009d3a:	e06f      	b.n	8009e1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d42:	68db      	ldr	r3, [r3, #12]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d00b      	beq.n	8009d60 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	7c12      	ldrb	r2, [r2, #16]
 8009d54:	f107 0108 	add.w	r1, r7, #8
 8009d58:	4610      	mov	r0, r2
 8009d5a:	4798      	blx	r3
 8009d5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d5e:	e05d      	b.n	8009e1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d60:	6839      	ldr	r1, [r7, #0]
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 fa97 	bl	800a296 <USBD_CtlError>
            err++;
 8009d68:	7afb      	ldrb	r3, [r7, #11]
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	72fb      	strb	r3, [r7, #11]
          break;
 8009d6e:	e055      	b.n	8009e1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d76:	691b      	ldr	r3, [r3, #16]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d00b      	beq.n	8009d94 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d82:	691b      	ldr	r3, [r3, #16]
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	7c12      	ldrb	r2, [r2, #16]
 8009d88:	f107 0108 	add.w	r1, r7, #8
 8009d8c:	4610      	mov	r0, r2
 8009d8e:	4798      	blx	r3
 8009d90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d92:	e043      	b.n	8009e1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d94:	6839      	ldr	r1, [r7, #0]
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 fa7d 	bl	800a296 <USBD_CtlError>
            err++;
 8009d9c:	7afb      	ldrb	r3, [r7, #11]
 8009d9e:	3301      	adds	r3, #1
 8009da0:	72fb      	strb	r3, [r7, #11]
          break;
 8009da2:	e03b      	b.n	8009e1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009daa:	695b      	ldr	r3, [r3, #20]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d00b      	beq.n	8009dc8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009db6:	695b      	ldr	r3, [r3, #20]
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	7c12      	ldrb	r2, [r2, #16]
 8009dbc:	f107 0108 	add.w	r1, r7, #8
 8009dc0:	4610      	mov	r0, r2
 8009dc2:	4798      	blx	r3
 8009dc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dc6:	e029      	b.n	8009e1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009dc8:	6839      	ldr	r1, [r7, #0]
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 fa63 	bl	800a296 <USBD_CtlError>
            err++;
 8009dd0:	7afb      	ldrb	r3, [r7, #11]
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	72fb      	strb	r3, [r7, #11]
          break;
 8009dd6:	e021      	b.n	8009e1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dde:	699b      	ldr	r3, [r3, #24]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d00b      	beq.n	8009dfc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dea:	699b      	ldr	r3, [r3, #24]
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	7c12      	ldrb	r2, [r2, #16]
 8009df0:	f107 0108 	add.w	r1, r7, #8
 8009df4:	4610      	mov	r0, r2
 8009df6:	4798      	blx	r3
 8009df8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dfa:	e00f      	b.n	8009e1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009dfc:	6839      	ldr	r1, [r7, #0]
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 fa49 	bl	800a296 <USBD_CtlError>
            err++;
 8009e04:	7afb      	ldrb	r3, [r7, #11]
 8009e06:	3301      	adds	r3, #1
 8009e08:	72fb      	strb	r3, [r7, #11]
          break;
 8009e0a:	e007      	b.n	8009e1c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009e0c:	6839      	ldr	r1, [r7, #0]
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 fa41 	bl	800a296 <USBD_CtlError>
          err++;
 8009e14:	7afb      	ldrb	r3, [r7, #11]
 8009e16:	3301      	adds	r3, #1
 8009e18:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009e1a:	bf00      	nop
      }
      break;
 8009e1c:	e037      	b.n	8009e8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	7c1b      	ldrb	r3, [r3, #16]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d109      	bne.n	8009e3a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e2e:	f107 0208 	add.w	r2, r7, #8
 8009e32:	4610      	mov	r0, r2
 8009e34:	4798      	blx	r3
 8009e36:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009e38:	e029      	b.n	8009e8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009e3a:	6839      	ldr	r1, [r7, #0]
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f000 fa2a 	bl	800a296 <USBD_CtlError>
        err++;
 8009e42:	7afb      	ldrb	r3, [r7, #11]
 8009e44:	3301      	adds	r3, #1
 8009e46:	72fb      	strb	r3, [r7, #11]
      break;
 8009e48:	e021      	b.n	8009e8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	7c1b      	ldrb	r3, [r3, #16]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d10d      	bne.n	8009e6e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e5a:	f107 0208 	add.w	r2, r7, #8
 8009e5e:	4610      	mov	r0, r2
 8009e60:	4798      	blx	r3
 8009e62:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	3301      	adds	r3, #1
 8009e68:	2207      	movs	r2, #7
 8009e6a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009e6c:	e00f      	b.n	8009e8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009e6e:	6839      	ldr	r1, [r7, #0]
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 fa10 	bl	800a296 <USBD_CtlError>
        err++;
 8009e76:	7afb      	ldrb	r3, [r7, #11]
 8009e78:	3301      	adds	r3, #1
 8009e7a:	72fb      	strb	r3, [r7, #11]
      break;
 8009e7c:	e007      	b.n	8009e8e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009e7e:	6839      	ldr	r1, [r7, #0]
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 fa08 	bl	800a296 <USBD_CtlError>
      err++;
 8009e86:	7afb      	ldrb	r3, [r7, #11]
 8009e88:	3301      	adds	r3, #1
 8009e8a:	72fb      	strb	r3, [r7, #11]
      break;
 8009e8c:	bf00      	nop
  }

  if (err != 0U)
 8009e8e:	7afb      	ldrb	r3, [r7, #11]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d11e      	bne.n	8009ed2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	88db      	ldrh	r3, [r3, #6]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d016      	beq.n	8009eca <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009e9c:	893b      	ldrh	r3, [r7, #8]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00e      	beq.n	8009ec0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	88da      	ldrh	r2, [r3, #6]
 8009ea6:	893b      	ldrh	r3, [r7, #8]
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	bf28      	it	cs
 8009eac:	4613      	movcs	r3, r2
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009eb2:	893b      	ldrh	r3, [r7, #8]
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	68f9      	ldr	r1, [r7, #12]
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 fa5d 	bl	800a378 <USBD_CtlSendData>
 8009ebe:	e009      	b.n	8009ed4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009ec0:	6839      	ldr	r1, [r7, #0]
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 f9e7 	bl	800a296 <USBD_CtlError>
 8009ec8:	e004      	b.n	8009ed4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 faae 	bl	800a42c <USBD_CtlSendStatus>
 8009ed0:	e000      	b.n	8009ed4 <USBD_GetDescriptor+0x2cc>
    return;
 8009ed2:	bf00      	nop
  }
}
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop

08009edc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	889b      	ldrh	r3, [r3, #4]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d131      	bne.n	8009f52 <USBD_SetAddress+0x76>
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	88db      	ldrh	r3, [r3, #6]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d12d      	bne.n	8009f52 <USBD_SetAddress+0x76>
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	885b      	ldrh	r3, [r3, #2]
 8009efa:	2b7f      	cmp	r3, #127	; 0x7f
 8009efc:	d829      	bhi.n	8009f52 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	885b      	ldrh	r3, [r3, #2]
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f08:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	2b03      	cmp	r3, #3
 8009f14:	d104      	bne.n	8009f20 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009f16:	6839      	ldr	r1, [r7, #0]
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 f9bc 	bl	800a296 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f1e:	e01d      	b.n	8009f5c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	7bfa      	ldrb	r2, [r7, #15]
 8009f24:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009f28:	7bfb      	ldrb	r3, [r7, #15]
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f000 ff45 	bl	800adbc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 fa7a 	bl	800a42c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009f38:	7bfb      	ldrb	r3, [r7, #15]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d004      	beq.n	8009f48 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2202      	movs	r2, #2
 8009f42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f46:	e009      	b.n	8009f5c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f50:	e004      	b.n	8009f5c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009f52:	6839      	ldr	r1, [r7, #0]
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 f99e 	bl	800a296 <USBD_CtlError>
  }
}
 8009f5a:	bf00      	nop
 8009f5c:	bf00      	nop
 8009f5e:	3710      	adds	r7, #16
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b084      	sub	sp, #16
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	885b      	ldrh	r3, [r3, #2]
 8009f76:	b2da      	uxtb	r2, r3
 8009f78:	4b4e      	ldr	r3, [pc, #312]	; (800a0b4 <USBD_SetConfig+0x150>)
 8009f7a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009f7c:	4b4d      	ldr	r3, [pc, #308]	; (800a0b4 <USBD_SetConfig+0x150>)
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d905      	bls.n	8009f90 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009f84:	6839      	ldr	r1, [r7, #0]
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 f985 	bl	800a296 <USBD_CtlError>
    return USBD_FAIL;
 8009f8c:	2303      	movs	r3, #3
 8009f8e:	e08c      	b.n	800a0aa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	2b02      	cmp	r3, #2
 8009f9a:	d002      	beq.n	8009fa2 <USBD_SetConfig+0x3e>
 8009f9c:	2b03      	cmp	r3, #3
 8009f9e:	d029      	beq.n	8009ff4 <USBD_SetConfig+0x90>
 8009fa0:	e075      	b.n	800a08e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009fa2:	4b44      	ldr	r3, [pc, #272]	; (800a0b4 <USBD_SetConfig+0x150>)
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d020      	beq.n	8009fec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009faa:	4b42      	ldr	r3, [pc, #264]	; (800a0b4 <USBD_SetConfig+0x150>)
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	461a      	mov	r2, r3
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009fb4:	4b3f      	ldr	r3, [pc, #252]	; (800a0b4 <USBD_SetConfig+0x150>)
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	4619      	mov	r1, r3
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f7fe ffe7 	bl	8008f8e <USBD_SetClassConfig>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009fc4:	7bfb      	ldrb	r3, [r7, #15]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d008      	beq.n	8009fdc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009fca:	6839      	ldr	r1, [r7, #0]
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 f962 	bl	800a296 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2202      	movs	r2, #2
 8009fd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009fda:	e065      	b.n	800a0a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f000 fa25 	bl	800a42c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2203      	movs	r2, #3
 8009fe6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009fea:	e05d      	b.n	800a0a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 fa1d 	bl	800a42c <USBD_CtlSendStatus>
      break;
 8009ff2:	e059      	b.n	800a0a8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009ff4:	4b2f      	ldr	r3, [pc, #188]	; (800a0b4 <USBD_SetConfig+0x150>)
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d112      	bne.n	800a022 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2202      	movs	r2, #2
 800a000:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a004:	4b2b      	ldr	r3, [pc, #172]	; (800a0b4 <USBD_SetConfig+0x150>)
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	461a      	mov	r2, r3
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a00e:	4b29      	ldr	r3, [pc, #164]	; (800a0b4 <USBD_SetConfig+0x150>)
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	4619      	mov	r1, r3
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f7fe ffd6 	bl	8008fc6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 fa06 	bl	800a42c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a020:	e042      	b.n	800a0a8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a022:	4b24      	ldr	r3, [pc, #144]	; (800a0b4 <USBD_SetConfig+0x150>)
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	461a      	mov	r2, r3
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d02a      	beq.n	800a086 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	b2db      	uxtb	r3, r3
 800a036:	4619      	mov	r1, r3
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f7fe ffc4 	bl	8008fc6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a03e:	4b1d      	ldr	r3, [pc, #116]	; (800a0b4 <USBD_SetConfig+0x150>)
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	461a      	mov	r2, r3
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a048:	4b1a      	ldr	r3, [pc, #104]	; (800a0b4 <USBD_SetConfig+0x150>)
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	4619      	mov	r1, r3
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f7fe ff9d 	bl	8008f8e <USBD_SetClassConfig>
 800a054:	4603      	mov	r3, r0
 800a056:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a058:	7bfb      	ldrb	r3, [r7, #15]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d00f      	beq.n	800a07e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a05e:	6839      	ldr	r1, [r7, #0]
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f000 f918 	bl	800a296 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	b2db      	uxtb	r3, r3
 800a06c:	4619      	mov	r1, r3
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f7fe ffa9 	bl	8008fc6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2202      	movs	r2, #2
 800a078:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a07c:	e014      	b.n	800a0a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 f9d4 	bl	800a42c <USBD_CtlSendStatus>
      break;
 800a084:	e010      	b.n	800a0a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 f9d0 	bl	800a42c <USBD_CtlSendStatus>
      break;
 800a08c:	e00c      	b.n	800a0a8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a08e:	6839      	ldr	r1, [r7, #0]
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 f900 	bl	800a296 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a096:	4b07      	ldr	r3, [pc, #28]	; (800a0b4 <USBD_SetConfig+0x150>)
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	4619      	mov	r1, r3
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f7fe ff92 	bl	8008fc6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a0a2:	2303      	movs	r3, #3
 800a0a4:	73fb      	strb	r3, [r7, #15]
      break;
 800a0a6:	bf00      	nop
  }

  return ret;
 800a0a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3710      	adds	r7, #16
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	24000360 	.word	0x24000360

0800a0b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b082      	sub	sp, #8
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	88db      	ldrh	r3, [r3, #6]
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	d004      	beq.n	800a0d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a0ca:	6839      	ldr	r1, [r7, #0]
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 f8e2 	bl	800a296 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a0d2:	e023      	b.n	800a11c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	2b02      	cmp	r3, #2
 800a0de:	dc02      	bgt.n	800a0e6 <USBD_GetConfig+0x2e>
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	dc03      	bgt.n	800a0ec <USBD_GetConfig+0x34>
 800a0e4:	e015      	b.n	800a112 <USBD_GetConfig+0x5a>
 800a0e6:	2b03      	cmp	r3, #3
 800a0e8:	d00b      	beq.n	800a102 <USBD_GetConfig+0x4a>
 800a0ea:	e012      	b.n	800a112 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	3308      	adds	r3, #8
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 f93c 	bl	800a378 <USBD_CtlSendData>
        break;
 800a100:	e00c      	b.n	800a11c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	3304      	adds	r3, #4
 800a106:	2201      	movs	r2, #1
 800a108:	4619      	mov	r1, r3
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 f934 	bl	800a378 <USBD_CtlSendData>
        break;
 800a110:	e004      	b.n	800a11c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a112:	6839      	ldr	r1, [r7, #0]
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 f8be 	bl	800a296 <USBD_CtlError>
        break;
 800a11a:	bf00      	nop
}
 800a11c:	bf00      	nop
 800a11e:	3708      	adds	r7, #8
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a134:	b2db      	uxtb	r3, r3
 800a136:	3b01      	subs	r3, #1
 800a138:	2b02      	cmp	r3, #2
 800a13a:	d81e      	bhi.n	800a17a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	88db      	ldrh	r3, [r3, #6]
 800a140:	2b02      	cmp	r3, #2
 800a142:	d004      	beq.n	800a14e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a144:	6839      	ldr	r1, [r7, #0]
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f000 f8a5 	bl	800a296 <USBD_CtlError>
        break;
 800a14c:	e01a      	b.n	800a184 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2201      	movs	r2, #1
 800a152:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d005      	beq.n	800a16a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	68db      	ldr	r3, [r3, #12]
 800a162:	f043 0202 	orr.w	r2, r3, #2
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	330c      	adds	r3, #12
 800a16e:	2202      	movs	r2, #2
 800a170:	4619      	mov	r1, r3
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 f900 	bl	800a378 <USBD_CtlSendData>
      break;
 800a178:	e004      	b.n	800a184 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a17a:	6839      	ldr	r1, [r7, #0]
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 f88a 	bl	800a296 <USBD_CtlError>
      break;
 800a182:	bf00      	nop
  }
}
 800a184:	bf00      	nop
 800a186:	3708      	adds	r7, #8
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	885b      	ldrh	r3, [r3, #2]
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d107      	bne.n	800a1ae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 f940 	bl	800a42c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a1ac:	e013      	b.n	800a1d6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	885b      	ldrh	r3, [r3, #2]
 800a1b2:	2b02      	cmp	r3, #2
 800a1b4:	d10b      	bne.n	800a1ce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	889b      	ldrh	r3, [r3, #4]
 800a1ba:	0a1b      	lsrs	r3, r3, #8
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	b2da      	uxtb	r2, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 f930 	bl	800a42c <USBD_CtlSendStatus>
}
 800a1cc:	e003      	b.n	800a1d6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a1ce:	6839      	ldr	r1, [r7, #0]
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f000 f860 	bl	800a296 <USBD_CtlError>
}
 800a1d6:	bf00      	nop
 800a1d8:	3708      	adds	r7, #8
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b082      	sub	sp, #8
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	6078      	str	r0, [r7, #4]
 800a1e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	3b01      	subs	r3, #1
 800a1f2:	2b02      	cmp	r3, #2
 800a1f4:	d80b      	bhi.n	800a20e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	885b      	ldrh	r3, [r3, #2]
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d10c      	bne.n	800a218 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2200      	movs	r2, #0
 800a202:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 f910 	bl	800a42c <USBD_CtlSendStatus>
      }
      break;
 800a20c:	e004      	b.n	800a218 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a20e:	6839      	ldr	r1, [r7, #0]
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f000 f840 	bl	800a296 <USBD_CtlError>
      break;
 800a216:	e000      	b.n	800a21a <USBD_ClrFeature+0x3c>
      break;
 800a218:	bf00      	nop
  }
}
 800a21a:	bf00      	nop
 800a21c:	3708      	adds	r7, #8
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}

0800a222 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a222:	b580      	push	{r7, lr}
 800a224:	b084      	sub	sp, #16
 800a226:	af00      	add	r7, sp, #0
 800a228:	6078      	str	r0, [r7, #4]
 800a22a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	781a      	ldrb	r2, [r3, #0]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	3301      	adds	r3, #1
 800a23c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	781a      	ldrb	r2, [r3, #0]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	3301      	adds	r3, #1
 800a24a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a24c:	68f8      	ldr	r0, [r7, #12]
 800a24e:	f7ff fa41 	bl	80096d4 <SWAPBYTE>
 800a252:	4603      	mov	r3, r0
 800a254:	461a      	mov	r2, r3
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	3301      	adds	r3, #1
 800a25e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	3301      	adds	r3, #1
 800a264:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a266:	68f8      	ldr	r0, [r7, #12]
 800a268:	f7ff fa34 	bl	80096d4 <SWAPBYTE>
 800a26c:	4603      	mov	r3, r0
 800a26e:	461a      	mov	r2, r3
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	3301      	adds	r3, #1
 800a278:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	3301      	adds	r3, #1
 800a27e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a280:	68f8      	ldr	r0, [r7, #12]
 800a282:	f7ff fa27 	bl	80096d4 <SWAPBYTE>
 800a286:	4603      	mov	r3, r0
 800a288:	461a      	mov	r2, r3
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	80da      	strh	r2, [r3, #6]
}
 800a28e:	bf00      	nop
 800a290:	3710      	adds	r7, #16
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}

0800a296 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a296:	b580      	push	{r7, lr}
 800a298:	b082      	sub	sp, #8
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
 800a29e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a2a0:	2180      	movs	r1, #128	; 0x80
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 fd20 	bl	800ace8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a2a8:	2100      	movs	r1, #0
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 fd1c 	bl	800ace8 <USBD_LL_StallEP>
}
 800a2b0:	bf00      	nop
 800a2b2:	3708      	adds	r7, #8
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b086      	sub	sp, #24
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d036      	beq.n	800a33c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a2d2:	6938      	ldr	r0, [r7, #16]
 800a2d4:	f000 f836 	bl	800a344 <USBD_GetLen>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	3301      	adds	r3, #1
 800a2dc:	b29b      	uxth	r3, r3
 800a2de:	005b      	lsls	r3, r3, #1
 800a2e0:	b29a      	uxth	r2, r3
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a2e6:	7dfb      	ldrb	r3, [r7, #23]
 800a2e8:	68ba      	ldr	r2, [r7, #8]
 800a2ea:	4413      	add	r3, r2
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	7812      	ldrb	r2, [r2, #0]
 800a2f0:	701a      	strb	r2, [r3, #0]
  idx++;
 800a2f2:	7dfb      	ldrb	r3, [r7, #23]
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a2f8:	7dfb      	ldrb	r3, [r7, #23]
 800a2fa:	68ba      	ldr	r2, [r7, #8]
 800a2fc:	4413      	add	r3, r2
 800a2fe:	2203      	movs	r2, #3
 800a300:	701a      	strb	r2, [r3, #0]
  idx++;
 800a302:	7dfb      	ldrb	r3, [r7, #23]
 800a304:	3301      	adds	r3, #1
 800a306:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a308:	e013      	b.n	800a332 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a30a:	7dfb      	ldrb	r3, [r7, #23]
 800a30c:	68ba      	ldr	r2, [r7, #8]
 800a30e:	4413      	add	r3, r2
 800a310:	693a      	ldr	r2, [r7, #16]
 800a312:	7812      	ldrb	r2, [r2, #0]
 800a314:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	3301      	adds	r3, #1
 800a31a:	613b      	str	r3, [r7, #16]
    idx++;
 800a31c:	7dfb      	ldrb	r3, [r7, #23]
 800a31e:	3301      	adds	r3, #1
 800a320:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a322:	7dfb      	ldrb	r3, [r7, #23]
 800a324:	68ba      	ldr	r2, [r7, #8]
 800a326:	4413      	add	r3, r2
 800a328:	2200      	movs	r2, #0
 800a32a:	701a      	strb	r2, [r3, #0]
    idx++;
 800a32c:	7dfb      	ldrb	r3, [r7, #23]
 800a32e:	3301      	adds	r3, #1
 800a330:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d1e7      	bne.n	800a30a <USBD_GetString+0x52>
 800a33a:	e000      	b.n	800a33e <USBD_GetString+0x86>
    return;
 800a33c:	bf00      	nop
  }
}
 800a33e:	3718      	adds	r7, #24
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a344:	b480      	push	{r7}
 800a346:	b085      	sub	sp, #20
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a34c:	2300      	movs	r3, #0
 800a34e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a354:	e005      	b.n	800a362 <USBD_GetLen+0x1e>
  {
    len++;
 800a356:	7bfb      	ldrb	r3, [r7, #15]
 800a358:	3301      	adds	r3, #1
 800a35a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	3301      	adds	r3, #1
 800a360:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d1f5      	bne.n	800a356 <USBD_GetLen+0x12>
  }

  return len;
 800a36a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3714      	adds	r7, #20
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr

0800a378 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2202      	movs	r2, #2
 800a388:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	68ba      	ldr	r2, [r7, #8]
 800a39c:	2100      	movs	r1, #0
 800a39e:	68f8      	ldr	r0, [r7, #12]
 800a3a0:	f000 fd2b 	bl	800adfa <USBD_LL_Transmit>

  return USBD_OK;
 800a3a4:	2300      	movs	r3, #0
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3710      	adds	r7, #16
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}

0800a3ae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a3ae:	b580      	push	{r7, lr}
 800a3b0:	b084      	sub	sp, #16
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	60f8      	str	r0, [r7, #12]
 800a3b6:	60b9      	str	r1, [r7, #8]
 800a3b8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	68ba      	ldr	r2, [r7, #8]
 800a3be:	2100      	movs	r1, #0
 800a3c0:	68f8      	ldr	r0, [r7, #12]
 800a3c2:	f000 fd1a 	bl	800adfa <USBD_LL_Transmit>

  return USBD_OK;
 800a3c6:	2300      	movs	r3, #0
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3710      	adds	r7, #16
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b084      	sub	sp, #16
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	60f8      	str	r0, [r7, #12]
 800a3d8:	60b9      	str	r1, [r7, #8]
 800a3da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2203      	movs	r2, #3
 800a3e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	68ba      	ldr	r2, [r7, #8]
 800a3f8:	2100      	movs	r1, #0
 800a3fa:	68f8      	ldr	r0, [r7, #12]
 800a3fc:	f000 fd1e 	bl	800ae3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a400:	2300      	movs	r3, #0
}
 800a402:	4618      	mov	r0, r3
 800a404:	3710      	adds	r7, #16
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}

0800a40a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a40a:	b580      	push	{r7, lr}
 800a40c:	b084      	sub	sp, #16
 800a40e:	af00      	add	r7, sp, #0
 800a410:	60f8      	str	r0, [r7, #12]
 800a412:	60b9      	str	r1, [r7, #8]
 800a414:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	68ba      	ldr	r2, [r7, #8]
 800a41a:	2100      	movs	r1, #0
 800a41c:	68f8      	ldr	r0, [r7, #12]
 800a41e:	f000 fd0d 	bl	800ae3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a422:	2300      	movs	r3, #0
}
 800a424:	4618      	mov	r0, r3
 800a426:	3710      	adds	r7, #16
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}

0800a42c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2204      	movs	r2, #4
 800a438:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a43c:	2300      	movs	r3, #0
 800a43e:	2200      	movs	r2, #0
 800a440:	2100      	movs	r1, #0
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f000 fcd9 	bl	800adfa <USBD_LL_Transmit>

  return USBD_OK;
 800a448:	2300      	movs	r3, #0
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3708      	adds	r7, #8
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}

0800a452 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a452:	b580      	push	{r7, lr}
 800a454:	b082      	sub	sp, #8
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2205      	movs	r2, #5
 800a45e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a462:	2300      	movs	r3, #0
 800a464:	2200      	movs	r2, #0
 800a466:	2100      	movs	r1, #0
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 fce7 	bl	800ae3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a46e:	2300      	movs	r3, #0
}
 800a470:	4618      	mov	r0, r3
 800a472:	3708      	adds	r7, #8
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a47c:	2200      	movs	r2, #0
 800a47e:	4913      	ldr	r1, [pc, #76]	; (800a4cc <MX_USB_DEVICE_Init+0x54>)
 800a480:	4813      	ldr	r0, [pc, #76]	; (800a4d0 <MX_USB_DEVICE_Init+0x58>)
 800a482:	f7fe fd07 	bl	8008e94 <USBD_Init>
 800a486:	4603      	mov	r3, r0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d001      	beq.n	800a490 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a48c:	f7f6 fb2a 	bl	8000ae4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a490:	4910      	ldr	r1, [pc, #64]	; (800a4d4 <MX_USB_DEVICE_Init+0x5c>)
 800a492:	480f      	ldr	r0, [pc, #60]	; (800a4d0 <MX_USB_DEVICE_Init+0x58>)
 800a494:	f7fe fd2e 	bl	8008ef4 <USBD_RegisterClass>
 800a498:	4603      	mov	r3, r0
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d001      	beq.n	800a4a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a49e:	f7f6 fb21 	bl	8000ae4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a4a2:	490d      	ldr	r1, [pc, #52]	; (800a4d8 <MX_USB_DEVICE_Init+0x60>)
 800a4a4:	480a      	ldr	r0, [pc, #40]	; (800a4d0 <MX_USB_DEVICE_Init+0x58>)
 800a4a6:	f7fe fc1f 	bl	8008ce8 <USBD_CDC_RegisterInterface>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d001      	beq.n	800a4b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a4b0:	f7f6 fb18 	bl	8000ae4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a4b4:	4806      	ldr	r0, [pc, #24]	; (800a4d0 <MX_USB_DEVICE_Init+0x58>)
 800a4b6:	f7fe fd53 	bl	8008f60 <USBD_Start>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d001      	beq.n	800a4c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a4c0:	f7f6 fb10 	bl	8000ae4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800a4c4:	f7f9 f80c 	bl	80034e0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a4c8:	bf00      	nop
 800a4ca:	bd80      	pop	{r7, pc}
 800a4cc:	240000b0 	.word	0x240000b0
 800a4d0:	24000364 	.word	0x24000364
 800a4d4:	2400001c 	.word	0x2400001c
 800a4d8:	2400009c 	.word	0x2400009c

0800a4dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	4905      	ldr	r1, [pc, #20]	; (800a4f8 <CDC_Init_FS+0x1c>)
 800a4e4:	4805      	ldr	r0, [pc, #20]	; (800a4fc <CDC_Init_FS+0x20>)
 800a4e6:	f7fe fc19 	bl	8008d1c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a4ea:	4905      	ldr	r1, [pc, #20]	; (800a500 <CDC_Init_FS+0x24>)
 800a4ec:	4803      	ldr	r0, [pc, #12]	; (800a4fc <CDC_Init_FS+0x20>)
 800a4ee:	f7fe fc37 	bl	8008d60 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a4f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	bd80      	pop	{r7, pc}
 800a4f8:	24000e40 	.word	0x24000e40
 800a4fc:	24000364 	.word	0x24000364
 800a500:	24000640 	.word	0x24000640

0800a504 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a504:	b480      	push	{r7}
 800a506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a508:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr

0800a514 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	4603      	mov	r3, r0
 800a51c:	6039      	str	r1, [r7, #0]
 800a51e:	71fb      	strb	r3, [r7, #7]
 800a520:	4613      	mov	r3, r2
 800a522:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a524:	79fb      	ldrb	r3, [r7, #7]
 800a526:	2b23      	cmp	r3, #35	; 0x23
 800a528:	d84a      	bhi.n	800a5c0 <CDC_Control_FS+0xac>
 800a52a:	a201      	add	r2, pc, #4	; (adr r2, 800a530 <CDC_Control_FS+0x1c>)
 800a52c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a530:	0800a5c1 	.word	0x0800a5c1
 800a534:	0800a5c1 	.word	0x0800a5c1
 800a538:	0800a5c1 	.word	0x0800a5c1
 800a53c:	0800a5c1 	.word	0x0800a5c1
 800a540:	0800a5c1 	.word	0x0800a5c1
 800a544:	0800a5c1 	.word	0x0800a5c1
 800a548:	0800a5c1 	.word	0x0800a5c1
 800a54c:	0800a5c1 	.word	0x0800a5c1
 800a550:	0800a5c1 	.word	0x0800a5c1
 800a554:	0800a5c1 	.word	0x0800a5c1
 800a558:	0800a5c1 	.word	0x0800a5c1
 800a55c:	0800a5c1 	.word	0x0800a5c1
 800a560:	0800a5c1 	.word	0x0800a5c1
 800a564:	0800a5c1 	.word	0x0800a5c1
 800a568:	0800a5c1 	.word	0x0800a5c1
 800a56c:	0800a5c1 	.word	0x0800a5c1
 800a570:	0800a5c1 	.word	0x0800a5c1
 800a574:	0800a5c1 	.word	0x0800a5c1
 800a578:	0800a5c1 	.word	0x0800a5c1
 800a57c:	0800a5c1 	.word	0x0800a5c1
 800a580:	0800a5c1 	.word	0x0800a5c1
 800a584:	0800a5c1 	.word	0x0800a5c1
 800a588:	0800a5c1 	.word	0x0800a5c1
 800a58c:	0800a5c1 	.word	0x0800a5c1
 800a590:	0800a5c1 	.word	0x0800a5c1
 800a594:	0800a5c1 	.word	0x0800a5c1
 800a598:	0800a5c1 	.word	0x0800a5c1
 800a59c:	0800a5c1 	.word	0x0800a5c1
 800a5a0:	0800a5c1 	.word	0x0800a5c1
 800a5a4:	0800a5c1 	.word	0x0800a5c1
 800a5a8:	0800a5c1 	.word	0x0800a5c1
 800a5ac:	0800a5c1 	.word	0x0800a5c1
 800a5b0:	0800a5c1 	.word	0x0800a5c1
 800a5b4:	0800a5c1 	.word	0x0800a5c1
 800a5b8:	0800a5c1 	.word	0x0800a5c1
 800a5bc:	0800a5c1 	.word	0x0800a5c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a5c0:	bf00      	nop
  }

  return (USBD_OK);
 800a5c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	370c      	adds	r7, #12
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr

0800a5d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  Buf[0] += 2;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	3302      	adds	r3, #2
 800a5e0:	b2da      	uxtb	r2, r3
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	701a      	strb	r2, [r3, #0]
  CDC_Transmit_FS(Buf, *Len);
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	b29b      	uxth	r3, r3
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 f80e 	bl	800a610 <CDC_Transmit_FS>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a5f4:	6879      	ldr	r1, [r7, #4]
 800a5f6:	4805      	ldr	r0, [pc, #20]	; (800a60c <CDC_Receive_FS+0x3c>)
 800a5f8:	f7fe fbb2 	bl	8008d60 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a5fc:	4803      	ldr	r0, [pc, #12]	; (800a60c <CDC_Receive_FS+0x3c>)
 800a5fe:	f7fe fc13 	bl	8008e28 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a602:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a604:	4618      	mov	r0, r3
 800a606:	3708      	adds	r7, #8
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}
 800a60c:	24000364 	.word	0x24000364

0800a610 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	460b      	mov	r3, r1
 800a61a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a61c:	2300      	movs	r3, #0
 800a61e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a620:	4b0d      	ldr	r3, [pc, #52]	; (800a658 <CDC_Transmit_FS+0x48>)
 800a622:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a626:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d001      	beq.n	800a636 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a632:	2301      	movs	r3, #1
 800a634:	e00b      	b.n	800a64e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a636:	887b      	ldrh	r3, [r7, #2]
 800a638:	461a      	mov	r2, r3
 800a63a:	6879      	ldr	r1, [r7, #4]
 800a63c:	4806      	ldr	r0, [pc, #24]	; (800a658 <CDC_Transmit_FS+0x48>)
 800a63e:	f7fe fb6d 	bl	8008d1c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a642:	4805      	ldr	r0, [pc, #20]	; (800a658 <CDC_Transmit_FS+0x48>)
 800a644:	f7fe fbaa 	bl	8008d9c <USBD_CDC_TransmitPacket>
 800a648:	4603      	mov	r3, r0
 800a64a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a64c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3710      	adds	r7, #16
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	24000364 	.word	0x24000364

0800a65c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b087      	sub	sp, #28
 800a660:	af00      	add	r7, sp, #0
 800a662:	60f8      	str	r0, [r7, #12]
 800a664:	60b9      	str	r1, [r7, #8]
 800a666:	4613      	mov	r3, r2
 800a668:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a66a:	2300      	movs	r3, #0
 800a66c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a66e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a672:	4618      	mov	r0, r3
 800a674:	371c      	adds	r7, #28
 800a676:	46bd      	mov	sp, r7
 800a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67c:	4770      	bx	lr
	...

0800a680 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	4603      	mov	r3, r0
 800a688:	6039      	str	r1, [r7, #0]
 800a68a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	2212      	movs	r2, #18
 800a690:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a692:	4b03      	ldr	r3, [pc, #12]	; (800a6a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a694:	4618      	mov	r0, r3
 800a696:	370c      	adds	r7, #12
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr
 800a6a0:	240000cc 	.word	0x240000cc

0800a6a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b083      	sub	sp, #12
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	6039      	str	r1, [r7, #0]
 800a6ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	2204      	movs	r2, #4
 800a6b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a6b6:	4b03      	ldr	r3, [pc, #12]	; (800a6c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	370c      	adds	r7, #12
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr
 800a6c4:	240000e0 	.word	0x240000e0

0800a6c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	6039      	str	r1, [r7, #0]
 800a6d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a6d4:	79fb      	ldrb	r3, [r7, #7]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d105      	bne.n	800a6e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a6da:	683a      	ldr	r2, [r7, #0]
 800a6dc:	4907      	ldr	r1, [pc, #28]	; (800a6fc <USBD_FS_ProductStrDescriptor+0x34>)
 800a6de:	4808      	ldr	r0, [pc, #32]	; (800a700 <USBD_FS_ProductStrDescriptor+0x38>)
 800a6e0:	f7ff fdea 	bl	800a2b8 <USBD_GetString>
 800a6e4:	e004      	b.n	800a6f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a6e6:	683a      	ldr	r2, [r7, #0]
 800a6e8:	4904      	ldr	r1, [pc, #16]	; (800a6fc <USBD_FS_ProductStrDescriptor+0x34>)
 800a6ea:	4805      	ldr	r0, [pc, #20]	; (800a700 <USBD_FS_ProductStrDescriptor+0x38>)
 800a6ec:	f7ff fde4 	bl	800a2b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a6f0:	4b02      	ldr	r3, [pc, #8]	; (800a6fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3708      	adds	r7, #8
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	24001640 	.word	0x24001640
 800a700:	0800af9c 	.word	0x0800af9c

0800a704 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b082      	sub	sp, #8
 800a708:	af00      	add	r7, sp, #0
 800a70a:	4603      	mov	r3, r0
 800a70c:	6039      	str	r1, [r7, #0]
 800a70e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a710:	683a      	ldr	r2, [r7, #0]
 800a712:	4904      	ldr	r1, [pc, #16]	; (800a724 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a714:	4804      	ldr	r0, [pc, #16]	; (800a728 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a716:	f7ff fdcf 	bl	800a2b8 <USBD_GetString>
  return USBD_StrDesc;
 800a71a:	4b02      	ldr	r3, [pc, #8]	; (800a724 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3708      	adds	r7, #8
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}
 800a724:	24001640 	.word	0x24001640
 800a728:	0800afb4 	.word	0x0800afb4

0800a72c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
 800a732:	4603      	mov	r3, r0
 800a734:	6039      	str	r1, [r7, #0]
 800a736:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	221a      	movs	r2, #26
 800a73c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a73e:	f000 f843 	bl	800a7c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a742:	4b02      	ldr	r3, [pc, #8]	; (800a74c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a744:	4618      	mov	r0, r3
 800a746:	3708      	adds	r7, #8
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}
 800a74c:	240000e4 	.word	0x240000e4

0800a750 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
 800a756:	4603      	mov	r3, r0
 800a758:	6039      	str	r1, [r7, #0]
 800a75a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a75c:	79fb      	ldrb	r3, [r7, #7]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d105      	bne.n	800a76e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a762:	683a      	ldr	r2, [r7, #0]
 800a764:	4907      	ldr	r1, [pc, #28]	; (800a784 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a766:	4808      	ldr	r0, [pc, #32]	; (800a788 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a768:	f7ff fda6 	bl	800a2b8 <USBD_GetString>
 800a76c:	e004      	b.n	800a778 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a76e:	683a      	ldr	r2, [r7, #0]
 800a770:	4904      	ldr	r1, [pc, #16]	; (800a784 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a772:	4805      	ldr	r0, [pc, #20]	; (800a788 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a774:	f7ff fda0 	bl	800a2b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a778:	4b02      	ldr	r3, [pc, #8]	; (800a784 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3708      	adds	r7, #8
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}
 800a782:	bf00      	nop
 800a784:	24001640 	.word	0x24001640
 800a788:	0800afc8 	.word	0x0800afc8

0800a78c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b082      	sub	sp, #8
 800a790:	af00      	add	r7, sp, #0
 800a792:	4603      	mov	r3, r0
 800a794:	6039      	str	r1, [r7, #0]
 800a796:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a798:	79fb      	ldrb	r3, [r7, #7]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d105      	bne.n	800a7aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a79e:	683a      	ldr	r2, [r7, #0]
 800a7a0:	4907      	ldr	r1, [pc, #28]	; (800a7c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a7a2:	4808      	ldr	r0, [pc, #32]	; (800a7c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a7a4:	f7ff fd88 	bl	800a2b8 <USBD_GetString>
 800a7a8:	e004      	b.n	800a7b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a7aa:	683a      	ldr	r2, [r7, #0]
 800a7ac:	4904      	ldr	r1, [pc, #16]	; (800a7c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a7ae:	4805      	ldr	r0, [pc, #20]	; (800a7c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a7b0:	f7ff fd82 	bl	800a2b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a7b4:	4b02      	ldr	r3, [pc, #8]	; (800a7c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3708      	adds	r7, #8
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	24001640 	.word	0x24001640
 800a7c4:	0800afd4 	.word	0x0800afd4

0800a7c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a7ce:	4b0f      	ldr	r3, [pc, #60]	; (800a80c <Get_SerialNum+0x44>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a7d4:	4b0e      	ldr	r3, [pc, #56]	; (800a810 <Get_SerialNum+0x48>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a7da:	4b0e      	ldr	r3, [pc, #56]	; (800a814 <Get_SerialNum+0x4c>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a7e0:	68fa      	ldr	r2, [r7, #12]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	4413      	add	r3, r2
 800a7e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d009      	beq.n	800a802 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a7ee:	2208      	movs	r2, #8
 800a7f0:	4909      	ldr	r1, [pc, #36]	; (800a818 <Get_SerialNum+0x50>)
 800a7f2:	68f8      	ldr	r0, [r7, #12]
 800a7f4:	f000 f814 	bl	800a820 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a7f8:	2204      	movs	r2, #4
 800a7fa:	4908      	ldr	r1, [pc, #32]	; (800a81c <Get_SerialNum+0x54>)
 800a7fc:	68b8      	ldr	r0, [r7, #8]
 800a7fe:	f000 f80f 	bl	800a820 <IntToUnicode>
  }
}
 800a802:	bf00      	nop
 800a804:	3710      	adds	r7, #16
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop
 800a80c:	1ff1e800 	.word	0x1ff1e800
 800a810:	1ff1e804 	.word	0x1ff1e804
 800a814:	1ff1e808 	.word	0x1ff1e808
 800a818:	240000e6 	.word	0x240000e6
 800a81c:	240000f6 	.word	0x240000f6

0800a820 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a820:	b480      	push	{r7}
 800a822:	b087      	sub	sp, #28
 800a824:	af00      	add	r7, sp, #0
 800a826:	60f8      	str	r0, [r7, #12]
 800a828:	60b9      	str	r1, [r7, #8]
 800a82a:	4613      	mov	r3, r2
 800a82c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a82e:	2300      	movs	r3, #0
 800a830:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a832:	2300      	movs	r3, #0
 800a834:	75fb      	strb	r3, [r7, #23]
 800a836:	e027      	b.n	800a888 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	0f1b      	lsrs	r3, r3, #28
 800a83c:	2b09      	cmp	r3, #9
 800a83e:	d80b      	bhi.n	800a858 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	0f1b      	lsrs	r3, r3, #28
 800a844:	b2da      	uxtb	r2, r3
 800a846:	7dfb      	ldrb	r3, [r7, #23]
 800a848:	005b      	lsls	r3, r3, #1
 800a84a:	4619      	mov	r1, r3
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	440b      	add	r3, r1
 800a850:	3230      	adds	r2, #48	; 0x30
 800a852:	b2d2      	uxtb	r2, r2
 800a854:	701a      	strb	r2, [r3, #0]
 800a856:	e00a      	b.n	800a86e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	0f1b      	lsrs	r3, r3, #28
 800a85c:	b2da      	uxtb	r2, r3
 800a85e:	7dfb      	ldrb	r3, [r7, #23]
 800a860:	005b      	lsls	r3, r3, #1
 800a862:	4619      	mov	r1, r3
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	440b      	add	r3, r1
 800a868:	3237      	adds	r2, #55	; 0x37
 800a86a:	b2d2      	uxtb	r2, r2
 800a86c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	011b      	lsls	r3, r3, #4
 800a872:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a874:	7dfb      	ldrb	r3, [r7, #23]
 800a876:	005b      	lsls	r3, r3, #1
 800a878:	3301      	adds	r3, #1
 800a87a:	68ba      	ldr	r2, [r7, #8]
 800a87c:	4413      	add	r3, r2
 800a87e:	2200      	movs	r2, #0
 800a880:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a882:	7dfb      	ldrb	r3, [r7, #23]
 800a884:	3301      	adds	r3, #1
 800a886:	75fb      	strb	r3, [r7, #23]
 800a888:	7dfa      	ldrb	r2, [r7, #23]
 800a88a:	79fb      	ldrb	r3, [r7, #7]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d3d3      	bcc.n	800a838 <IntToUnicode+0x18>
  }
}
 800a890:	bf00      	nop
 800a892:	bf00      	nop
 800a894:	371c      	adds	r7, #28
 800a896:	46bd      	mov	sp, r7
 800a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89c:	4770      	bx	lr
	...

0800a8a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b0b8      	sub	sp, #224	; 0xe0
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a8a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	601a      	str	r2, [r3, #0]
 800a8b0:	605a      	str	r2, [r3, #4]
 800a8b2:	609a      	str	r2, [r3, #8]
 800a8b4:	60da      	str	r2, [r3, #12]
 800a8b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a8b8:	f107 0310 	add.w	r3, r7, #16
 800a8bc:	22bc      	movs	r2, #188	; 0xbc
 800a8be:	2100      	movs	r1, #0
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f000 fb57 	bl	800af74 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a33      	ldr	r2, [pc, #204]	; (800a998 <HAL_PCD_MspInit+0xf8>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d15e      	bne.n	800a98e <HAL_PCD_MspInit+0xee>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a8d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a8d4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a8d6:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800a8da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a8de:	f107 0310 	add.w	r3, r7, #16
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f7f9 fdc6 	bl	8004474 <HAL_RCCEx_PeriphCLKConfig>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d001      	beq.n	800a8f2 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 800a8ee:	f7f6 f8f9 	bl	8000ae4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800a8f2:	f7f8 fdf5 	bl	80034e0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a8f6:	4b29      	ldr	r3, [pc, #164]	; (800a99c <HAL_PCD_MspInit+0xfc>)
 800a8f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a8fc:	4a27      	ldr	r2, [pc, #156]	; (800a99c <HAL_PCD_MspInit+0xfc>)
 800a8fe:	f043 0301 	orr.w	r3, r3, #1
 800a902:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a906:	4b25      	ldr	r3, [pc, #148]	; (800a99c <HAL_PCD_MspInit+0xfc>)
 800a908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a90c:	f003 0301 	and.w	r3, r3, #1
 800a910:	60fb      	str	r3, [r7, #12]
 800a912:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800a914:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800a918:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a91c:	2302      	movs	r3, #2
 800a91e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a922:	2300      	movs	r3, #0
 800a924:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a928:	2300      	movs	r3, #0
 800a92a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800a92e:	230a      	movs	r3, #10
 800a930:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a934:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800a938:	4619      	mov	r1, r3
 800a93a:	4819      	ldr	r0, [pc, #100]	; (800a9a0 <HAL_PCD_MspInit+0x100>)
 800a93c:	f7f7 f88e 	bl	8001a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a940:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a944:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a948:	2300      	movs	r3, #0
 800a94a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a94e:	2300      	movs	r3, #0
 800a950:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a954:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800a958:	4619      	mov	r1, r3
 800a95a:	4811      	ldr	r0, [pc, #68]	; (800a9a0 <HAL_PCD_MspInit+0x100>)
 800a95c:	f7f7 f87e 	bl	8001a5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a960:	4b0e      	ldr	r3, [pc, #56]	; (800a99c <HAL_PCD_MspInit+0xfc>)
 800a962:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a966:	4a0d      	ldr	r2, [pc, #52]	; (800a99c <HAL_PCD_MspInit+0xfc>)
 800a968:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a96c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a970:	4b0a      	ldr	r3, [pc, #40]	; (800a99c <HAL_PCD_MspInit+0xfc>)
 800a972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a976:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a97a:	60bb      	str	r3, [r7, #8]
 800a97c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a97e:	2200      	movs	r2, #0
 800a980:	2100      	movs	r1, #0
 800a982:	2065      	movs	r0, #101	; 0x65
 800a984:	f7f6 fc11 	bl	80011aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a988:	2065      	movs	r0, #101	; 0x65
 800a98a:	f7f6 fc28 	bl	80011de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a98e:	bf00      	nop
 800a990:	37e0      	adds	r7, #224	; 0xe0
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
 800a996:	bf00      	nop
 800a998:	40080000 	.word	0x40080000
 800a99c:	58024400 	.word	0x58024400
 800a9a0:	58020000 	.word	0x58020000

0800a9a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b082      	sub	sp, #8
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a9b8:	4619      	mov	r1, r3
 800a9ba:	4610      	mov	r0, r2
 800a9bc:	f7fe fb1d 	bl	8008ffa <USBD_LL_SetupStage>
}
 800a9c0:	bf00      	nop
 800a9c2:	3708      	adds	r7, #8
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b082      	sub	sp, #8
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a9da:	78fa      	ldrb	r2, [r7, #3]
 800a9dc:	6879      	ldr	r1, [r7, #4]
 800a9de:	4613      	mov	r3, r2
 800a9e0:	00db      	lsls	r3, r3, #3
 800a9e2:	4413      	add	r3, r2
 800a9e4:	009b      	lsls	r3, r3, #2
 800a9e6:	440b      	add	r3, r1
 800a9e8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a9ec:	681a      	ldr	r2, [r3, #0]
 800a9ee:	78fb      	ldrb	r3, [r7, #3]
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	f7fe fb57 	bl	80090a4 <USBD_LL_DataOutStage>
}
 800a9f6:	bf00      	nop
 800a9f8:	3708      	adds	r7, #8
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}

0800a9fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b082      	sub	sp, #8
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
 800aa06:	460b      	mov	r3, r1
 800aa08:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800aa10:	78fa      	ldrb	r2, [r7, #3]
 800aa12:	6879      	ldr	r1, [r7, #4]
 800aa14:	4613      	mov	r3, r2
 800aa16:	00db      	lsls	r3, r3, #3
 800aa18:	4413      	add	r3, r2
 800aa1a:	009b      	lsls	r3, r3, #2
 800aa1c:	440b      	add	r3, r1
 800aa1e:	334c      	adds	r3, #76	; 0x4c
 800aa20:	681a      	ldr	r2, [r3, #0]
 800aa22:	78fb      	ldrb	r3, [r7, #3]
 800aa24:	4619      	mov	r1, r3
 800aa26:	f7fe fbf0 	bl	800920a <USBD_LL_DataInStage>
}
 800aa2a:	bf00      	nop
 800aa2c:	3708      	adds	r7, #8
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}

0800aa32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa32:	b580      	push	{r7, lr}
 800aa34:	b082      	sub	sp, #8
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aa40:	4618      	mov	r0, r3
 800aa42:	f7fe fd24 	bl	800948e <USBD_LL_SOF>
}
 800aa46:	bf00      	nop
 800aa48:	3708      	adds	r7, #8
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}

0800aa4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa4e:	b580      	push	{r7, lr}
 800aa50:	b084      	sub	sp, #16
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aa56:	2301      	movs	r3, #1
 800aa58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	68db      	ldr	r3, [r3, #12]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d102      	bne.n	800aa68 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800aa62:	2300      	movs	r3, #0
 800aa64:	73fb      	strb	r3, [r7, #15]
 800aa66:	e008      	b.n	800aa7a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	68db      	ldr	r3, [r3, #12]
 800aa6c:	2b02      	cmp	r3, #2
 800aa6e:	d102      	bne.n	800aa76 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800aa70:	2301      	movs	r3, #1
 800aa72:	73fb      	strb	r3, [r7, #15]
 800aa74:	e001      	b.n	800aa7a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800aa76:	f7f6 f835 	bl	8000ae4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aa80:	7bfa      	ldrb	r2, [r7, #15]
 800aa82:	4611      	mov	r1, r2
 800aa84:	4618      	mov	r0, r3
 800aa86:	f7fe fcc4 	bl	8009412 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aa90:	4618      	mov	r0, r3
 800aa92:	f7fe fc6c 	bl	800936e <USBD_LL_Reset>
}
 800aa96:	bf00      	nop
 800aa98:	3710      	adds	r7, #16
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
	...

0800aaa0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b082      	sub	sp, #8
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aaae:	4618      	mov	r0, r3
 800aab0:	f7fe fcbf 	bl	8009432 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	6812      	ldr	r2, [r2, #0]
 800aac2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aac6:	f043 0301 	orr.w	r3, r3, #1
 800aaca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6a1b      	ldr	r3, [r3, #32]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d005      	beq.n	800aae0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aad4:	4b04      	ldr	r3, [pc, #16]	; (800aae8 <HAL_PCD_SuspendCallback+0x48>)
 800aad6:	691b      	ldr	r3, [r3, #16]
 800aad8:	4a03      	ldr	r2, [pc, #12]	; (800aae8 <HAL_PCD_SuspendCallback+0x48>)
 800aada:	f043 0306 	orr.w	r3, r3, #6
 800aade:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aae0:	bf00      	nop
 800aae2:	3708      	adds	r7, #8
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}
 800aae8:	e000ed00 	.word	0xe000ed00

0800aaec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b082      	sub	sp, #8
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7fe fcaf 	bl	800945e <USBD_LL_Resume>
}
 800ab00:	bf00      	nop
 800ab02:	3708      	adds	r7, #8
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}

0800ab08 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	460b      	mov	r3, r1
 800ab12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ab1a:	78fa      	ldrb	r2, [r7, #3]
 800ab1c:	4611      	mov	r1, r2
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7fe fd07 	bl	8009532 <USBD_LL_IsoOUTIncomplete>
}
 800ab24:	bf00      	nop
 800ab26:	3708      	adds	r7, #8
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b082      	sub	sp, #8
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	460b      	mov	r3, r1
 800ab36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ab3e:	78fa      	ldrb	r2, [r7, #3]
 800ab40:	4611      	mov	r1, r2
 800ab42:	4618      	mov	r0, r3
 800ab44:	f7fe fcc3 	bl	80094ce <USBD_LL_IsoINIncomplete>
}
 800ab48:	bf00      	nop
 800ab4a:	3708      	adds	r7, #8
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}

0800ab50 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b082      	sub	sp, #8
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7fe fd19 	bl	8009596 <USBD_LL_DevConnected>
}
 800ab64:	bf00      	nop
 800ab66:	3708      	adds	r7, #8
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b082      	sub	sp, #8
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f7fe fd16 	bl	80095ac <USBD_LL_DevDisconnected>
}
 800ab80:	bf00      	nop
 800ab82:	3708      	adds	r7, #8
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b082      	sub	sp, #8
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d13e      	bne.n	800ac16 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ab98:	4a21      	ldr	r2, [pc, #132]	; (800ac20 <USBD_LL_Init+0x98>)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	4a1f      	ldr	r2, [pc, #124]	; (800ac20 <USBD_LL_Init+0x98>)
 800aba4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800aba8:	4b1d      	ldr	r3, [pc, #116]	; (800ac20 <USBD_LL_Init+0x98>)
 800abaa:	4a1e      	ldr	r2, [pc, #120]	; (800ac24 <USBD_LL_Init+0x9c>)
 800abac:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800abae:	4b1c      	ldr	r3, [pc, #112]	; (800ac20 <USBD_LL_Init+0x98>)
 800abb0:	2209      	movs	r2, #9
 800abb2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800abb4:	4b1a      	ldr	r3, [pc, #104]	; (800ac20 <USBD_LL_Init+0x98>)
 800abb6:	2202      	movs	r2, #2
 800abb8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800abba:	4b19      	ldr	r3, [pc, #100]	; (800ac20 <USBD_LL_Init+0x98>)
 800abbc:	2200      	movs	r2, #0
 800abbe:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800abc0:	4b17      	ldr	r3, [pc, #92]	; (800ac20 <USBD_LL_Init+0x98>)
 800abc2:	2202      	movs	r2, #2
 800abc4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800abc6:	4b16      	ldr	r3, [pc, #88]	; (800ac20 <USBD_LL_Init+0x98>)
 800abc8:	2200      	movs	r2, #0
 800abca:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800abcc:	4b14      	ldr	r3, [pc, #80]	; (800ac20 <USBD_LL_Init+0x98>)
 800abce:	2200      	movs	r2, #0
 800abd0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800abd2:	4b13      	ldr	r3, [pc, #76]	; (800ac20 <USBD_LL_Init+0x98>)
 800abd4:	2200      	movs	r2, #0
 800abd6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800abd8:	4b11      	ldr	r3, [pc, #68]	; (800ac20 <USBD_LL_Init+0x98>)
 800abda:	2201      	movs	r2, #1
 800abdc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800abde:	4b10      	ldr	r3, [pc, #64]	; (800ac20 <USBD_LL_Init+0x98>)
 800abe0:	2201      	movs	r2, #1
 800abe2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800abe4:	4b0e      	ldr	r3, [pc, #56]	; (800ac20 <USBD_LL_Init+0x98>)
 800abe6:	2200      	movs	r2, #0
 800abe8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800abea:	480d      	ldr	r0, [pc, #52]	; (800ac20 <USBD_LL_Init+0x98>)
 800abec:	f7f7 f948 	bl	8001e80 <HAL_PCD_Init>
 800abf0:	4603      	mov	r3, r0
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d001      	beq.n	800abfa <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800abf6:	f7f5 ff75 	bl	8000ae4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800abfa:	2180      	movs	r1, #128	; 0x80
 800abfc:	4808      	ldr	r0, [pc, #32]	; (800ac20 <USBD_LL_Init+0x98>)
 800abfe:	f7f8 fbd4 	bl	80033aa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ac02:	2240      	movs	r2, #64	; 0x40
 800ac04:	2100      	movs	r1, #0
 800ac06:	4806      	ldr	r0, [pc, #24]	; (800ac20 <USBD_LL_Init+0x98>)
 800ac08:	f7f8 fb88 	bl	800331c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ac0c:	2280      	movs	r2, #128	; 0x80
 800ac0e:	2101      	movs	r1, #1
 800ac10:	4803      	ldr	r0, [pc, #12]	; (800ac20 <USBD_LL_Init+0x98>)
 800ac12:	f7f8 fb83 	bl	800331c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800ac16:	2300      	movs	r3, #0
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3708      	adds	r7, #8
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}
 800ac20:	24001840 	.word	0x24001840
 800ac24:	40080000 	.word	0x40080000

0800ac28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b084      	sub	sp, #16
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac30:	2300      	movs	r3, #0
 800ac32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac34:	2300      	movs	r3, #0
 800ac36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7f7 fa42 	bl	80020c8 <HAL_PCD_Start>
 800ac44:	4603      	mov	r3, r0
 800ac46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac48:	7bfb      	ldrb	r3, [r7, #15]
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f000 f942 	bl	800aed4 <USBD_Get_USB_Status>
 800ac50:	4603      	mov	r3, r0
 800ac52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac54:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3710      	adds	r7, #16
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ac5e:	b580      	push	{r7, lr}
 800ac60:	b084      	sub	sp, #16
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
 800ac66:	4608      	mov	r0, r1
 800ac68:	4611      	mov	r1, r2
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	70fb      	strb	r3, [r7, #3]
 800ac70:	460b      	mov	r3, r1
 800ac72:	70bb      	strb	r3, [r7, #2]
 800ac74:	4613      	mov	r3, r2
 800ac76:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ac86:	78bb      	ldrb	r3, [r7, #2]
 800ac88:	883a      	ldrh	r2, [r7, #0]
 800ac8a:	78f9      	ldrb	r1, [r7, #3]
 800ac8c:	f7f7 ff40 	bl	8002b10 <HAL_PCD_EP_Open>
 800ac90:	4603      	mov	r3, r0
 800ac92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac94:	7bfb      	ldrb	r3, [r7, #15]
 800ac96:	4618      	mov	r0, r3
 800ac98:	f000 f91c 	bl	800aed4 <USBD_Get_USB_Status>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aca0:	7bbb      	ldrb	r3, [r7, #14]
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3710      	adds	r7, #16
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}

0800acaa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acaa:	b580      	push	{r7, lr}
 800acac:	b084      	sub	sp, #16
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
 800acb2:	460b      	mov	r3, r1
 800acb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acb6:	2300      	movs	r3, #0
 800acb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acba:	2300      	movs	r3, #0
 800acbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800acc4:	78fa      	ldrb	r2, [r7, #3]
 800acc6:	4611      	mov	r1, r2
 800acc8:	4618      	mov	r0, r3
 800acca:	f7f7 ff89 	bl	8002be0 <HAL_PCD_EP_Close>
 800acce:	4603      	mov	r3, r0
 800acd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acd2:	7bfb      	ldrb	r3, [r7, #15]
 800acd4:	4618      	mov	r0, r3
 800acd6:	f000 f8fd 	bl	800aed4 <USBD_Get_USB_Status>
 800acda:	4603      	mov	r3, r0
 800acdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acde:	7bbb      	ldrb	r3, [r7, #14]
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3710      	adds	r7, #16
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	460b      	mov	r3, r1
 800acf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acf4:	2300      	movs	r3, #0
 800acf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acf8:	2300      	movs	r3, #0
 800acfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ad02:	78fa      	ldrb	r2, [r7, #3]
 800ad04:	4611      	mov	r1, r2
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7f8 f861 	bl	8002dce <HAL_PCD_EP_SetStall>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad10:	7bfb      	ldrb	r3, [r7, #15]
 800ad12:	4618      	mov	r0, r3
 800ad14:	f000 f8de 	bl	800aed4 <USBD_Get_USB_Status>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3710      	adds	r7, #16
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}

0800ad26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad26:	b580      	push	{r7, lr}
 800ad28:	b084      	sub	sp, #16
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
 800ad2e:	460b      	mov	r3, r1
 800ad30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad32:	2300      	movs	r3, #0
 800ad34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad36:	2300      	movs	r3, #0
 800ad38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ad40:	78fa      	ldrb	r2, [r7, #3]
 800ad42:	4611      	mov	r1, r2
 800ad44:	4618      	mov	r0, r3
 800ad46:	f7f8 f8a6 	bl	8002e96 <HAL_PCD_EP_ClrStall>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad4e:	7bfb      	ldrb	r3, [r7, #15]
 800ad50:	4618      	mov	r0, r3
 800ad52:	f000 f8bf 	bl	800aed4 <USBD_Get_USB_Status>
 800ad56:	4603      	mov	r3, r0
 800ad58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3710      	adds	r7, #16
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b085      	sub	sp, #20
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ad76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ad78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	da0b      	bge.n	800ad98 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ad80:	78fb      	ldrb	r3, [r7, #3]
 800ad82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad86:	68f9      	ldr	r1, [r7, #12]
 800ad88:	4613      	mov	r3, r2
 800ad8a:	00db      	lsls	r3, r3, #3
 800ad8c:	4413      	add	r3, r2
 800ad8e:	009b      	lsls	r3, r3, #2
 800ad90:	440b      	add	r3, r1
 800ad92:	333e      	adds	r3, #62	; 0x3e
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	e00b      	b.n	800adb0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ad98:	78fb      	ldrb	r3, [r7, #3]
 800ad9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad9e:	68f9      	ldr	r1, [r7, #12]
 800ada0:	4613      	mov	r3, r2
 800ada2:	00db      	lsls	r3, r3, #3
 800ada4:	4413      	add	r3, r2
 800ada6:	009b      	lsls	r3, r3, #2
 800ada8:	440b      	add	r3, r1
 800adaa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800adae:	781b      	ldrb	r3, [r3, #0]
  }
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3714      	adds	r7, #20
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr

0800adbc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b084      	sub	sp, #16
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	460b      	mov	r3, r1
 800adc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adc8:	2300      	movs	r3, #0
 800adca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adcc:	2300      	movs	r3, #0
 800adce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800add6:	78fa      	ldrb	r2, [r7, #3]
 800add8:	4611      	mov	r1, r2
 800adda:	4618      	mov	r0, r3
 800addc:	f7f7 fe73 	bl	8002ac6 <HAL_PCD_SetAddress>
 800ade0:	4603      	mov	r3, r0
 800ade2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ade4:	7bfb      	ldrb	r3, [r7, #15]
 800ade6:	4618      	mov	r0, r3
 800ade8:	f000 f874 	bl	800aed4 <USBD_Get_USB_Status>
 800adec:	4603      	mov	r3, r0
 800adee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adf0:	7bbb      	ldrb	r3, [r7, #14]
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3710      	adds	r7, #16
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}

0800adfa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800adfa:	b580      	push	{r7, lr}
 800adfc:	b086      	sub	sp, #24
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	60f8      	str	r0, [r7, #12]
 800ae02:	607a      	str	r2, [r7, #4]
 800ae04:	603b      	str	r3, [r7, #0]
 800ae06:	460b      	mov	r3, r1
 800ae08:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ae18:	7af9      	ldrb	r1, [r7, #11]
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	f7f7 ff8c 	bl	8002d3a <HAL_PCD_EP_Transmit>
 800ae22:	4603      	mov	r3, r0
 800ae24:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae26:	7dfb      	ldrb	r3, [r7, #23]
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f000 f853 	bl	800aed4 <USBD_Get_USB_Status>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae32:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3718      	adds	r7, #24
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b086      	sub	sp, #24
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	60f8      	str	r0, [r7, #12]
 800ae44:	607a      	str	r2, [r7, #4]
 800ae46:	603b      	str	r3, [r7, #0]
 800ae48:	460b      	mov	r3, r1
 800ae4a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae50:	2300      	movs	r3, #0
 800ae52:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ae5a:	7af9      	ldrb	r1, [r7, #11]
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	f7f7 ff08 	bl	8002c74 <HAL_PCD_EP_Receive>
 800ae64:	4603      	mov	r3, r0
 800ae66:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae68:	7dfb      	ldrb	r3, [r7, #23]
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f000 f832 	bl	800aed4 <USBD_Get_USB_Status>
 800ae70:	4603      	mov	r3, r0
 800ae72:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae74:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3718      	adds	r7, #24
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}

0800ae7e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae7e:	b580      	push	{r7, lr}
 800ae80:	b082      	sub	sp, #8
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6078      	str	r0, [r7, #4]
 800ae86:	460b      	mov	r3, r1
 800ae88:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ae90:	78fa      	ldrb	r2, [r7, #3]
 800ae92:	4611      	mov	r1, r2
 800ae94:	4618      	mov	r0, r3
 800ae96:	f7f7 ff38 	bl	8002d0a <HAL_PCD_EP_GetRxCount>
 800ae9a:	4603      	mov	r3, r0
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3708      	adds	r7, #8
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b083      	sub	sp, #12
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aeac:	4b03      	ldr	r3, [pc, #12]	; (800aebc <USBD_static_malloc+0x18>)
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	370c      	adds	r7, #12
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb8:	4770      	bx	lr
 800aeba:	bf00      	nop
 800aebc:	24001d4c 	.word	0x24001d4c

0800aec0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b083      	sub	sp, #12
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]

}
 800aec8:	bf00      	nop
 800aeca:	370c      	adds	r7, #12
 800aecc:	46bd      	mov	sp, r7
 800aece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed2:	4770      	bx	lr

0800aed4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b085      	sub	sp, #20
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	4603      	mov	r3, r0
 800aedc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aede:	2300      	movs	r3, #0
 800aee0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aee2:	79fb      	ldrb	r3, [r7, #7]
 800aee4:	2b03      	cmp	r3, #3
 800aee6:	d817      	bhi.n	800af18 <USBD_Get_USB_Status+0x44>
 800aee8:	a201      	add	r2, pc, #4	; (adr r2, 800aef0 <USBD_Get_USB_Status+0x1c>)
 800aeea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeee:	bf00      	nop
 800aef0:	0800af01 	.word	0x0800af01
 800aef4:	0800af07 	.word	0x0800af07
 800aef8:	0800af0d 	.word	0x0800af0d
 800aefc:	0800af13 	.word	0x0800af13
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800af00:	2300      	movs	r3, #0
 800af02:	73fb      	strb	r3, [r7, #15]
    break;
 800af04:	e00b      	b.n	800af1e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800af06:	2303      	movs	r3, #3
 800af08:	73fb      	strb	r3, [r7, #15]
    break;
 800af0a:	e008      	b.n	800af1e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800af0c:	2301      	movs	r3, #1
 800af0e:	73fb      	strb	r3, [r7, #15]
    break;
 800af10:	e005      	b.n	800af1e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800af12:	2303      	movs	r3, #3
 800af14:	73fb      	strb	r3, [r7, #15]
    break;
 800af16:	e002      	b.n	800af1e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800af18:	2303      	movs	r3, #3
 800af1a:	73fb      	strb	r3, [r7, #15]
    break;
 800af1c:	bf00      	nop
  }
  return usb_status;
 800af1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af20:	4618      	mov	r0, r3
 800af22:	3714      	adds	r7, #20
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr

0800af2c <__libc_init_array>:
 800af2c:	b570      	push	{r4, r5, r6, lr}
 800af2e:	4d0d      	ldr	r5, [pc, #52]	; (800af64 <__libc_init_array+0x38>)
 800af30:	4c0d      	ldr	r4, [pc, #52]	; (800af68 <__libc_init_array+0x3c>)
 800af32:	1b64      	subs	r4, r4, r5
 800af34:	10a4      	asrs	r4, r4, #2
 800af36:	2600      	movs	r6, #0
 800af38:	42a6      	cmp	r6, r4
 800af3a:	d109      	bne.n	800af50 <__libc_init_array+0x24>
 800af3c:	4d0b      	ldr	r5, [pc, #44]	; (800af6c <__libc_init_array+0x40>)
 800af3e:	4c0c      	ldr	r4, [pc, #48]	; (800af70 <__libc_init_array+0x44>)
 800af40:	f000 f820 	bl	800af84 <_init>
 800af44:	1b64      	subs	r4, r4, r5
 800af46:	10a4      	asrs	r4, r4, #2
 800af48:	2600      	movs	r6, #0
 800af4a:	42a6      	cmp	r6, r4
 800af4c:	d105      	bne.n	800af5a <__libc_init_array+0x2e>
 800af4e:	bd70      	pop	{r4, r5, r6, pc}
 800af50:	f855 3b04 	ldr.w	r3, [r5], #4
 800af54:	4798      	blx	r3
 800af56:	3601      	adds	r6, #1
 800af58:	e7ee      	b.n	800af38 <__libc_init_array+0xc>
 800af5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800af5e:	4798      	blx	r3
 800af60:	3601      	adds	r6, #1
 800af62:	e7f2      	b.n	800af4a <__libc_init_array+0x1e>
 800af64:	0800b024 	.word	0x0800b024
 800af68:	0800b024 	.word	0x0800b024
 800af6c:	0800b024 	.word	0x0800b024
 800af70:	0800b028 	.word	0x0800b028

0800af74 <memset>:
 800af74:	4402      	add	r2, r0
 800af76:	4603      	mov	r3, r0
 800af78:	4293      	cmp	r3, r2
 800af7a:	d100      	bne.n	800af7e <memset+0xa>
 800af7c:	4770      	bx	lr
 800af7e:	f803 1b01 	strb.w	r1, [r3], #1
 800af82:	e7f9      	b.n	800af78 <memset+0x4>

0800af84 <_init>:
 800af84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af86:	bf00      	nop
 800af88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af8a:	bc08      	pop	{r3}
 800af8c:	469e      	mov	lr, r3
 800af8e:	4770      	bx	lr

0800af90 <_fini>:
 800af90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af92:	bf00      	nop
 800af94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af96:	bc08      	pop	{r3}
 800af98:	469e      	mov	lr, r3
 800af9a:	4770      	bx	lr
